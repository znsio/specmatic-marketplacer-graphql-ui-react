"""
Requires that exactly one field must be supplied and that field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
    """The URL that specifies the behavior of this scalar."""
    url: String!
) on SCALAR

"""Site wide customization settings for a marketplace"""
type AccountSettings {
    """
    Currency options that can be displayed to the user to set
    as the session currency.
    """
    availableCurrencies: [Currency!]!

    """Custom "Powered by" footer, if defined"""
    customPostFooterPoweredByHtml: String!

    """Display "Powered by" text?"""
    displayPoweredByText: Boolean!
    id: ID!

    """If true requires the user to be logged in to view any frontend pages"""
    requireLoginToViewFrontend: Boolean!
    useMarketplacerFrontend: Boolean!
}

"""Autogenerated input type of ActivityLogDownloadMutation"""
input ActivityLogDownloadMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Contextual History IDs for the needed download"""
    contextualHistoryIds: [ID!]! = []
}

"""Autogenerated return type of ActivityLogDownloadMutation."""
type ActivityLogDownloadMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    export: ImportExport
    status: Int!
}

"""Arguments for finding variants and adding them to a cart."""
input AddCartItemInput {
    """The way in which the buyer will receive the good or service."""
    deliveryMethod: DeliveryMethodEnum = null

    """Custom form data to add to the cart"""
    formData: JSON

    """Update the quantity of the item held in the cart to this number."""
    quantity: Int!

    """
    Barcodes of variants to add to the cart. The given barcodes must be unique. If
    a barcode is associated with multiple variants, it will raise an error.
    """
    variantBarcode: String = ""

    """IDs of the variants to add to the cart."""
    variantId: ID = ""
}

"""All information necessary for a complete address."""
type Address implements Node {
    """Building number, unit number (optional), and street"""
    address: String!
    city: String!
    country: Country!

    """Full address of the seller"""
    fullAddress: String!
    id: ID!

    """Latitude of an address."""
    lat: Float

    """Longitude of an address."""
    lng: Float

    """Latitude and longitude of the seller"""
    location: String

    """Url showing the location of the seller on google maps"""
    mapUrl: String

    """Also known as 'zip code'."""
    postcode: String!
    state: State

    """
    Second line for address info. Sometimes used for apartment number or something similar
    """
    subaddress: String
}

"""Coordinates and their associated DB ID"""
type AddressGeolocation {
    id: ID!

    """Latitude"""
    lat: Float!

    """Longitude"""
    lng: Float!
}

"""Input attributes for creating or updating an address."""
input AddressInput {
    """Building number, unit number, and street. Required for creation."""
    address: String

    """Required for creation."""
    city: String

    """
    An identifying value for looking up the relevant country. Can be a DB ID or
    two-character country abbreviation. Defaults to the sites home country.
    """
    country: CountryInput

    """Required for update."""
    id: ID

    """Required for creation."""
    postcode: String

    """Required for creation."""
    state: StateInput

    """
    Second line for address info. Sometimes used for apartment number or something similar. Required for creation.
    """
    subaddress: String
}

"""The connection type for Address."""
type AddresssConnection {
    """A list of edges."""
    edges: [AddresssEdge]

    """A list of nodes."""
    nodes: [Address]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type AddresssEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: Address
}

"""
Adjustments to a line item or invoice, e.g. promotion discounts, fees, etc.
"""
type Adjustment implements Node {
    adjustmentType: AdjustmentTypeEnum

    """The amount adjusted. Denominated in cents."""
    amountCents: Int

    """The amount adjusted. In string with currency symbol."""
    amountFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """ Denominated in cents."""
    amountToWithholdFromSellerRemittanceCents: Int

    """ In string with currency symbol."""
    amountToWithholdFromSellerRemittanceFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """The type of discount this adjustment applies to"""
    appliesTo: AdjustmentAppliesToEnum

    """The description of the adjustment."""
    description: String
    id: ID!
}

"""The target that the adjustment applies to."""
enum AdjustmentAppliesToEnum {
    """Applies the discount to the subtotal."""
    SUBTOTAL_DISCOUNT

    """Applies a free shipping discount."""
    FREE_SHIPPING_DISCOUNT
}

"""Apply one or more adjustments to a line item or invoice."""
input AdjustmentInput {
    """The type of adjustment, available options: PROMOTION, FEE."""
    adjustmentType: AdjustmentTypeEnum!

    """Amount of the adjustment. Denominated in cents."""
    amountCents: Int!

    """
    The amount to be remitted to the seller. Denominated in cents. Must be less than the absolute value of the amount
    """
    amountToWithholdFromSellerRemittanceCents: Int!

    """The description of the adjustment."""
    description: String!

    """
    Allows associating the adjustment with the source of the adjustment, e.g. the ID of the promotion.
    """
    sourceId: ID
}

"""The type of adjustment to apply."""
enum AdjustmentTypeEnum {
    """Promotion adjustment type."""
    PROMOTION

    """Fee adjustment type"""
    FEE
}

"""Properties of an admin"""
type Admin implements Node {
    """Email address"""
    emailAddress: String
    id: ID!

    """Name"""
    name: String
}

"""Autogenerated input type of AdminLoginUsernameMutation"""
input AdminLoginUsernameMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """The administrator's password"""
    password: String!

    """The administrator's username or email address"""
    username: String!
}

"""Autogenerated return type of AdminLoginUsernameMutation."""
type AdminLoginUsernameMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    sessionToken: String
    status: Int!
}

union AdminOrUser = Admin | User

"""An advert"""
type Advert implements Node {
    """This field returns option type values set to the advert."""
    advertOptionValues(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): AdvertOptionValueConnection!

    """Availability of the advert"""
    availability: [AdvertAvailabilityEnum!]!

    """
    The additional cost of shipping the advert domestically, which is added to the Sellers base domestic shipping rate.
    """
    baseDomesticShippingCost: Float

    """
    The additional cost of shipping the advert internationally, which is added to
    the Sellers base international shipping rate.
    """
    baseInternationalShippingCost: Float

    """Terms & conditions text to display on the advert."""
    bookingTerms: String
    brand: Brand

    """
    Brand labels before being mapped to a canonical brand. (Includes the original values for both unmapped and mapped brands)
    """
    brandBeforeMapping: [String!]!
    catalogRulesErrors: [CatalogRulesError!]

    """Optional product code for the advert."""
    code: String
    condition: AdvertConditionEnum!
    createdAt: ISO8601DateTime!

    """Custom form template information for the advert"""
    customFormTemplate: CustomFormTemplate
    customIframeThumbnail: Image
    customIframeUrl: String

    """Description provided by seller as markdown"""
    description: String

    """Description converted to HTML"""
    descriptionHtml: String

    """Whether to display the given advert."""
    displayable: Boolean!

    """Image to display on the advert tile."""
    displayImage: Image

    """PDF documents for information on advert"""
    documents(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): AdvertDocumentsConnection
    domesticShippingCost: Float @deprecated(reason: "Use `base_domestic_shipping_cost` instead.")

    """This field returns option values from single-select option types."""
    dropdownOptionValues(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): OptionalOptionValueConnection! @deprecated(reason: "This field is deprecated in favour of AdvertOptionValues.")

    """Price used for editing by sellers"""
    editablePrice: Decimal

    """Price used for editing by sellers Denominated in cents."""
    editablePriceCents: Int

    """Price used for editing by sellers In string with currency symbol."""
    editablePriceFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """Price used for editing by sellers"""
    editableSalePrice: Decimal

    """Price used for editing by sellers Denominated in cents."""
    editableSalePriceCents: Int

    """Price used for editing by sellers In string with currency symbol."""
    editableSalePriceFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String
    errorMessages: [ErrorMessage!]!

    """An ID that is managed the retailer."""
    externalId: String
    externalIds: [ExternalID!]!

    """This field returns option values from multi-select option types."""
    featureOptionValues(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): OptionValueConnection! @deprecated(reason: "This field is deprecated in favour of AdvertOptionValues.")

    """This field returns values from free-text option types."""
    freetextOptionValues(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): FreetextOptionValueConnection! @deprecated(reason: "This field is deprecated in favour of AdvertOptionValues.")

    """
    Title for display (may include Brand and Model Year depending on configuration)
    """
    fullTitle: String!
    gender: AdvertGenderEnum

    """Golden Product associated to this advert"""
    goldenProduct: GoldenProduct

    """Do any of the variants have duplicate barcodes"""
    hasDuplicateBarcodes: Boolean
    hasFreeDomesticShipping: Boolean
    hasFreeInternationalPostage: Boolean @deprecated(reason: "Use `has_free_international_shipping` instead.")
    hasFreeInternationalShipping: Boolean
    hasFreePostage: Boolean @deprecated(reason: "Use `has_free_domestic_shipping` instead.")

    """Whether advert has invalid variants"""
    hasInvalidVariants: Boolean!
    id: ID!
    images(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): ImagesConnection!
    internationalShippingCost: Float @deprecated(reason: "Use `base_international_shipping_cost` instead.")
    internationalShippingEnabled: Boolean
    isFeatured: Boolean
    isPromoted: Boolean

    """The individual item tax rate on advert."""
    itemTaxRate: Decimal
    legacyId: Int!

    """Lowest non-sale price available for the item."""
    lowestOriginalPrice: String

    """Lowest non-sale price available for the item. Denominated in cents."""
    lowestOriginalPriceCents: Int

    """
    Lowest non-sale price available for the item in session currency. Useful for
    display purpose only as all monetary transactions will be charged in the
    marketplace currency.
    """
    lowestOriginalPriceInSessionCurrency: String

    """
    Absolute lowest price (sale price or original price) available for the item.
    """
    lowestPrice: String

    """
    Absolute lowest price (sale price or original price) available for the item. Denominated in cents.
    """
    lowestPriceCents: Int

    """
    Absolute lowest price (sale price or original price) available for the item in
    session currency. Useful for display purpose only as all monetary transactions
    will be charged in the marketplace currency.
    """
    lowestPriceInSessionCurrency: String

    """Maximum purchase quantity allowed for successful checkout"""
    maxPurchaseQuantity: Int

    """Price Unit as a Configurable Unit of Measure"""
    measurementPriceUnit: MeasurementUnit

    """Metadata key/values"""
    metadata: [Metadatum!]!

    """Minimum purchase quantity required for successful checkout"""
    minPurchaseQuantity: Int
    model: Model

    """
    The status of an advert, determined by the relationship of the advert and it's sellers online status
    """
    online: Boolean!

    """Original price formatted as a string (e.g. 'From $30')"""
    originalPriceFormatted: String @deprecated(reason: "Using this field may trigger significant slowdowns. Deprecated in favour of the `original_price_formatted` on ES Adverts")

    """Country of origin in ISO 2 format"""
    originCountryCode: String
    pagePath: String!
    priceType: AdvertPriceTypeEnum
    priceUnit: AdvertPriceUnitEnum

    """
    This field returns key-value pairs of single-select and free-text option type values.
    """
    productDetails: [KeyValue!] @deprecated(reason: "This field is deprecated in favour of AdvertOptionValues.")
    productFeatures: [String!]

    """
    The name of the most recent active promotion that this advert is part of.
    """
    promotionText: String

    """Whether seller published an advert."""
    published: Boolean!

    """Rating reviews"""
    rating: AdvertRating

    """The recommended retail price (RRP) for the item."""
    recommendedRetailPrice: String

    """The recommended retail price (RRP) for the item. Denominated in cents."""
    recommendedRetailPriceCents: Int

    """
    The recommended retail price (RRP) for the item. In string with currency symbol.
    """
    recommendedRetailPriceFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """Does this advert require vetting. (See "vetted" field)"""
    requiresVetting: Boolean!

    """Time when requires vetting is set to true"""
    requiresVettingAt: ISO8601DateTime

    """End of the period in which the sale price is valid (or null)"""
    salePriceEndAt: ISO8601DateTime

    """Sale price formatted as a string e.g. ('Now from $21')"""
    salePriceFormatted: String @deprecated(reason: "Using this field may trigger significant slowdowns. Deprecated in favour of the `sale_price_formatted` on ES Adverts")

    """Start of the period in which the sale price is valid (or null)"""
    salePriceStartAt: ISO8601DateTime
    saleType: AdvertSaleTypeEnum

    """
    Additional taxons to permit the advert to appear in a wider variety of search results.
    """
    secondaryTaxons(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): TaxonConnection!
    seller: Seller!

    """The direct shipping parcel information for the advert"""
    shippingParcel: ShippingParcel

    """Either a direct parcel information or inferred from taxon"""
    shippingParcelToUse: ShippingParcel

    """Brand Sizing Chart. Warning: this can be slow for many records."""
    sizeMatrix: SizeMatrix
    specifications: String
    specificationsHtml: String
    statusText: String
    taxCode: String

    """
    The Taxon (or Category) that an Advert belongs to - eg. Bikes, Shoes, Wigs
    """
    taxon: Taxon! @deprecated(reason: "This field will error if we display an Advert that does not have a Taxon - ie. the Advert has been importedfrom an external source and not yet mapped to a Taxon. Deprecated in favour of taxonNullable. Will be removed 2022-05-01")

    """
    Taxon labels before being mapped to a canonical taxon. (Includes the original values for both unmapped and mapped taxons)
    """
    taxonBeforeMapping: [String!]!

    """
    The Taxon (or Category) that an Advert belongs to - eg. Bikes, Shoes, Wigs.
    """
    taxonNullable: Taxon

    """Whether therapeutic goods labelling is enabled on variants."""
    therapeuticGoodsLabellingEnabled: Boolean!

    """Whether therapeutic goods labelling is enabled on the vertical."""
    therapeuticGoodsLabellingVisible: Boolean!
    title: String!

    """
    The total cost of shipping one item domestically. Denominated in cents. Each
    additional item in an order will incur the shipping cost returned in the
    baseDomesticShippingCost field
    """
    totalDomesticShippingCostCents: Int

    """
    The total cost of shipping one item internationally. Denominated in cents.
    Each additional item in an order will incur the shipping cost returned in the
    baseInternationalShippingCost field
    """
    totalInternationalShippingCostCents: Int
    updatedAt: ISO8601DateTime!
    url: String

    """Variants returned are ordered by position"""
    variants(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """
        Whether to only fetch variants that are displayable (e.g. are valid, have inventory available)
        """
        displayableOnly: Boolean

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): VariantConnection!

    """
    Has this advert been vetted. NOTE: Is only relevant if requiresVetting is true
    """
    vetted: Boolean!

    """Whether the advert has undergone vetting and been rejected."""
    vettingRejected: Boolean!

    """The reason why the advert was rejected."""
    vettingRejectedReason: String

    """The wholesale price for the item."""
    wholesalePrice: String

    """The wholesale price for the item. Denominated in cents."""
    wholesalePriceCents: Int

    """The wholesale price for the item. In string with currency symbol."""
    wholesalePriceFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """Wholesale promo price of the advert"""
    wholesalePromoPrice: Decimal

    """Wholesale promo price of the advert Denominated in cents."""
    wholesalePromoPriceCents: Int

    """
    End of the period in which the wholesale promo price is valid (or null)
    """
    wholesalePromoPriceEndAt: ISO8601DateTime

    """Wholesale promo price of the advert In string with currency symbol."""
    wholesalePromoPriceFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """
    Start of the period in which the wholesale promo price is valid (or null)
    """
    wholesalePromoPriceStartAt: ISO8601DateTime

    """When relevant, the model year of the product."""
    year: Int
    youtubeVideoId: String
    youtubeVideoUrl: String
}

"""The availability of the product."""
enum AdvertAvailabilityEnum {
    """For rentable items."""
    HIRE

    """Being sold by a private seller (i.e. not a store)."""
    CLASSIFIED

    """Can be purchased in the store."""
    IN_STORE

    """Can be purchased via the website."""
    BUY_ONLINE

    """Can be purchased via the website then picked up in store."""
    CLICK_AND_COLLECT
}

"""Condition of the product being advertised."""
enum AdvertConditionEnum {
    NEW
    USED
}

"""The connection type for Advert."""
type AdvertConnection {
    """A list of edges."""
    edges: [AdvertEdge]

    """A list of nodes."""
    nodes: [Advert]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""Autogenerated input type of AdvertDeleteMutation"""
input AdvertDeleteMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID of the advert to mark as deleted"""
    id: ID!
}

"""Autogenerated return type of AdvertDeleteMutation."""
type AdvertDeleteMutationPayload {
    advert: Advert

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

"""PDF documents relating to the advert"""
type AdvertDocument implements Node {
    """The name of the PDF"""
    filename: String
    id: ID!

    """The file size of the attached document in bytes."""
    size: Int

    """The Adverts attached PDF documents"""
    url: String
}

"""
Advert document upload. Exactly one of (dataBase64 AND filename) or sourceUrl must be supplied.
"""
input AdvertDocumentInput {
    """The document data, base64 encoded."""
    dataBase64: String

    """The ID from an existing document"""
    documentId: ID

    """The filename that will be used to label this document."""
    filename: String

    """The file size of the document in bytes."""
    size: Int

    """A URL from which the document data can be fetched."""
    sourceUrl: String
}

"""The connection type for AdvertDocument."""
type AdvertDocumentsConnection {
    """A list of edges."""
    edges: [AdvertDocumentsEdge]

    """A list of nodes."""
    nodes: [AdvertDocument]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type AdvertDocumentsEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: AdvertDocument
}

"""Represents the length of an event broken up into periods of days."""
enum AdvertDurationPeriodEnum {
    """0 Days or field is null"""
    DAYS_0

    """1-5 Days"""
    DAYS_1_TO_5

    """6-10 Days"""
    DAYS_6_TO_10

    """11-15 Days"""
    DAYS_11_TO_15

    """16-19 Days"""
    DAYS_16_TO_19

    """20 Days or more"""
    DAYS_20_PLUS
}

"""An edge in a connection."""
type AdvertEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: Advert
}

input AdvertFilterInput {
    brandIds: [ID!] = []

    """Select variants where the advert has a particular External ID"""
    externalId: ExternalIDInput = null
    legacyIds: [Int!] = null

    """Keywords to search for. (Currently Title and Product ID)"""
    q: String = null
    status: AdvertStatusEnum = null
    taxonIds: [ID!] = []
    title: String = null
    year: Int = null
}

"""Attributes for filtering adverts"""
input AdvertFilters {
    """Variants with matching barcode"""
    barcode: String

    """Advert with matching brand"""
    brandId: ID

    """Select adverts created since this time"""
    createdSince: ISO8601DateTime = null

    """Select adverts created until this time"""
    createdUntil: ISO8601DateTime = null

    """Advert with matching marketplacer database ID"""
    legacyId: Int

    """Advert that have been rejected via vetting"""
    rejectedViaVetting: Boolean

    """Advert with variant with matching sku"""
    sku: String

    """Advert with matching status"""
    status: AdvertStatusEnum

    """Advert with matching category"""
    taxonId: ID

    """Advert with matching title"""
    title: String

    """Adverts that have catalog rule errors"""
    withFailedCatalogRules: Boolean
}

"""The intended gender of the product when applicable."""
enum AdvertGenderEnum {
    UNISEX
    MALE
    FEMALE
}

input AdvertInput {
    """
    Advert option values of the advert. If this argument is given, advert option
    values will be updated to match the input and delete the missing ones.
    """
    advertOptionValues: [AdvertOptionValueInput!]
    attemptAutoPublish: Boolean = false

    """
    The additional cost of shipping the product domestically, which is added to the Sellers base domestic shipping rate.
    """
    baseDomesticShippingCost: String

    """
    The additional cost of shipping the product internationally, which is added to
    the Sellers base international shipping rate.
    """
    baseInternationalShippingCost: String
    brandId: ID

    """
    Will create a source mapping and attempt auto mapping of brand. You
    can use either brandId or brandMappings but not both. brandMappings
    accepts a collection of strings, where the 1st successful match will
    be used. A successful match is where we have a match to an existing
    brand mapping, or the string matches the brand name exactly.
    NOTE: this was called map_brand in the v2 API.

    """
    brandMappings: [String!]

    """Optional product code for the advert."""
    code: String
    customIframeThumbnail: ImageInput
    customIframeUrl: String
    description: String

    """PDF documents relating to the advert"""
    documents: [AdvertDocumentInput!]

    """Optional external id to identify the product"""
    externalId: String

    """External IDs key/value pairs."""
    externalIds: [KeyValueInput!]

    """
    DEPRECATED: This argument is deprecated in favour of AdvertOptionValues. Option value ids for multi-select option types
    """
    featureOptionValueIds: [ID!]

    """Optional gender that is attributed to the product"""
    gender: AdvertGenderEnum
    hasFreeDomesticShipping: Boolean
    images: [ImageInput!]
    itemTaxRate: Decimal

    """Maximum purchase quantity allowed for successful checkout"""
    maxPurchaseQuantity: Int

    """Metadata key/value pairs."""
    metadata: [KeyValueInput!]

    """Minimum purchase quantity allowed for successful checkout"""
    minPurchaseQuantity: Int
    price: String
    priceType: AdvertPriceTypeEnum
    priceUnit: AdvertPriceUnitEnum

    """
    DEPRECATED: This argument is deprecated in favour of AdvertOptionValues.
    Key-value pairs of single-select and free-text option type values.
    """
    productDetails: [KeyValueInput!]
    productFeatures: [String!]
    recommendedRetailPrice: String
    salePrice: String
    salePriceEndAt: ISO8601DateTime
    salePriceStartAt: ISO8601DateTime
    saleType: AdvertSaleTypeEnum
    shippingParcelAttributes: ShippingParcelInput
    specifications: String
    taxCode: String
    taxonId: ID

    """
    Will create a source mapping and attempt auto mapping of taxon. You
    can use either taxonId or taxonMappings but not both. taxonMappings
    accepts a collection of strings, where the 1st successful match will
    be used. A successful match is where we have a match to an existing
    taxon mapping.
    NOTE: this was called map_taxon in the v2 API.

    """
    taxonMappings: [String!]
    therapeuticGoodsLabellingEnabled: Boolean = false
    title: String
    variants: [VariantInput!]
    vetted: Boolean
    vettingRejectedReason: String
    wholesalePrice: String
    wholesalePromoPrice: String
    wholesalePromoPriceEndAt: ISO8601DateTime
    wholesalePromoPriceStartAt: ISO8601DateTime
    youtubeVideoUrl: String
}

"""
Advert option value for an advert's option type supporting all field types.
"""
type AdvertOptionValue implements Node {
    """
    ID for the value. This value is less likely to change when the field values are unchanged but cannot guaranty.
    """
    id: ID!

    """Option Type the value belongs to"""
    optionType: OptionType!

    """Option value for single-select or multi-select Option Type"""
    optionValue: OptionValue

    """Value for free-text Option Type"""
    textValue: String
}

"""The connection type for AdvertOptionValue."""
type AdvertOptionValueConnection {
    """A list of edges."""
    edges: [AdvertOptionValueEdge]

    """A list of nodes."""
    nodes: [AdvertOptionValue]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type AdvertOptionValueEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: AdvertOptionValue
}

"""
Input for updating an advert option value. Set only optionValueId for
single-select and multi-select option types, and set only optionTypeId and
textValue for a free-text option type.
"""
input AdvertOptionValueInput {
    """Option Type ID required for a free-text option type"""
    optionTypeId: ID

    """Option Value ID used for single-select and multi-select option types"""
    optionValueId: ID

    """Free-text value used for a free-text option type"""
    textValue: String
}

"""
Labels for products or services with non-standard or non-fixed pricing.
"""
enum AdvertPriceTypeEnum {
    """For adverts with a minimum price, but whose final price may vary."""
    FROM

    """
    Price On Application. For adverts whose price
    cannot be determined without first contacting the seller.
    """
    POA
}

"""
Units of time or measurement by which products or services can be priced.
"""
enum AdvertPriceUnitEnum {
    METRE
    SQUARE_METRE
    CUBIC_METRE
    PACK
    KILOGRAM
    LITRE
    SQUARE_FEET
    FEET
    CUBIC_FEET
    POUND
    PER_HOUR
    PER_DAY
    PER_WEEK
    PER_FORTNIGHT
    PER_MONTH
}

"""Autogenerated input type of AdvertPublishedUpdateMutation"""
input AdvertPublishedUpdateMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID of the advert"""
    id: ID!
    published: Boolean!
}

"""Autogenerated return type of AdvertPublishedUpdateMutation."""
type AdvertPublishedUpdateMutationPayload {
    advert: Advert

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

"""rating data for Advert"""
type AdvertRating {
    """The number of ratings that have been submitted"""
    count: Int!

    """ID that belongs to this advert from the third party rating provider"""
    externalId: String

    """Averaged star-rating of all submitted reviews (1-5)"""
    stars: Float!
}

"""The type of transaction permitted for a given advert."""
enum AdvertSaleTypeEnum {
    """Can be purchased via the website or other means."""
    BUY_ONLINE

    """Can be purchased exclusively via the website."""
    BUY_ONLINE_ONLY

    """
    Can be purchased via the website and can be delivered or picked up in store.
    """
    BUY_ONLINE_OR_CLICK_AND_COLLECT

    """Can be purchased via the website then picked up in store."""
    CLICK_AND_COLLECT

    """Being sold by a private seller (i.e. not a store)."""
    CLASSIFIED

    """For rentable items."""
    HIRE

    """Can only be purchased in the store."""
    IN_STORE
}

"""The connection type for Advert."""
type AdvertsConnection {
    """A list of edges."""
    edges: [AdvertsEdge]

    """A list of nodes."""
    nodes: [Advert]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""
Filter option data that can be used to build various filters
that can be applied to the current advert search results returned
when performing an advert search query
"""
type AdvertSearchApplicableFilters {
    availabilityFilterOptions: [AvailabilityFilterOption!]
    brandFilterOptions: [BrandFilterOption!]
    conditionFilterOptions: [ConditionFilterOption!]
    genderFilterOptions: [GenderFilterOption!]
    modelFilterOptions: [ModelFilterOption!]
    optionTypeFilterOptions: [OptionTypeFilterOption!]
    priceRange: PriceRange
    ratingFilterOptions: [RatingFilterOption!]
    sellerFilterOptions: [SellerFilterOption!]
    taxonFilterOptions: [TaxonFilterOption!]
}

"""Advert search arguments for building an ElasticSearch query."""
input AdvertSearchInput {
    """Request specific adverts by ID rather than query on advert attributes."""
    advertIds: [ID!]

    """The ways in which the good or service can be purchased and collected."""
    availability: [AdvertAvailabilityEnum!]

    """
    Minimum date for booking availability. Specific to adverts for services
    that accept date-based reservations, such as hotels, tours, or events.
    """
    bookingDateFrom: ISO8601DateTime

    """
    Minimum date for booking availability. Specific to adverts for services
    that accept date-based reservations, such as hotels, tours, or events.
    """
    bookingDateTo: ISO8601DateTime

    """IDs of desired brands. See the Brand data type for more details."""
    brandIds: [ID!]

    """
    Note: This field is now deprecated. Use brandSlugs field instead.
    Brand name as represented by a partial URL path with spaces replaced by '-'.
    Must match a brand name saved in the database and search index.
    """
    brandSlug: String

    """
    Brand names as represented by a partial URL path with spaces replaced by '-'.
    Must match brand names saved in the database and search index.
    """
    brandSlugs: [String!]

    """Collapse like Adverts into a single result in the response."""
    collapse: Boolean

    """The conditions of the product being advertised."""
    conditions: [AdvertConditionEnum!]

    """
    IDs of the desired countries (i.e. where the sellers are based).
    See the Country data type for more details.
    """
    countryIds: [ID!]

    """Indicates how long the advertised event lasts."""
    durationPeriod: AdvertDurationPeriodEnum

    """Gender for whom the product is intended."""
    genders: [AdvertGenderEnum!]

    """Search advert text fields with one or more keywords."""
    keywordQuery: String

    """
    Location name, usually a city, as represented by a partial URL path with spaces replaced by '-'.
    Must match an indexed location name.
    """
    locationSlug: String

    """Query adverts by maximum price."""
    maxPrice: Float

    """Query adverts by maximum price denominated in cents."""
    maxPriceCents: Int

    """Query adverts by minimum price."""
    minPrice: Float

    """Query adverts by minimum price denominated in cents."""
    minPriceCents: Int

    """IDs of the desired model."""
    modelIds: [ID!]

    """
    Model name as represented by a partial URL path with spaces replaced by '-'.
    """
    modelSlug: String

    """
    IDs of desired option values (e.g. 'red', 'large').
    See the OptionValue data type for more details.
    """
    optionValueIds: [ID!]

    """
    Point in time ID of the index at which the search performs. Point in time ID expires after 1 minute
    """
    pointInTime: String

    """The desired postcode, which matches according to the seller's address"""
    postcode: String

    """
    Where advert is published to, either "marketplace" or "m_store"
    """
    publishedTo: String

    """Rating selection for filtering"""
    ratings: [String!]

    """
    For searching by region or state. Must be the abbreviation
    of the region/state name (e.g. use 'VIC', not 'Victoria').
    """
    regionName: String

    """
    Region, state, or province name as represented by a partial URL path with spaces replaced by '-'.
    """
    regionSlug: String

    """
    When location is included in the search, the radius (in kilometers
    or miles depending on country) from the geographic center of the queried location.
    """
    searchDistance: Int

    """
    Whether your searching for adverts by retailer or by individual adverts.
    """
    searchType: AdvertSearchTypeEnum

    """ID of the desired seller. See the Seller data type for more details."""
    sellerId: ID

    """IDs of the desired sellers. See the Seller data type for more details."""
    sellerIds: [ID!]

    """The attributes by which results can be sorted."""
    sortBy: AdvertSearchSortByEnum

    """ID of the desired taxon. See the Taxon data type for more details."""
    taxonId: ID

    """
    Taxon name as represented by a partial URL path with spaces replaced by '-'.
    """
    taxonSlug: String

    """Based on the taxonType of the associated Taxon."""
    taxonType: TaxonTypeEnum

    """Only return adverts which have been updated since this date"""
    updatedSince: ISO8601DateTime
}

"""Advert search response payload."""
type AdvertSearchResponse {
    adverts(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """Returns the first _n_ elements from the list."""
        first: Int
        skipLogViewed: Boolean = false
    ): AdvertsConnection!
    applicableFilters: AdvertSearchApplicableFilters
    esAdverts(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """Returns the first _n_ elements from the list."""
        first: Int
        skipLogViewed: Boolean = false
    ): ESAdvertsConnection!

    """
    Point in time ID of the index at which the search performs. Point in time ID expires after 1 minute
    """
    pointInTime: String
    seoContent: SeoContent
}

"""Determines how results are sorted."""
enum AdvertSearchSortByEnum {
    """
    For adverts with dates and/or times, start with the advert
    whose date/time is closest to now followed by adverts further in the future.
    """
    SOONEST

    """Start with the advert with the lowest price."""
    CHEAPEST

    """Start with the advert with the highest price."""
    MOST_EXPENSIVE

    """Put adverts that are on sale at the top of results."""
    SALE

    """Start with the most-recently-created advert followed by older adverts."""
    LATEST

    """Sort alphabetically from numbers to 'a' to 'z'."""
    ALPHABETICAL

    """Sort alphabetically from 'z' to 'a' to numbers."""
    ALPHABETICAL_DESC

    """
    For searches that include location parameters, use the ElasticSearch relevance score,
    but include proximity of the seller to the queried location to calculate that score
    (closer seller equals higher score).
    """
    NEAREST

    """
    The order of advert results when a sort type isn't specified.
    Put featured adverts at the top, ordering featured and non-featured adverts
    by the ElasticSearch relevance score.
    """
    DEFAULT

    """Start with the advert with the lowest rating."""
    LOWEST_RATING

    """Start with the advert with the highest rating."""
    HIGHEST_RATING
}

"""Determines the shape of the results data."""
enum AdvertSearchTypeEnum {
    """Search results are aggregated by seller."""
    RETAILER

    """Search results are returned as individual adverts."""
    ADVERT
}

"""An edge in a connection."""
type AdvertsEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: Advert
}

"""Site wide advert settings for a marketplace"""
type AdvertSettings {
    allowedSaleTypes: [AdvertSaleTypeEnum!]

    """If true, advert auto mapping feature is enabled."""
    autoMappingEnabled: Boolean!
    defaultSaleType: AdvertSaleTypeEnum

    """
    If true, allows the use of free-text and multi-select variant option types.
    """
    freeTextVariantOptionTypeEnabled: Boolean!
    id: ID!

    """
    If true, enables imperial units of measurement for Comparable Unit Pricing fields.
    """
    imperialUnitsEnabled: Boolean!

    """If true, optional option types are enabled."""
    optionalOptionTypesEnabled: Boolean! @deprecated(reason: "Optional option type is enabled for all, therefore this setting is redundant. This field will be removed no sooner than 2024-09-01")

    """
    If true, enables adding a product to cart directly from the search results page.
    """
    permitsCartQuickView: Boolean!

    """True if we want to show seller location on the advert."""
    showLocationOnAdvertTile: Boolean!

    """True if price types should be shown."""
    showPriceTypes: Boolean!

    """
    True if we want to show the Therapeutic Warning Labels fields and option.
    """
    therapeuticGoodsLabellingEnabled: Boolean!
}

"""Autogenerated input type of AdvertSpreadsheetConfirmImportMutation"""
input AdvertSpreadsheetConfirmImportMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    importId: ID!
}

"""Autogenerated return type of AdvertSpreadsheetConfirmImportMutation."""
type AdvertSpreadsheetConfirmImportMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    import: ImportExport
    status: Int!
}

"""Autogenerated input type of AdvertSpreadsheetDownloadMutation"""
input AdvertSpreadsheetDownloadMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    filters: AdvertFilters = null
    format: SpreadsheetEnum = XLSX
    invalidOnly: Boolean = false

    """Selected columns to include in the spreadsheet"""
    selectedColumns: [String!] = null
    sellerId: ID = null
}

"""Autogenerated return type of AdvertSpreadsheetDownloadMutation."""
type AdvertSpreadsheetDownloadMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    export: ImportExport
    status: Int!
}

"""Autogenerated input type of AdvertSpreadsheetUploadMutation"""
input AdvertSpreadsheetUploadMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    deleteOthers: Boolean = false
    preview: Boolean = false

    """
    ID of the seller. May be omitted if using a seller api key, but is required otherwise
    """
    sellerId: ID
    spreadsheet: FileInput!
}

"""Autogenerated return type of AdvertSpreadsheetUploadMutation."""
type AdvertSpreadsheetUploadMutationPayload {
    advertCount: Int

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    import: ImportExport
    status: Int!
    variantCount: Int
}

type AdvertStatisticsSummary {
    clicks: Int!
    date: String!
    views: Int!
}

enum AdvertStatusEnum {
    DISPLAYED
    NOT_DISPLAYED
    FEATURED
}

enum AdvertStockStatusEnum {
    HAS_STOCK
    OUT_OF_STOCK
}

"""Attributes for sorting adverts"""
input AdvertsWhereSort {
    """Fields to sort invoices"""
    field: AdvertsWhereSortFieldEnum = CREATED_AT

    """Ordering to sort the results"""
    ordering: SortOrderingEnum = ASCENDING
}

"""The field that is used to sort adverts"""
enum AdvertsWhereSortFieldEnum {
    """Timestamp at which the advert was created."""
    CREATED_AT

    """Timestamp at which the advert was updated."""
    UPDATED_AT

    """Timestamp at which the advert was last submitted for vetting."""
    REQUIRES_VETTING_AT

    """Timestamp at which the advert was rejected during the vetting process."""
    VETTING_REJECTED_AT
}

"""The image presentation format"""
enum AdvertTileImageFormatEnum {
    """
    add space between the border and the image, show the full image scaled and centred
    """
    PADDED

    """
    don't add space between the border and the image, crop the image to cover the whole image area
    """
    FULL_BLEED
}

"""The image aspect ratio"""
enum AdvertTileImageRatioEnum {
    """1:1 (Square)"""
    RATIO_1_1

    """4:3 (Wide)"""
    RATIO_4_3

    """3:4 (Tall)"""
    RATIO_3_4
}

"""Autogenerated input type of AdvertUpsertMutation"""
input AdvertUpsertMutationInput {
    advertId: ID = null
    attributes: AdvertInput!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
}

"""Autogenerated return type of AdvertUpsertMutation."""
type AdvertUpsertMutationPayload {
    advert: Advert

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

input AdvertVettingApproveInput {
    """A collection of ids of the products to approve for vetting."""
    advertIds: [ID!]!
}

"""Autogenerated return type of AdvertVettingApproveMutation."""
type AdvertVettingApproveMutationPayload {
    adverts(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): AdvertsConnection

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

input AdvertVettingRejectInput {
    """A collection of ids of the products to reject for vetting."""
    advertIds: [ID!]!

    """The reason the products is being rejected."""
    vettingRejectedReason: String!
}

"""Autogenerated return type of AdvertVettingRejectMutation."""
type AdvertVettingRejectMutationPayload {
    adverts(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): AdvertsConnection

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

input AdvertVettingResubmitInput {
    """A collection of ids of the products to be resubmitted for vetting."""
    advertIds: [ID!]!
}

"""Autogenerated return type of AdvertVettingResubmitMutation."""
type AdvertVettingResubmitMutationPayload {
    adverts(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): AdvertsConnection

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

"""Adyen settings for billing."""
type AdyenBillingSettings {
    adyenBillingPaymentsWidgetPaymentMethod: ID
    adyenDirectDebitPaymentMethod: ID
    billingMerchantAccount: String
    category: CategoryTypeEnum!
    checkoutApiKey: String
    checkoutEndpoint: String
    clientKey: String
    collectThreeDSecureInformation: Boolean!
    description: String!
    hmacKey: String
    logoUrl: String!
    paymentsApiAuth: String
    paymentsEndpoint: String
    providerHandle: String!
    providerName: String!
    status: StatusTypeEnum!
}

"""Adyen settings for ecommerce."""
type AdyenEcommerceSettings {
    adyenEcommercePaymentsWidgetPaymentMethod: ID
    category: CategoryTypeEnum!
    checkoutApiKey: String
    checkoutEndpoint: String
    clientKey: String

    """ Denominated in cents."""
    customMerchantBaseFeeCents: Int

    """ In string with currency symbol."""
    customMerchantBaseFeeFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String
    customMerchantFee: Float
    description: String!
    dropInEnabled: Boolean!
    ecommerceMerchantAccount: String
    hmacKey: String
    logoUrl: String!
    overrideCustomMerchantFee: Boolean!
    paymentsApiAuth: String
    paymentsEndpoint: String
    providerHandle: String!
    providerName: String!
    status: StatusTypeEnum!
}

"""Adyen response"""
type AdyenResponse {
    body: JSON
}

"""Autogenerated input type of AdyenSettingsCreateOrUpdateMutation"""
input AdyenSettingsCreateOrUpdateMutationInput {
    """Adyen billing merchant account."""
    billingMerchantAccount: String

    """Adyen checkout API key."""
    checkoutApiKey: String!

    """Adyen checkout API URL."""
    checkoutEndpoint: String!

    """Adyen client side key."""
    clientKey: String

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Merchant base fee."""
    customMerchantBaseFee: String

    """Percentage of the order total to be charged for the merchant fee."""
    customMerchantFee: String

    """Adyen drop in enabled."""
    dropInEnabled: Boolean

    """Adyen ecommerce merchant account."""
    ecommerceMerchantAccount: String

    """Adyen hmac key."""
    hmacKey: String!

    """Override the custom merchant fee."""
    overrideCustomMerchantFee: Boolean

    """Adyen payments API auth key."""
    paymentsApiAuth: String!

    """Adyen payments API URL."""
    paymentsEndpoint: String!
}

"""Autogenerated return type of AdyenSettingsCreateOrUpdateMutation."""
type AdyenSettingsCreateOrUpdateMutationPayload {
    adyenBillingSettings: AdyenBillingSettings
    adyenEcommerceSettings: AdyenEcommerceSettings

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

"""Autogenerated input type of AdyenSettingsDeleteMutation"""
input AdyenSettingsDeleteMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
}

"""Autogenerated return type of AdyenSettingsDeleteMutation."""
type AdyenSettingsDeleteMutationPayload {
    adyenBillingSettings: AdyenBillingSettings
    adyenEcommerceSettings: AdyenEcommerceSettings

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

"""Afterpay payment configuration data"""
type Afterpay {
    """The maximum order amount that Afterpay accepts."""
    maxAmount: Float

    """The minimum order amount that Afterpay accepts."""
    minAmount: Float
}

"""Afterpay settings."""
type AfterpaySettings {
    afterpayEnabled: Boolean!
    category: CategoryTypeEnum!

    """ Denominated in cents."""
    customMerchantBaseFeeCents: Int

    """ In string with currency symbol."""
    customMerchantBaseFeeFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String
    customMerchantFee: Float
    description: String!
    logoUrl: String!
    merchantId: String
    merchantKey: String
    overrideCustomMerchantFee: Boolean!
    providerHandle: String!
    providerName: String!
    regionCode: String
    status: StatusTypeEnum!
}

"""Autogenerated input type of AfterpaySettingsCreateOrUpdateMutation"""
input AfterpaySettingsCreateOrUpdateMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Merchant base fee."""
    customMerchantBaseFee: String

    """Percentage of the order total to be charged for the merchant fee."""
    customMerchantFee: String

    """Afterpay merchant ID."""
    merchantId: String!

    """Afterpay merchant key."""
    merchantKey: String!

    """Override the custom merchant fee."""
    overrideCustomMerchantFee: Boolean

    """Region code. AU, US and NZ are currently supported"""
    regionCode: String!
}

"""Autogenerated return type of AfterpaySettingsCreateOrUpdateMutation."""
type AfterpaySettingsCreateOrUpdateMutationPayload {
    afterpaySettings: AfterpaySettings

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

"""Autogenerated input type of AfterpaySettingsDeleteMutation"""
input AfterpaySettingsDeleteMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Afterpay merchant ID."""
    merchantId: String!
}

"""Autogenerated return type of AfterpaySettingsDeleteMutation."""
type AfterpaySettingsDeleteMutationPayload {
    afterpaySettings: AfterpaySettings

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

"""Advert that can have any status, including deleted or unpublished."""
union AllAdvert = Advert | DeletedAdvert | UnpublishedAdvert

"""The connection type for AllAdvert."""
type AllAdvertsConnection {
    """A list of edges."""
    edges: [AllAdvertsEdge]

    """A list of nodes."""
    nodes: [AllAdvert]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type AllAdvertsEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: AllAdvert
}

"""Variant IDs on deleted and unpublished adverts"""
type AllAdvertVariant implements Node {
    id: ID!
    legacyId: Int!
}

"""The connection type for AllAdvertVariant."""
type AllAdvertVariantConnection {
    """A list of edges."""
    edges: [AllAdvertVariantEdge]

    """A list of nodes."""
    nodes: [AllAdvertVariant]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type AllAdvertVariantEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: AllAdvertVariant
}

"""Seller that could be soft deleted"""
union AllSeller = DeletedSeller | Seller

"""The type for the account"""
enum AllSellersAccountTypeEnum {
    RETAILER
    PRIVATE
    PROSPECTIVE
}

"""The connection type for AllSeller."""
type AllSellersConnection {
    """A list of edges."""
    edges: [AllSellersEdge]

    """A list of nodes."""
    nodes: [AllSeller]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type AllSellersEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: AllSeller
}

"""Attributes for sorting sellers"""
input AllSellersSort {
    """Fields to sort sellers"""
    field: AllSellersSortFieldEnum = UPDATED_AT

    """Ordering to sort the results"""
    ordering: SortOrderingEnum = ASCENDING
}

"""The field that is used to sort sellers"""
enum AllSellersSortFieldEnum {
    UPDATED_AT
    BUSINESS_NAME
    SLA_RATING
}

"""Logged in principal from API Key"""
type APIKeyPrincipal {
    emailAddress: String
    name: String

    """The associated seller. Only if this user is a seller"""
    seller: Seller
    user: User
    username: String
}

"""
Where the option type is applied, which can only be on either variant or advert level
"""
enum AppliedToEnum {
    """An option type that is applied to an advert level"""
    ADVERT

    """An option type that is applied to a variant level"""
    VARIANT
}

"""file attachment"""
type Attachment implements Node {
    filename: String
    id: ID!

    """The file size of the image in bytes."""
    size: Int

    """The src URL for the image."""
    url: String!
}

"""Autogenerated input type of AttemptBillingInvoicePaymentMutation"""
input AttemptBillingInvoicePaymentMutationInput {
    """ID for retrieving the correct billing invoice"""
    billingId: ID!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
}

"""Autogenerated return type of AttemptBillingInvoicePaymentMutation."""
type AttemptBillingInvoicePaymentMutationPayload {
    billing: Billing

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

"""
Availability type which can be used to build an
availability filter for advert search
"""
type AvailabilityFilterOption implements Node {
    """The number of adverts associated with the availability filter option"""
    count: Int!
    id: ID!
    name: String!
}

"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

"""Billing record."""
type Billing implements Node {
    """The billing amount. Denominated in cents."""
    amountCents: Int!

    """The billing amount excluding tax."""
    amountExTax: Decimal!

    """The billing amount excluding tax. Denominated in cents."""
    amountExTaxCents: Int!

    """The billing amount excluding tax. In string with currency symbol."""
    amountExTaxFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """The billing amount. In string with currency symbol."""
    amountFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!
    billingLineItems: [BillingLineItem!]!

    """The date the billing was created."""
    createdAt: ISO8601DateTime!
    id: ID!

    """The id used to identify the billing."""
    legacyId: Int!

    """The date the billing was paid."""
    paidDate: ISO8601DateTime
    paymentEvents(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): PaymentEventConnection!

    """
    Link to retrieve the billing invoice in PDF format (EXPENSIVE TO GENERATE)
    """
    pdfData: String @deprecated(reason: "Use pdfData instead")

    """Link to retrieve the billing invoice in PDF format"""
    pdfLink: String
    seller: Seller!
    status: BillingStatusEnum!

    """The tax on the billing."""
    taxTotal: Decimal!

    """The tax on the billing. Denominated in cents."""
    taxTotalCents: Int!

    """The tax on the billing. In string with currency symbol."""
    taxTotalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """The date the billing was updated."""
    updatedAt: ISO8601DateTime!

    """This field identifies billing records that are user cancellable."""
    userCancellable: Boolean!
}

"""Attributes for filtering billings"""
input BillingFilters {
    """Billings created since this time"""
    createdSince: ISO8601DateTime = null

    """Billings created until this time"""
    createdUntil: ISO8601DateTime = null

    """Billings paid since this time"""
    paidSince: ISO8601DateTime = null

    """Billings paid until this time"""
    paidUntil: ISO8601DateTime = null

    """Billings with one of these statuses"""
    statuses: [BillingStatusEnum!] = null
}

"""Autogenerated input type of BillingHistoryDownloadMutation"""
input BillingHistoryDownloadMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    filters: BillingFilters = null
    format: SpreadsheetEnum = CSV
    retailerIds: [ID!] = []
}

"""Autogenerated return type of BillingHistoryDownloadMutation."""
type BillingHistoryDownloadMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    export: ImportExport
    status: Int!
}

"""Billing line items associated with a billing."""
type BillingLineItem implements Node {
    """Amount Denominated in cents."""
    amountCents: Int

    """Amount In string with currency symbol."""
    amountFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """Type of the billing line item."""
    billingLineItemType: BillingLineItemTypeEnum!
    description: String
    id: ID!
    legacyId: Int!
}

"""All possible types for billing line items."""
enum BillingLineItemTypeEnum {
    ADVERT_RENEWAL
    ADVERT_PLACEMENT
    UPGRADE_TO_FEATURED
    SUBSCRIPTION_RENEWAL
    SUBSCRIPTION_FEATURE
    VALUE_OF_ENQUIRY
    ECOMMERCE_SETUP
    MANUAL_CORRECTION
    VOIDABLE_NOMINAL_CREDIT_CARD_VALIDATION_AMOUNT
}

"""The connection type for Billing."""
type BillingsConnection {
    """A list of edges."""
    edges: [BillingsEdge]

    """A list of nodes."""
    nodes: [Billing]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type BillingsEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: Billing
}

"""Attributes for sorting billings"""
input BillingSort {
    """Fields to sort billings"""
    fields: [BillingSortFieldEnum!]! = [CREATED_AT]

    """Ordering to sort the results"""
    ordering: SortOrderingEnum = ASCENDING
}

"""The field that is used to sort billings"""
enum BillingSortFieldEnum {
    CREATED_AT
    PAID_DATE
    STATUS
    TAX_TOTAL
    LEGACY_ID
}

"""The current status of an billing."""
enum BillingStatusEnum {
    PAID
    UNPAID
    CANCELLED
    VOIDED
}

"""
Properties from the braintree payment service, returns null when Braintree is disabled
"""
type Braintree {
    """

    Braintree client token includes configuration and authorization information required
    by the Braintree client SDK. If Braintree is not enabled this will return null

    """
    clientToken: String

    """Braintree client token errors"""
    clientTokenError: String
}

"""Braintree settings for billing"""
type BraintreeBillingSettings {
    billingMerchantAccount: String
    braintree3dSecureEnabled: Boolean!
    braintreeBillingDropInEnabled: Boolean!
    canEnableBraintree3dSecure: Boolean!
    category: CategoryTypeEnum!
    description: String!
    logoUrl: String!
    merchantId: String
    paymentMethod: PaymentMethod
    paypalAccount: String
    privateKey: String
    providerHandle: String!
    providerName: String!
    publicKey: String
    status: StatusTypeEnum!
    useSandboxEnvironment: Boolean!
}

"""Braintree settings for ecommerce"""
type BraintreeEcommerceSettings {
    applePayEnabled: Boolean!
    braintree3dSecureEnabled: Boolean!
    braintreeEcommerceDropInEnabled: Boolean!
    braintreeFraudProtectionEnabled: Boolean!
    canEnableBraintree3dSecure: Boolean!
    canEnableBraintreeFraudProtection: Boolean!
    category: CategoryTypeEnum!
    customMerchantBaseFee: String
    customMerchantFee: String
    description: String!
    ecommerceMerchantAccount: String
    googleMerchantId: String
    googlePayEnabled: Boolean!
    kountSiteId: String
    logoUrl: String!
    merchantId: String
    overrideCustomMerchantFee: Boolean!
    paymentMethod: PaymentMethod
    paypalAccount: String
    privateKey: String
    providerHandle: String!
    providerName: String!
    publicKey: String
    sendShippingDetailsToBraintree: Boolean!
    sendSiteNameToKount: Boolean!
    status: StatusTypeEnum!
    useSandboxEnvironment: Boolean!
}

"""Autogenerated input type of BraintreeSettingsCreateOrUpdateMutation"""
input BraintreeSettingsCreateOrUpdateMutationInput {
    """
    Enable Apple Pay. Apple Pay must also be properly configured in the Braintree dashboard.
    """
    applePayEnabled: Boolean

    """Braintree billing merchant account."""
    billingMerchantAccount: String

    """Enable 3D secure for Braintree transactions."""
    braintree3dSecureEnabled: Boolean

    """
    Enable Braintree fraud protection with Kount. Kount must also be properly configured in the Braintree dashboard.
    """
    braintreeFraudProtectionEnabled: Boolean

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Merchant base fee."""
    customMerchantBaseFee: String

    """Percentage of the order total to be charged for the merchant fee."""
    customMerchantFee: String

    """Braintree ecommerce merchant account."""
    ecommerceMerchantAccount: String

    """Google merchant ID used for Google Pay."""
    googleMerchantId: String

    """
    Enable Google Pay. Google Pay must also be properly configured in the Braintree dashboard.
    """
    googlePayEnabled: Boolean

    """Kount site ID."""
    kountSiteId: String

    """Braintree merchant ID."""
    merchantId: String!

    """
    Whether to override the platform-wide merchant fee with a custom merchant fee.
    """
    overrideCustomMerchantFee: Boolean

    """PayPal email linked with Braintree."""
    paypalAccount: String

    """Braintree private API key."""
    privateKey: String!

    """Braintree public API key."""
    publicKey: String!

    """Send shipping details to Braintree."""
    sendShippingDetailsToBraintree: Boolean

    """Send site name to Kount."""
    sendSiteNameToKount: Boolean

    """Enable using Braintree sandbox credentials in production."""
    useSandboxEnvironment: Boolean
}

"""Autogenerated return type of BraintreeSettingsCreateOrUpdateMutation."""
type BraintreeSettingsCreateOrUpdateMutationPayload {
    braintreeBillingSettings: BraintreeBillingSettings
    braintreeEcommerceSettings: BraintreeEcommerceSettings

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

"""Autogenerated input type of BraintreeSettingsDeleteMutation"""
input BraintreeSettingsDeleteMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Braintree merchant ID."""
    merchantId: String!
}

"""Autogenerated return type of BraintreeSettingsDeleteMutation."""
type BraintreeSettingsDeleteMutationPayload {
    braintreeBillingSettings: BraintreeBillingSettings
    braintreeEcommerceSettings: BraintreeEcommerceSettings

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

"""Product brand"""
type Brand implements Node {
    """Whether the given brand is the default for adverts."""
    default: Boolean!

    """Whether buying the associated item via the website is forbidden."""
    denyBuyOnlineFor: Boolean!

    """
    If the associated item has this taxon, then buying the item
    via the website is forbidden.
    """
    denyBuyOnlineForTaxon: Taxon

    """Whether buying the associated item for in-store pickup is forbidden."""
    denyClickAndCollectFor: Boolean!

    """
    If the associated item has this taxon, then buying the item
    for in-store pickup is forbidden.
    """
    denyClickAndCollectForTaxonId: ID
    externalIds: [ExternalID!]!
    id: ID!
    logo: Image
    name: String!

    """Whether to show the brand name in the associated advert's title."""
    showInAdvertTitle: Boolean!
    sizeMatrices: [SizeMatrix!]!

    """
    The URL subpath associated with the given brand.
    Mostly used for building URLs for advert search results.
    """
    slug: String!
}

"""
Minimal subset of Brand type which can be used to build a
brand filter for advert search
"""
type BrandFilterOption {
    """The number of adverts associated with each brand filter option"""
    count: Int!
    id: ID!
    name: String!

    """
    The URL subpath associated with the given brand.
    Mostly used for building URLs for advert search results.
    """
    slug: String!
}

"""A Brand or Taxon, returned by TextQuerySuggestionType"""
union BrandOrTaxon = Brand | Taxon

"""The connection type for Brand."""
type BrandsConnection {
    """A list of edges."""
    edges: [BrandsEdge]

    """A list of nodes."""
    nodes: [Brand]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type BrandsEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: Brand
}

"""Autogenerated input type of CancelBillingInvoiceMutation"""
input CancelBillingInvoiceMutationInput {
    """ID of the billing record to be cancelled"""
    billingId: ID!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
}

"""Autogenerated return type of CancelBillingInvoiceMutation."""
type CancelBillingInvoiceMutationPayload {
    billing: Billing

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

"""A cart object just waiting to transform into an order."""
type Cart implements Node {
    """The shipping address associated to the cart. Required for checkout."""
    address: Address

    """The billing address associated to the cart. Required for checkout."""
    billingAddress: Address

    """The company name of the bill recipient."""
    billingCompanyName: String

    """The email address of the bill recipient. Required for checkout."""
    billingEmailAddress: String

    """The first name of the bill recipient. Required for checkout."""
    billingFirstName: String

    """
    The phone number of the bill recipient. Depending on marketplace configuration, can be required for checkout
    """
    billingPhone: String

    """The surname of the bill recipient. Required for checkout."""
    billingSurname: String

    """The total buyable quantity of all items in the cart."""
    buyableQuantity: Int!
    cartItems(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): CartItemConnection!
    cartSellers(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): CartSellersConnection!

    """The company name of the user who owns the cart."""
    companyName: String

    """
    A coupon code that has been applied to the cart. Will return an error if the coupon is invalid
    """
    couponCode: String

    """Timestamp at which the cart was created."""
    createdAt: ISO8601DateTime!

    """
    The discount applied to the cart. Negative value. Denominated in cents.
    """
    discountCents: Int!

    """
    The discount applied to the cart. Negative value. In string with currency symbol.
    """
    discountFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """
    The email address of the user who owns the cart. Required for checkout.
    """
    emailAddress: String

    """The first name of the user who owns the cart. Required for checkout."""
    firstName: String
    id: ID!

    """Is this order a gift order? Defaults to false."""
    isGift: Boolean

    """A message that will be sent to the gift recipient."""
    messageToGiftRecipient: String

    """A message that will be sent to the seller."""
    messageToSeller: String

    """
    The phone number of the user who owns the cart. Depending on marketplace configuration, can be required for checkout
    """
    phone: String

    """The cart postage cost. Denominated in cents."""
    shippingCostCents: Int!

    """The cart postage cost. In string with currency symbol."""
    shippingCostFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """
    The cart subtotal, excluding discounts and postage. Tax is included for tax inclusive marketplaces. Denominated in cents.
    """
    subtotalCents: Int!

    """
    The cart subtotal, excluding discounts and postage. Tax is included for tax
    inclusive marketplaces. In string with currency symbol.
    """
    subtotalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """The surname of the user who owns the cart. Required for checkout."""
    surname: String

    """
    The status of the tax calculation on a cart. Returns an enumerable value.
    """
    taxCalculationStatus: CartTaxCalculationStatusEnum

    """The tax on the cart. Denominated in cents."""
    taxTotalCents: Int!

    """The tax on the cart. In string with currency symbol."""
    taxTotalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """Required for retrieving or modifying cart data."""
    token: String!

    """The cart total. Denominated in cents."""
    totalCents: Int!

    """The cart total. In string with currency symbol."""
    totalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """Timestamp at which the cart was most recently changed."""
    updatedAt: ISO8601DateTime!

    """The user associated to the cart."""
    user: User
}

"""Autogenerated input type of CartAddCartItemMutation"""
input CartAddCartItemMutationInput {
    """ID for retrieving the correct cart."""
    cartId: ID!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """The way in which the buyer will receive the good or service."""
    deliveryMethod: DeliveryMethodEnum = null

    """Custom form data to add to the cart"""
    formData: JSON

    """Update the quantity of the item held in the cart to this number."""
    quantity: Int!

    """
    Barcodes of variants to add to the cart. The given barcodes must be unique. If
    a barcode is associated with multiple variants, it will raise an error.
    """
    variantBarcode: String = ""

    """IDs of the variants to add to the cart."""
    variantId: ID = ""
}

"""Autogenerated return type of CartAddCartItemMutation."""
type CartAddCartItemMutationPayload {
    cart: Cart

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

"""Autogenerated input type of CartAddItemMutation"""
input CartAddItemMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """The way in which the buyer will receive the good or service."""
    deliveryMethod: DeliveryMethodEnum = null

    """Custom form data to add to the cart"""
    formData: JSON

    """Update the quantity of the item held in the cart to this number."""
    quantity: Int!

    """
    Barcodes of variants to add to the cart. The given barcodes must be unique. If
    a barcode is associated with multiple variants, it will raise an error.
    """
    variantBarcode: String = ""

    """IDs of the variants to add to the cart."""
    variantId: ID = ""
}

"""Autogenerated return type of CartAddItemMutation."""
type CartAddItemMutationPayload {
    cart: Cart

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

"""Autogenerated input type of CartCheckoutMutation"""
input CartCheckoutMutationInput {
    """ID for retrieving the correct cart to convert into a completed order."""
    cartId: ID!

    """
    Additional attributes to pass through to checkout to use certain features.
    """
    checkoutAttributes: CheckoutInput

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Attributes required by a payment provider to process a payment."""
    paymentProviderAttributes: PaymentProviderInput!
}

"""Autogenerated return type of CartCheckoutMutation."""
type CartCheckoutMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    order: Order
    redirectUrl: String
    status: Int!
}

"""Autogenerated input type of CartCreateMutation"""
input CartCreateMutationInput {
    """Attributes to assign to the cart created."""
    attributes: CartInput

    """Params for fetching the given number of items to add to the cart."""
    cartItemsToAdd: [AddCartItemInput!]

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
}

"""Autogenerated return type of CartCreateMutation."""
type CartCreateMutationPayload {
    cart: Cart

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

"""Autogenerated input type of CartDeleteMutation"""
input CartDeleteMutationInput {
    """ID for retrieving the correct cart."""
    cartId: ID!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
}

"""Autogenerated return type of CartDeleteMutation."""
type CartDeleteMutationPayload {
    cart: Cart

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

"""Attributes for creating or updating a cart."""
input CartInput {
    """Shipping address for the items in the cart. Required for checkout."""
    address: AddressInput

    """Billing address for the cart. Required for checkout."""
    billingAddress: AddressInput

    """The company name of the bill recipient."""
    billingCompanyName: String

    """The email address of the bill recipient. Required for checkout."""
    billingEmailAddress: String

    """The first name of the bill recipient. Required for checkout."""
    billingFirstName: String

    """The phone number of the bill recipient. Required for checkout."""
    billingPhone: String

    """The surname of the bill recipient. Required for checkout."""
    billingSurname: String

    """The company name of the user who owns the cart."""
    companyName: String

    """
    A coupon code that has been applied to the cart. Will return an error if the coupon is invalid
    """
    couponCode: String

    """
    The email address of the user who owns the cart. Required for checkout.
    """
    emailAddress: String

    """The first name of the user who owns the cart. Required for checkout."""
    firstName: String

    """Is this order a gift order? Defaults to false."""
    isGift: Boolean

    """A message that will be sent to the gift recipient."""
    messageToGiftRecipient: String

    """A message that will be sent to the seller."""
    messageToSeller: String

    """The phone number of the user who owns the cart. Required for checkout."""
    phone: String

    """The surname of the user who owns the cart. Required for checkout."""
    surname: String
}

"""A good or service that a user has added to their cart."""
type CartItem implements Node {
    advert: Advert!
    deliveryMethod: DeliveryMethodEnum!

    """Total amount of monetary discounts. Denominated in cents."""
    discountCents: Int!

    """Total amount of monetary discounts. In string with currency symbol."""
    discountFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """Whether the item has free shipping."""
    hasFreeShippingDiscount: Boolean!
    id: ID!
    internationalShippingAvailable: Boolean!

    """
    For deliverable items, whether the buyer's country matches the seller's country
    """
    internationalShippingRequired: Boolean!
    purchasable: Purchasable!
    quantity: Int!
    seller: Seller!

    """Shipping cost of an item. Denominated in cents."""
    shippingCostCents: Int!

    """Shipping cost of an item. In string with currency symbol."""
    shippingCostFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """
    Cost of the cart item (price x quantity), plus any additional fees applied by the seller. Denominated in cents.
    """
    subtotalCents: Int!

    """
    Cost of the cart item (price x quantity), plus any additional fees applied by the seller. In string with currency symbol.
    """
    subtotalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """
    Total cost of the item, which includes subtotals and cost of shipping if applicable. Denominated in cents.
    """
    totalCents: Int!

    """
    Total cost of the item, which includes subtotals and cost of shipping if applicable. In string with currency symbol.
    """
    totalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!
}

"""The connection type for CartItem."""
type CartItemConnection {
    """A list of edges."""
    edges: [CartItemEdge]

    """A list of nodes."""
    nodes: [CartItem]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""
A grouping of cart items that all have the same delivery method. Most of the
fields are aggregations of individual cart item fields.
"""
type CartItemDeliveryMethodGroup {
    cartItems(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): CartItemConnection!
    deliveryMethod: DeliveryMethodEnum!

    """Total amount of monetary discounts. Denominated in cents."""
    discountCents: Int!

    """Total amount of monetary discounts. In string with currency symbol."""
    discountFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!
    internationalShippingAvailable: Boolean!

    """
    For deliverable items, whether the buyer's country matches the seller's country for all associated cart items.
    """
    internationalShippingRequired: Boolean!

    """Sum of the shipping costs of the cart items. Denominated in cents."""
    shippingCostCents: Int!

    """
    Sum of the shipping costs of the cart items. In string with currency symbol.
    """
    shippingCostFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """
    General description of the delivery method and estimated time in transit for the shipment.
    """
    shippingDescription: String!

    """
    List of descriptions of potential or applied shipping discounts for this group
    of cart items. Includes any relevant promotions and information about free
    shipping when available.
    """
    shippingDiscountDescriptions(
        """
        Currency in which to display any monetary discounts. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): [String!]!

    """
    For cart item groups that have a shipping discount or free shipping, this text
    can replace the shipping cost in the list of line items.
    """
    shippingDiscountLineItem: String

    """
    Message for user, informing them of the location from where their purchase will be shipped if applicable
    """
    shippingFromLocationMessage(
        """
        Whether to include the name of the city that the item is shipping from in the message.
        """
        useCity: Boolean = true
    ): String

    """
    Sum of the tax amount for the shipping cost. Whether this amount is included
    in the base shipping cost depends on the website's home country (i.e.
    Australia's GST is included in an item's price, but sales tax in the U.S. is
    added on separately). Denominated in cents.
    """
    shippingTaxCents: Int!

    """
    Sum of the tax amount for the shipping cost. Whether this amount is included
    in the base shipping cost depends on the website's home country (i.e.
    Australia's GST is included in an item's price, but sales tax in the U.S. is
    added on separately). In string with currency symbol.
    """
    shippingTaxFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """
    Sum of the cost of the cart items (price x quantity), plus any additional fees
    applied by the seller. Denominated in cents.
    """
    subtotalCents: Int!

    """
    List of descriptions of promotional discounts applied to the subtotal of this group of cart items
    """
    subtotalDiscountDescriptions(
        """
        Currency in which to display any monetary discounts. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): [String!]!

    """
    Sum of the cost of the cart items (price x quantity), plus any additional fees
    applied by the seller. In string with currency symbol.
    """
    subtotalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """Sum of the tax of the cart items. Denominated in cents."""
    taxTotalCents: Int!

    """Sum of the tax of the cart items. In string with currency symbol."""
    taxTotalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """
    Sum of the total cost of the cart items, which includes subtotals and cost of
    shipping if applicable. Denominated in cents.
    """
    totalCents: Int!

    """
    Sum of the total cost of the cart items, which includes subtotals and cost of
    shipping if applicable. In string with currency symbol.
    """
    totalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!
}

"""An edge in a connection."""
type CartItemEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: CartItem
}

"""Autogenerated input type of CartRemoveCartItemMutation"""
input CartRemoveCartItemMutationInput {
    """
    Deprecated: As of Sept. 2019, this is no longer used to look up associated cart items and will be removed.
    """
    cartId: ID = null

    """
    ID of the cart item to be modified. See cartItem type for more details.
    """
    cartItemId: ID!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
}

"""Autogenerated return type of CartRemoveCartItemMutation."""
type CartRemoveCartItemMutationPayload {
    cart: Cart

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

"""An edge in a connection."""
type CartSellerEdge {
    cartItemsByDeliveryMethod: [CartItemDeliveryMethodGroup!]!

    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: Seller
}

"""The connection type for Seller."""
type CartSellersConnection {
    """A list of edges."""
    edges: [CartSellerEdge]

    """A list of nodes."""
    nodes: [Seller]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""The status of the tax calculation on a cart."""
enum CartTaxCalculationStatusEnum {
    SUCCESS
    MISSING_BUYER_ADDRESS
    AVATAX_ERROR
}

"""Autogenerated input type of CartUpdateCartItemMutation"""
input CartUpdateCartItemMutationInput {
    """ID for retrieving the correct cart."""
    cartId: ID!

    """
    ID of the cart item to be modified. See cartItem type for more details.
    """
    cartItemId: ID!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """The way in which the buyer will receive the good or service."""
    deliveryMethod: DeliveryMethodEnum = null

    """The quantity of the item to be put in the cart."""
    quantity: Int = null
}

"""Autogenerated return type of CartUpdateCartItemMutation."""
type CartUpdateCartItemMutationPayload {
    cart: Cart

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

"""Autogenerated input type of CartUpdateMutation"""
input CartUpdateMutationInput {
    """Attributes to assign to the cart updated."""
    attributes: CartInput

    """ID for retrieving the correct cart."""
    cartId: ID!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
}

"""Autogenerated return type of CartUpdateMutation."""
type CartUpdateMutationPayload {
    cart: Cart

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

"""Catalog rule"""
type CatalogRule implements Node {
    """When the record was created"""
    createdAt: ISO8601DateTime!

    """
    The error message returned when a product fails catalog rule validation
    """
    errorMessage: String!
    id: ID!

    """The product attribute the catalog rule is validated against"""
    key: CatalogRulesKeyEnum!

    """The catalog rule legacy ID"""
    legacyId: Int!

    """The operator used to validate the product attribute with"""
    operator: CatalogRulesOperatorEnum!

    """The value the operator is compared against"""
    value: String
}

"""Autogenerated input type of CatalogRuleCreateMutation"""
input CatalogRuleCreateMutationInput {
    attributes: CatalogRuleInput!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
}

"""Autogenerated return type of CatalogRuleCreateMutation."""
type CatalogRuleCreateMutationPayload {
    catalogRule: CatalogRule

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

"""Autogenerated input type of CatalogRuleDeleteMutation"""
input CatalogRuleDeleteMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID of the catalog rule"""
    id: ID!
}

"""Autogenerated return type of CatalogRuleDeleteMutation."""
type CatalogRuleDeleteMutationPayload {
    catalogRule: CatalogRule

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

input CatalogRuleInput {
    """
    The error message returned when a product fails catalog rule validation
    """
    errorMessage: String!

    """The product attribute to validate against"""
    key: CatalogRulesKeyEnum!

    """The operator used to validate the product attribute with"""
    operator: CatalogRulesOperatorEnum!

    """
    The value the operator is compared against. Do not supply for the `is present` operator.
    """
    value: String
}

"""The connection type for CatalogRule."""
type CatalogRulesConnection {
    """A list of edges."""
    edges: [CatalogRulesEdge]

    """A list of nodes."""
    nodes: [CatalogRule]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type CatalogRulesEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: CatalogRule
}

"""Catalog rules error"""
type CatalogRulesError {
    """
    The error message returned when a product fails catalog rule validation
    """
    errorMessage: String!

    """The field the error is attributed to"""
    fieldName: String!

    """The object id the error is attributed to"""
    objectId: ID!
}

"""Key for Catalog Rules."""
enum CatalogRulesKeyEnum {
    """
    The description of the parent product. Combine this with an operator like
    GREATER_THAN to define a rule that the description should be >15 characters long.
    """
    PRODUCT_DESCRIPTION

    """The image that represents the main product."""
    PRODUCT_IMAGE

    """Height of image in pixels."""
    PRODUCT_IMAGE_HEIGHT

    """Width of image in pixels."""
    PRODUCT_IMAGE_WIDTH

    """Title of the parent product."""
    PRODUCT_TITLE

    """Barcode of the sellable variant."""
    VARIANT_BARCODE

    """Image of the sellable variant."""
    VARIANT_IMAGE

    """Height of variant image in pixels."""
    VARIANT_IMAGE_HEIGHT

    """Width of variant image in pixels."""
    VARIANT_IMAGE_WIDTH

    """SKU code of the sellable variant."""
    VARIANT_SKU

    """Shipping profile for the variant."""
    VARIANT_SHIPPING_PROFILE_ID

    """Tax code for the variant."""
    VARIANT_TAX_CODE

    """Errors metadata for the variant."""
    VARIANT_ERRORS_METADATA
}

"""Operators for Catalog Rules."""
enum CatalogRulesOperatorEnum {
    """Greater than e.g. >10 is 10.01 onwards"""
    GREATER_THAN

    """Less than e.g. <10 is any number up to 9.99"""
    LESS_THAN

    """Greater than or equal to a number"""
    GREATER_THAN_OR_EQUAL_TO

    """Less than or equal to a number"""
    LESS_THAN_OR_EQUAL_TO

    """Equal to a number"""
    EQUAL_TO

    """Not equal to a number"""
    NOT_EQUAL_TO

    """Present. When using this operator, do not provide a value"""
    PRESENT

    """Blank. When using this operator, do not provide a value"""
    BLANK
}

"""The field that is used to sort catalog rules"""
enum CatalogRuleSortFieldEnum {
    """The date the catalog rule was created"""
    CREATED_AT

    """The key of the catalog rule"""
    KEY
}

"""Attributes for sorting catalog rules"""
input CatalogRulesSort {
    """Fields to sort catalog rules"""
    fields: [CatalogRuleSortFieldEnum!]! = [CREATED_AT]

    """Ordering to sort the results"""
    ordering: SortOrderingEnum = ASCENDING
}

input CatalogRuleUpdateInput {
    """
    The error message returned when a product fails catalog rule validation
    """
    errorMessage: String

    """The operator used to validate the product attribute with"""
    operator: CatalogRulesOperatorEnum

    """
    The value the operator is compared against. Do not supply for the `is present` operator.
    """
    value: String = null
}

"""Autogenerated input type of CatalogRuleUpdateMutation"""
input CatalogRuleUpdateMutationInput {
    attributes: CatalogRuleUpdateInput!

    """ID of the catalog rule to be updated"""
    catalogRuleId: ID!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
}

"""Autogenerated return type of CatalogRuleUpdateMutation."""
type CatalogRuleUpdateMutationPayload {
    catalogRule: CatalogRule

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

"""An entry in the Navigation Category Menu"""
union CategoryMenuEntry = DirectLink | Markdown

"""
Category label for the partner integration. Represents different types of partner integrations.
"""
enum CategoryTypeEnum {
    RATINGS_AND_REVIEWS
    ECOMMERCE_PAYMENTS
    BILLING_PAYMENTS
    EMAIL_MARKETING
}

"""Log for record changes."""
type ChangeLog implements Node {
    changes: JSON
    createdAt: ISO8601DateTime!
    event: String!
    id: ID!
    item: Node
    itemId: String

    """
    NOTE: This should only be used as a description, these names could change at
    any time, and so should NOT be used as a code switch.
    """
    itemType: String
    whodunnit: AdminOrUser
}

"""The connection type for ChangeLog."""
type ChangeLogsConnection {
    """A list of edges."""
    edges: [ChangeLogsEdge]

    """A list of nodes."""
    nodes: [ChangeLog]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type ChangeLogsEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: ChangeLog
}

"""Chat message between operator and seller"""
type ChatMessage implements Node {
    createdAt: ISO8601DateTime!
    id: ID!

    """text of message"""
    message: String!

    """Seen by recipient at."""
    readAt: ISO8601DateTime
    seller: Seller!

    """who sent the message"""
    sentByType: String!
}

"""Autogenerated input type of ChatMessageCreateMutation"""
input ChatMessageCreateMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    message: String!

    """
    ID of the seller. May be omitted if using a seller api key, but is required otherwise
    """
    sellerId: ID
}

"""Autogenerated return type of ChatMessageCreateMutation."""
type ChatMessageCreateMutationPayload {
    chatMessage: ChatMessage

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

"""An edge in a connection."""
type ChatMessageEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: ChatMessage
}

"""Autogenerated input type of ChatMessageReadMutation"""
input ChatMessageReadMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    seller: ID

    """The type of user that is reading the message. Either 'Admin' or 'User'"""
    sentBy: String!
}

"""Autogenerated return type of ChatMessageReadMutation."""
type ChatMessageReadMutationPayload {
    """Details of the last chat message"""
    chatMessage: ChatMessage

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

"""The connection type for ChatMessage."""
type ChatMessagesConnection {
    """A list of edges."""
    edges: [ChatMessageEdge]

    """Last read message"""
    lastReadMessage(for: String!): ChatMessage

    """A list of nodes."""
    nodes: [ChatMessage]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!

    """Unread count"""
    totalUnreadCount(for: String!): Int!
}

"""
Additional attributes to pass through to checkout to use certain features.
"""
input CheckoutInput {
    """
    If true user profile will be updated with the checkout details. If false a
    user will only be updated when they have an incomplete profile.
    """
    updateUserProfile: Boolean
}

"""Autogenerated input type of ClickAndCollectStatusUpdateMutation"""
input ClickAndCollectStatusUpdateMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID of the invoice to be updated"""
    invoiceId: ID!

    """Current status that the invoice should be set to."""
    status: InvoiceClickAndCollectStatusEnum!
}

"""Autogenerated return type of ClickAndCollectStatusUpdateMutation."""
type ClickAndCollectStatusUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    invoice: Invoice
    status: Int!
}

"""
Commission package holding commission rates for all taxons (or categories)
"""
type CommissionPackage implements Node {
    """Apply commission to line item postage"""
    appliesToPostage: Boolean!

    """When the record was created"""
    createdAt: ISO8601DateTime!

    """
    Custom commission rate belonging to a taxon (or category) within a commission package
    """
    customCommissionRates(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): CustomCommissionRateConnection

    """
    The default flag identifies the default commission package in the marketplace
    """
    default: Boolean!
    id: ID!

    """Name of the commission package - e.g. Bronze Package"""
    name: String!

    """The commission rate for the specified Taxon (or Category)"""
    rate: Decimal!

    """Sellers thats use the commission package"""
    sellers(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): SellerConnection!

    """When the record was last updated"""
    updatedAt: ISO8601DateTime!
}

"""The connection type for CommissionPackage."""
type CommissionPackageConnection {
    """A list of edges."""
    edges: [CommissionPackageEdge]

    """A list of nodes."""
    nodes: [CommissionPackage]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""Autogenerated input type of CommissionPackageCreateMutation"""
input CommissionPackageCreateMutationInput {
    """Attributes to assign to new commission package."""
    attributes: CommissionPackageInput!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
}

"""Autogenerated return type of CommissionPackageCreateMutation."""
type CommissionPackageCreateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    commissionPackage: CommissionPackage
    errors: [ValidationError!]
    status: Int!
}

"""Autogenerated input type of CommissionPackageDeleteMutation"""
input CommissionPackageDeleteMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID of the commission package to be deleted"""
    id: ID!

    """
    ID of the commission package where sellers belonging to the deleted package are moved to
    """
    moveToPackageId: ID = null
}

"""Autogenerated return type of CommissionPackageDeleteMutation."""
type CommissionPackageDeleteMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    commissionPackage: CommissionPackage
    errors: [ValidationError!]
    status: Int!
}

"""An edge in a connection."""
type CommissionPackageEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: CommissionPackage
}

input CommissionPackageInput {
    """
    Default commission postage setting for all Taxons in the commission package.
    """
    appliesToPostage: Boolean = false

    """
    Array of Custom commission rates for selected Taxons within the commission package.
    """
    customCommissionRates: [CustomCommissionRatesInput!]

    """Name of commission packages"""
    name: String!

    """
    Default rate for all Taxons in the commission package. If not supplied, the default rate of 5% will be applied
    """
    rate: Decimal! = "5.0"
}

type CommissionPackageSchedule implements Node {
    """Plan time in future to trigger all commission_package_schedule_items"""
    activationDate: ISO8601DateTime!

    """An array of commission package schedule items"""
    commissionPackageScheduleItems(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): CommissionPackageScheduleItemConnection

    """When the record was created"""
    createdAt: ISO8601DateTime!
    id: ID!
    legacyId: Int!

    """Name of the uploaded schedule file"""
    name: String!
    status: CommissionPackageScheduleStatusEnum!
}

"""The connection type for CommissionPackageSchedule."""
type CommissionPackageScheduleConnection {
    """A list of edges."""
    edges: [CommissionPackageScheduleEdge]

    """A list of nodes."""
    nodes: [CommissionPackageSchedule]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""Autogenerated input type of CommissionPackageScheduleDeleteMutation"""
input CommissionPackageScheduleDeleteMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID of the commission package schedule to be deleted"""
    id: ID!
}

"""Autogenerated return type of CommissionPackageScheduleDeleteMutation."""
type CommissionPackageScheduleDeleteMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    commissionPackageSchedule: CommissionPackageSchedule
    errors: [ValidationError!]
    status: Int!
}

"""An edge in a connection."""
type CommissionPackageScheduleEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: CommissionPackageSchedule
}

"""Attributes for filtering Commission Package Schedules"""
input CommissionPackageScheduleFilters {
    """Keywords to search for. (Currently File Name and ID)"""
    q: String = null

    """Commission Packages Scheduled for activation since this time"""
    scheduledSince: ISO8601DateTime = null

    """Commission Packages Scheduled for activation until this time"""
    scheduledUntil: ISO8601DateTime = null

    """Commission Packages Scheduled with the said status"""
    status: [CommissionPackageScheduleStatusEnum!] = null
}

"""Commission package schedule item within a commission package schedule"""
type CommissionPackageScheduleItem implements Node {
    """Commission package which will be assigned to the specified seller"""
    commissionPackage: CommissionPackage!
    id: ID!

    """Seller to which the commission package will be assigned"""
    seller: Seller!
}

"""The connection type for CommissionPackageScheduleItem."""
type CommissionPackageScheduleItemConnection {
    """A list of edges."""
    edges: [CommissionPackageScheduleItemEdge]

    """A list of nodes."""
    nodes: [CommissionPackageScheduleItem]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type CommissionPackageScheduleItemEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: CommissionPackageScheduleItem
}

"""Attributes for sorting commission package schedules"""
input CommissionPackageScheduleSort {
    """Fields to sort commission package schedules"""
    fields: [CommissionPackageScheduleSortFieldEnum!]! = [CREATED_AT]

    """Ordering to sort the results"""
    ordering: SortOrderingEnum = ASCENDING
}

"""The field that is used to sort commission package schedules"""
enum CommissionPackageScheduleSortFieldEnum {
    """The legacy id of the commission package schedule"""
    LEGACY_ID

    """The name of the commission package schedule"""
    NAME

    """The date commission package schedule was created"""
    CREATED_AT

    """The date the commission package will be activated"""
    ACTIVATION_DATE

    """The status of the commission package schedule"""
    STATUS
}

"""
Autogenerated input type of CommissionPackageScheduleSpreadsheetDownloadMutation
"""
input CommissionPackageScheduleSpreadsheetDownloadMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    commissionPackageScheduleId: ID!
    format: SpreadsheetEnum = CSV
    invalidOnly: Boolean = false
}

"""
Autogenerated return type of CommissionPackageScheduleSpreadsheetDownloadMutation.
"""
type CommissionPackageScheduleSpreadsheetDownloadMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    export: ImportExportCommissionPackageSchedule
    status: Int!
}

"""
Autogenerated input type of CommissionPackageScheduleSpreadsheetUploadMutation
"""
input CommissionPackageScheduleSpreadsheetUploadMutationInput {
    """Plan time in future to trigger all commission_package_schedule_items"""
    activationDate: ISO8601DateTime!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    spreadsheet: FileInput!
}

"""
Autogenerated return type of CommissionPackageScheduleSpreadsheetUploadMutation.
"""
type CommissionPackageScheduleSpreadsheetUploadMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    import: ImportExportCommissionPackageSchedule
    status: Int!
}

"""Processing status of commission package schedule"""
enum CommissionPackageScheduleStatusEnum {
    """Commission package schedule yet to be processed"""
    QUEUED

    """Commission package schedule processed with errors on all rows"""
    FAILED

    """Commission package schedule processed with no errors"""
    SUCCESS

    """ Commission package schedule processed with errors on some rows"""
    PARTIAL_SUCCESS
}

"""Attributes for sorting commission packages"""
input CommissionPackageSort {
    """Fields to sort commission packages"""
    fields: [CommissionPackageSortFieldEnum!]! = [NAME]

    """Ordering to sort the results"""
    ordering: SortOrderingEnum = ASCENDING
}

"""The field that is used to sort commission packages"""
enum CommissionPackageSortFieldEnum {
    """The name of the commission package"""
    NAME

    """The date commission package was created"""
    CREATED_AT

    """The date commission package was last updated"""
    UPDATED_AT

    """The default rate of commission package"""
    DEFAULT_RATE

    """The number of sellers using the commission package"""
    SELLERS_COUNT

    """
    The number of custom commission rate belonging to the commission package
    """
    CUSTOM_RATES_COUNT
}

input CommissionPackageUpdateInput {
    """
    Default commission postage setting for all Taxons in the commission package.
    """
    appliesToPostage: Boolean

    """
    Array of Custom commission rates for selected Taxons within the commission package.
    """
    customCommissionRates: [CustomCommissionRatesUpdateInput!]

    """Name of commission packages"""
    name: String

    """Default rate for all Taxons in the commission package."""
    rate: Decimal
}

"""Autogenerated input type of CommissionPackageUpdateMutation"""
input CommissionPackageUpdateMutationInput {
    """Attributes updates for the given commission package."""
    attributes: CommissionPackageUpdateInput!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID for retrieving the correct commission package."""
    commissionPackageId: ID!
}

"""Autogenerated return type of CommissionPackageUpdateMutation."""
type CommissionPackageUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    commissionPackage: CommissionPackage
    errors: [ValidationError!]
    status: Int!
}

"""Change log of commission packages"""
type CommissionPackageVersion implements Node {
    """
    Is the commission package version the current commission package for the seller?
    """
    active: Boolean!

    """The "applies to postage" value for the commission package version"""
    appliesToPostage: Boolean!

    """Created at date for the commission package version"""
    createdAt: ISO8601DateTime!

    """The list of custom rates for this commission package"""
    customRates(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): CustomCommissionRateConnection

    """The default rate for the commission package version"""
    defaultRate: Float!
    id: ID!

    """The id used to identify the commission package version"""
    legacyId: Int

    """Name of the commission package schedule"""
    name: String!
}

"""Change log of commission packages belonging a retailer"""
type CommissionPackageVersionLog implements Node {
    """Commission package version of the seller."""
    commissionPackageVersion: CommissionPackageVersion!
    id: ID!

    """Created at date for the commission package version log"""
    startedOn: ISO8601DateTime!
}

"""The connection type for CommissionPackageVersionLog."""
type CommissionPackageVersionLogConnection {
    """A list of edges."""
    edges: [CommissionPackageVersionLogEdge]

    """A list of nodes."""
    nodes: [CommissionPackageVersionLog]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type CommissionPackageVersionLogEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: CommissionPackageVersionLog
}

"""Measurement units for comparison"""
enum ComparableUnitEnum {
    """Millimetres"""
    MM

    """Centimetres"""
    CM

    """Metres"""
    M

    """Milligrams"""
    MG

    """Grams"""
    G

    """Kilograms"""
    KG

    """Millilitres"""
    ML

    """Centilitres"""
    CL

    """Litres"""
    L

    """Kilolitres"""
    KL

    """Square metres"""
    SQM

    """Pack"""
    PACK

    """Sheet"""
    SHEET

    """Each"""
    EACH

    """Miles"""
    MI

    """Yards"""
    YD

    """Feet"""
    FT

    """Inches"""
    IN

    """Pounds"""
    LB

    """Ounces"""
    OZ

    """Gallons"""
    GAL

    """Quarts"""
    QT

    """Pints"""
    PT

    """Cups"""
    C

    """Fluid ounces"""
    FL_OZ

    """Tablespoons"""
    TBSP

    """Teaspoons"""
    TSP
}

"""
Condition type which can be used to build a
Condition filter for advert search
"""
type ConditionFilterOption implements Node {
    """The number of adverts associated with the condition filter option"""
    count: Int!
    id: ID!
    name: String!
}

"""Contact details"""
type ContactDetails {
    """Phone number"""
    phone: String
}

type ContextualHistory implements Node {
    changes: JSON
    createdAt: ISO8601DateTime!
    event: String!
    id: ID!
    itemId: Int!
    itemType: String!
    origin: String
    whodunnit: String
    whodunnitType: String
}

"""The connection type for ContextualHistory."""
type ContextualHistoryConnection {
    """A list of edges."""
    edges: [ContextualHistoryEdge]

    """A list of nodes."""
    nodes: [ContextualHistory]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type ContextualHistoryEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: ContextualHistory
}

"""Country information."""
type Country implements Node {
    """
    Two-letter UPPERCASE country code, e.g. "DE"
    """
    code: String!
    id: ID!

    """
    Country name, e.g. "Germany"
    """
    name: String!

    """States of this country."""
    states(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): StatesConnection
}

"""
Input for associating a country with an address. One argument
is required for creation. If more than one argument is given, the first
valid argument will define the country (the order is "id" then "code").
"""
input CountryInput {
    """Two-letter abbreviation of the country name."""
    code: String

    """Database ID for the given country."""
    id: ID
}

"""The connection type for Country."""
type CountrysConnection {
    """A list of edges."""
    edges: [CountrysEdge]

    """A list of nodes."""
    nodes: [Country]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type CountrysEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: Country
}

"""Currency details"""
type Currency {
    """3-letter currency code as defined by the ISO 4217 standard"""
    code: String!

    """Translated currency name"""
    name: String!

    """Currency symbol"""
    symbol: String!
}

"""
Custom commission rate belonging to a taxon (or category) within a commission package
"""
type CustomCommissionRate implements Node {
    """
    The Commission Package that the custom commission rate belongs to - e.g. Bronze Package
    """
    commissionPackage: CommissionPackage!
    id: ID!

    """The commission rate % once the thresholdPrice has been reached"""
    overThresholdRate: Decimal

    """The commission rate for the specified Taxon (or Category)"""
    rate: Decimal!

    """
    The Taxon (or Category) that the custom commission rate belongs to - eg. Bikes, Shoes, Wigs
    """
    taxon: Taxon!

    """
    The price limit (e.g. "500.00") set before over_threshold_rate takes into effect
    """
    thresholdPrice: Decimal

    """updated at date for the custom commission rate"""
    updatedAt: ISO8601DateTime!
}

"""The connection type for CustomCommissionRate."""
type CustomCommissionRateConnection {
    """A list of edges."""
    edges: [CustomCommissionRateEdge]

    """A list of nodes."""
    nodes: [CustomCommissionRate]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type CustomCommissionRateEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: CustomCommissionRate
}

input CustomCommissionRatesInput {
    """The commission rate % once the thresholdPrice has been reached"""
    overThresholdRate: Decimal

    """
    Rate for specific Taxon in the commission package. If not supplied, the default rate of 5% will be applied
    """
    rate: Decimal

    """ID of Taxon to which the custom rate, and applies_to_postage applies."""
    taxonId: ID!

    """
    The price limit (e.g. "500.00") set before over_threshold_rate takes into effect
    """
    thresholdPrice: Decimal
}

"""
Creates a Custom Commission Rate if no ID is passed, otherwise updates existing
Custom Commission Rate, for which an ID is required
"""
input CustomCommissionRatesUpdateInput {
    """
    Boolean flag to delete custom commission rate. False by default, change to true if you want to delete this custom rate
    """
    delete: Boolean

    """
    ID of custom commission rate. Supply this if you want to update an existing
    taxon's rate, otherwise leave blank to create a new taxon and rate
    """
    id: ID

    """The commission rate % once the thresholdPrice has been reached"""
    overThresholdRate: Decimal

    """
    Rate for specific Taxon in the commission package. If not supplied for a new custom commission rate,
    the default rate of 5% will be applied
    """
    rate: Decimal

    """
    ID of Taxon to which the custom rate, and applies_to_postage applies. If updating an existing taxon, supply the id field
    """
    taxonId: ID

    """
    The price limit (e.g. "500.00") set before over_threshold_rate takes into effect
    """
    thresholdPrice: Decimal
}

"""
Custom Fields can be created to hold categories of data not otherwise available
in the standard schema. Custom Fields must not be used to store Personally
Identifiable Information (PII).
"""
type CustomField implements Node {
    description: String
    fieldType: CustomFieldFieldTypeEnum!
    id: ID!
    name: String!
    placeholder: String
    readonly: Boolean!
    required: Boolean!
}

"""The connection type for CustomField."""
type CustomFieldConnection {
    """A list of edges."""
    edges: [CustomFieldEdge]

    """A list of nodes."""
    nodes: [CustomField]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""Autogenerated input type of CustomFieldCreateOrUpdateMutation"""
input CustomFieldCreateOrUpdateMutationInput {
    """
    Attributes to assign to the CustomField. NOTE: fieldType is set when the customField is created and can't be updated.
    """
    attributes: CustomFieldInput!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID of the CustomFieldType to update"""
    id: ID
}

"""Autogenerated return type of CustomFieldCreateOrUpdateMutation."""
type CustomFieldCreateOrUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    customField: CustomField
    errors: [ValidationError!]
    status: Int!
}

"""Autogenerated input type of CustomFieldDeleteMutation"""
input CustomFieldDeleteMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID of the CustomField to delete"""
    id: ID!
}

"""Autogenerated return type of CustomFieldDeleteMutation."""
type CustomFieldDeleteMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    customField: CustomField
    errors: [ValidationError!]
    status: Int!
}

"""An edge in a connection."""
type CustomFieldEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: CustomField
}

"""Data type for the CustomField"""
enum CustomFieldFieldTypeEnum {
    """Text field"""
    TEXT

    """Boolean field"""
    BOOLEAN

    """Email address field"""
    EMAIL_ADDRESS

    """URL field"""
    URL
}

"""
Information relating to a group of CustomFields, including the information for any associated CustomField records
"""
type CustomFieldGroup implements Node {
    customFields(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): CustomFieldConnection!
    description: String
    entity: CustomFieldGroupEntityEnum!
    id: ID!
    name: String!
}

"""Autogenerated input type of CustomFieldGroupCreateOrUpdateMutation"""
input CustomFieldGroupCreateOrUpdateMutationInput {
    """Attributes to assign to the CustomFieldGroup"""
    attributes: CustomFieldGroupInput!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID of the CustomFieldGroupType to update"""
    id: ID
}

"""Autogenerated return type of CustomFieldGroupCreateOrUpdateMutation."""
type CustomFieldGroupCreateOrUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    customFieldGroup: CustomFieldGroup
    errors: [ValidationError!]
    status: Int!
}

"""Autogenerated input type of CustomFieldGroupDeleteMutation"""
input CustomFieldGroupDeleteMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID of the CustomFieldGroup to delete"""
    id: ID!
}

"""Autogenerated return type of CustomFieldGroupDeleteMutation."""
type CustomFieldGroupDeleteMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    customFieldGroup: CustomFieldGroup
    errors: [ValidationError!]
    status: Int!
}

"""Entity that the CustomFieldGroup applies to - e.g. Sellers"""
enum CustomFieldGroupEntityEnum {
    """Apply to Sellers"""
    SELLER
}

"""Attributes for creating or updating a CustomFieldGroup"""
input CustomFieldGroupInput {
    """Description for the CustomFieldGroup"""
    description: String

    """Entity that this CustomFieldGroup is applies to"""
    entity: CustomFieldGroupEntityEnum!

    """Name for the CustomFieldGroup"""
    name: String!
}

"""The connection type for CustomFieldGroup."""
type CustomFieldGroupsConnection {
    """A list of edges."""
    edges: [CustomFieldGroupsEdge]

    """A list of nodes."""
    nodes: [CustomFieldGroup]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type CustomFieldGroupsEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: CustomFieldGroup
}

"""Attributes for creating or updating a CustomField"""
input CustomFieldInput {
    """ID of the associated CustomFieldGroup"""
    customFieldGroupId: ID!

    """Description for the CustomField"""
    description: String

    """
    Expected data type for the CustomField. NOTE: this field is set when the CustomField is created and can't be updated.
    """
    fieldType: CustomFieldFieldTypeEnum!

    """Name for the CustomField"""
    name: String!

    """Placeholder for the CustomField"""
    placeholder: String

    """
    Determines whether a CustomField is required or optional.
    A CustomField can be set to optional (required: false) or required
    (required: true). Consider if you need to make a field required.
    Setting a field to required can cause integration issues (potentially
    causing breaking changes), and increase the chance of validation errors.
    Once a CustomField is set to optional it cannot be changed to required;
    but you can change it from required to optional.
    """
    required: Boolean = false
}

"""Attributes for creating or updating a CustomFieldValues"""
input CustomFieldValueInput {
    """ID of the associated CustomField"""
    customFieldId: ID!

    """Value for the CustomField"""
    value: JSON!
}

"""Question on the custom form template"""
type CustomFormQuestions {
    questions: [CustomFormQuestionsFields!]!
}

"""Custom form template question fields"""
type CustomFormQuestionsFields {
    label: String!
    options: [String!]!
    required: Boolean!
    type: String!
}

"""Custom form template"""
type CustomFormTemplate {
    fields: CustomFormQuestions!
}

"""Site wide customization settings for a marketplace"""
type CustomisationSettings {
    """Alternative sort order options"""
    alternativeSearchSortOptions: [String!]!

    """Default search results displayed per page"""
    defaultSearchPerPage: Int!

    """Gallery image format"""
    galleryImageFormat: ImageGalleryLayoutEnum!

    """Gallery thumbnail format"""
    galleryThumbnailFormat: ImageGalleryLayoutEnum!

    """Gallery thumbnail orientation"""
    galleryThumbnailOrientation: ImageGalleryOrientationEnum!
    id: ID!

    """True if we want to allow a user to specify a location in their search"""
    showSearchLocation: Boolean!
}

"""Navigation link"""
type CustomNavLink {
    """Image to render. `text` represents alt text when `image` is present"""
    image: String
    text: String!
    url: String!
}

"""Specify desired date ranges."""
input DateRangeInput {
    """Objects after the given datetime"""
    gt: ISO8601DateTime

    """Objects after the given datetime inclusive"""
    gte: ISO8601DateTime

    """Objects before the given datetime"""
    lt: ISO8601DateTime

    """Objects before the given datetime inclusive"""
    lte: ISO8601DateTime
}

"""
A decimal value, transported as a string. (Allows large accurate numbers)
"""
scalar Decimal

"""A deleted advert"""
type DeletedAdvert implements Node {
    externalIds: [ExternalID!]!
    id: ID!
    legacyId: Int!
    updatedAt: ISO8601DateTime!
    variants(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): AllAdvertVariantConnection!
}

"""A deleted seller"""
type DeletedSeller implements Node {
    id: ID!
    legacyId: Int!
    updatedAt: ISO8601DateTime!
}

"""How the buyer expects to receive a purchased item."""
enum DeliveryMethodEnum {
    """The buyer has purchased the item online and is having it delivered."""
    DELIVER

    """
    The buyer has purchased the item online and will pick it up at the store.
    """
    PICK_UP_IN_STORE

    """
    Either the item is not deliverable or the buyer will receive the item in a non-standard way.
    """
    NO_DISPATCH
}

"""
Label for different methods by which a user can purchase and receive their item.
"""
enum DeliveryTypeEnum {
    """The entire transaction takes place online, and the item is delivered."""
    BUY_ONLINE

    """The item is purchased online, but the user picks it up at the store."""
    CLICK_AND_COLLECT

    """
    For items that are neither delivered nor picked up. Usually for bookings
    (e.g. hotels, tours)
    """
    NO_DISPATCH
}

"""A menu entry with a direct link"""
type DirectLink implements Node {
    id: ID!

    """Direct link to a page"""
    link: String!

    """Presentational name of the entry"""
    name: String!
}

"""Promotion discount type"""
enum DiscountTypeEnum {
    """Discount as a flat dollar amount."""
    DOLLAR

    """Discount as a percentage."""
    PERCENT

    """Discount as a flat dollar amount for every N dollars."""
    DOLLAR_REPEATING

    """Discount as a dollar amount per unit."""
    DOLLAR_PER_UNIT
}

"""Email direct marketing data"""
type EmailMarketing {
    """Is email direct marketing enabled for this site?"""
    edmEnabled: Boolean!

    """Should GDPR subscription checkbox be enabled for this site?"""
    gdprSubscriptionCheckboxEnabled: Boolean!
    id: ID!

    """Newsletter subscription"""
    newsletterSubscriptionForm: NewsletterSubscriptionForm

    """Link to a privacy policy"""
    privacyPolicyLink: TextLink!
}

"""
Custom Fields can be created to hold categories of data not otherwise available
in the standard schema. Custom Fields must not be used to store Personally
Identifiable Information (PII).
"""
type EntityCustomField implements Node {
    description: String
    fieldType: CustomFieldFieldTypeEnum!
    id: ID!
    name: String!
    placeholder: String
    readonly: Boolean!
    required: Boolean!

    """Customised fields value for the custom field."""
    value: JSON
}

"""The connection type for EntityCustomField."""
type EntityCustomFieldConnection {
    """A list of edges."""
    edges: [EntityCustomFieldEdge]

    """A list of nodes."""
    nodes: [EntityCustomField]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type EntityCustomFieldEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: EntityCustomField
}

"""
Information relating to a group of CustomFields, including the information for any associated CustomField records
"""
type EntityCustomFieldGroup implements Node {
    customFields(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): EntityCustomFieldConnection!
    description: String
    entity: CustomFieldGroupEntityEnum!
    id: ID!
    name: String!
}

"""The connection type for EntityCustomFieldGroup."""
type EntityCustomFieldGroupConnection {
    """A list of edges."""
    edges: [EntityCustomFieldGroupEdge]

    """A list of nodes."""
    nodes: [EntityCustomFieldGroup]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type EntityCustomFieldGroupEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: EntityCustomFieldGroup
}

type ErrorMessage {
    field: String
    messages: [String!]!
}

"""An advert (elasticsearch cached)"""
type ESAdvert implements Node {
    """Availability of the advert"""
    availability: [AdvertAvailabilityEnum!]!
    brand: ESBrand

    """City to be displayed on the advert tile"""
    cityDisplay: String!

    """
    Main Advert type for occasions extra fields are required. NOTE: much slower
    """
    dbAdvert: Advert

    """
    Main Brand type for occasions extra fields are required. NOTE: much slower
    """
    dbBrand: Brand

    """
    Main Seller type for occasions extra fields are required. NOTE: much slower
    """
    dbSeller: Seller

    """Image to display on the advert tile."""
    displayImage: Image

    """
    Title for display (may include Brand and Model Year depending on configuration)
    """
    fullTitle: String!
    id: ID!
    isFeatured: Boolean
    isPromoted: Boolean
    legacyId: Int!

    """
    Absolute lowest price (sale price or original price) available for the item in session currency. Denominated in cents.
    """
    lowestOriginalPriceCents: Int

    """
    Absolute lowest price (sale price or original price) available for the item in
    session currency. In string with currency symbol.
    """
    lowestOriginalPriceFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """
    Lowest non-sale price available for the item in session currency. Useful for
    display purpose only as all monetary transactions will be charged in the
    marketplace currency.
    """
    lowestOriginalPriceInSessionCurrency: String

    """
    Absolute lowest price (sale price or original price) available for the item in session currency. Denominated in cents.
    """
    lowestPriceCents: Int

    """
    Absolute lowest price (sale price or original price) available for the item in
    session currency. In string with currency symbol.
    """
    lowestPriceFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """
    Absolute lowest price (sale price or original price) available for the item in
    session currency. Useful for display purpose only as all monetary transactions
    will be charged in the marketplace currency.
    """
    lowestPriceInSessionCurrency: String

    """Original price formatted as a string (e.g. 'From $30')"""
    originalPriceFormatted: String
    pagePath: String!

    """
    The end time of the most recent active promotion that this advert is part of.
    It will return null if there are no active promotions for the advert.
    """
    promotionEndTime: String

    """
    The start time of the most recent active promotion that this advert is part
    of. It will return null if there are no active promotions for the advert.
    """
    promotionStartTime: String

    """
    The name of the most recent active promotion that this advert is part of.
    """
    promotionText: String

    """Rating reviews"""
    rating: AdvertRating

    """Sale price formatted as a string e.g. ('Now from $21')"""
    salePriceFormatted: String!
    seller: ESSeller!
    taxon: ESTaxon!
    title: String!
}

"""The connection type for ESAdvert."""
type ESAdvertsConnection {
    """A list of edges."""
    edges: [ESAdvertsEdge]

    """A list of nodes."""
    nodes: [ESAdvert]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type ESAdvertsEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: ESAdvert
}

"""A brand (elasticsearch cached)"""
type ESBrand implements Node {
    id: ID!
    logo: Image
    name: String!
}

"""A searched brand (elasticsearch cached)"""
type ESBrandSearch {
    id: ID!
    name: String!
}

"""The connection type for ESBrandSearch."""
type ESBrandSearchConnection {
    """A list of edges."""
    edges: [ESBrandSearchEdge]

    """A list of nodes."""
    nodes: [ESBrandSearch]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type ESBrandSearchEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: ESBrandSearch
}

"""A brand (elasticsearch cached)"""
type ESSeller implements Node {
    businessName: String!
    id: ID!

    """True if the seller is a private store"""
    isPrivate: Boolean!
    managedMultiStore: MultiStore
    multiStoreMemberships: [MultiStoreMembership!]

    """
    Path to a retailer-specific advert search results page that only shows adverts from the given seller.
    """
    shopAdvertSearchPath: String
}

"""A taxon (elasticsearch cached)"""
type ESTaxon implements Node {
    displayName: String!
    id: ID!
}

"""External service account settings"""
type ExternalAccountSettings {
    beamerProductId: String @deprecated(reason: "Beamer is no longer used. Do not use this field. This will be removed no earlier than 2024-04-01.")
    cookieBotDomainGroupId: String

    """
    App ID required by Facebook API's to enable social media sharing features on its platform
    """
    facebookAppId: String

    """
    Google ad manager account id. Used to show google advertisements on the front end
    """
    googleAdManagerAccountId: String
    heapAnalyticsKey: String @deprecated(reason: "Heap Analytics is no longer used. Do not use this field. This will be removed no earlier than 2024-01-01.")
    id: ID!

    """True if we display google ads on the front end"""
    useGoogleAds: Boolean!
}

"""External IDs"""
type ExternalID {
    id: ID!
    key: String!
    owner: Node!
    value: String!
}

"""External ID key and values to search for"""
input ExternalIDInput {
    key: String!
    value: [String!]!
}

"""Autogenerated input type of ExternalIDUpsertMutation"""
input ExternalIDUpsertMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Name of the remote system for the ID, eg. 'my_system'"""
    key: String!

    """ID of the local object to link"""
    owner: ID!

    """

    The default is for an ExternalID's owner/key/value to be unique.
    For example, owner: 'Advert', key: 'my_store', value: '23'.
    When this flag is set to true, any existing owner/key pair will be created or updated -
    eg. if an ExternalID exists with an owner of 'Advert' and a key of 'my_store', this
    record will be found and updated with the new value, or created if it does not exist.
    Default is false.

    """
    ownerKeyUnique: Boolean

    """ID on the remote system"""
    value: String!
}

"""Autogenerated return type of ExternalIDUpsertMutation."""
type ExternalIDUpsertMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    externalId: ExternalID
    status: Int!
}

"""The character of the option type on how option values are stored."""
enum FieldTypeEnum {
    """
    An option type that can only have one option value assigned from a list of values.
    """
    SINGLE_SELECT

    """
    An option type that can have multiple option values assigned from a list of values.
    """
    MULTI_SELECT

    """
    An option type where a the seller can input any label rather than selecting from a fixed list of values
    """
    FREE_TEXT
}

"""File upload."""
input FileInput {
    """The image data, base64 encoded."""
    dataBase64: String!

    """The filename that will be used to label this image."""
    filename: String!
}

"""Site wide customization settings for a marketplace"""
type FinanceSettings {
    """
    Value used for placeholder and any messaging around Vertical default Tax Rate
    """
    itemTaxRate: Float
}

"""Data for composing a site footer"""
type Footer {
    """Footer columns"""
    columns: [FooterColumn!]

    """Enable EDM subscription in the footer?"""
    edmSubscriptionEnabled: Boolean!
    id: ID!

    """Show legal info? (true/false)"""
    showLegalInfo: Boolean!
}

"""Data for composing a site footer"""
type FooterColumn {
    """Column's content as Markdown"""
    content: String!

    """Column's content as HTML"""
    contentHtml: String!

    """Column's header as a string"""
    header: String!
}

"""A free text field with a select input field"""
type FreeTextAndSelectField {
    freeTextField: FreeTextField!
    name: String!
    selectField: SelectField!
}

"""Text field where any user input is accepted"""
type FreeTextField {
    name: String!
}

type FreetextOptionValue implements Node {
    """ID of the object."""
    id: ID!
    optionType: OptionType!
    value: String
}

"""The connection type for FreetextOptionValue."""
type FreetextOptionValueConnection {
    """A list of edges."""
    edges: [FreetextOptionValueEdge]

    """A list of nodes."""
    nodes: [FreetextOptionValue]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type FreetextOptionValueEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: FreetextOptionValue
}

"""
Gender type which can be used to build a
gender filter for advert search
"""
type GenderFilterOption implements Node {
    """The number of adverts associated with the gender filter option"""
    count: Int!
    id: ID!
    name: String!
    slug: String!
}

"""Givex settings for ecommerce."""
type GivexSettings {
    category: CategoryTypeEnum!

    """ Denominated in cents."""
    customMerchantBaseFeeCents: Int

    """ In string with currency symbol."""
    customMerchantBaseFeeFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String
    customMerchantFee: Float
    description: String!
    givexPaymentMethod: ID
    logoUrl: String!
    overrideCustomMerchantFee: Boolean!
    password: String
    primaryApiUrl: String
    providerHandle: String!
    providerName: String!
    secondaryApiUrl: String
    status: StatusTypeEnum!
    userId: String
}

"""Autogenerated input type of GivexSettingsCreateOrUpdateMutation"""
input GivexSettingsCreateOrUpdateMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Merchant base fee."""
    customMerchantBaseFee: String

    """Percentage of the order total to be charged for the merchant fee."""
    customMerchantFee: String

    """Override the custom merchant fee."""
    overrideCustomMerchantFee: Boolean

    """Givex password."""
    password: String!

    """Givex primary API URL."""
    primaryApiUrl: String!

    """Givex fallback API URL."""
    secondaryApiUrl: String!

    """Givex User ID."""
    userId: String!
}

"""Autogenerated return type of GivexSettingsCreateOrUpdateMutation."""
type GivexSettingsCreateOrUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    givexSettings: GivexSettings
    status: Int!
}

"""Autogenerated input type of GivexSettingsDeleteMutation"""
input GivexSettingsDeleteMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
}

"""Autogenerated return type of GivexSettingsDeleteMutation."""
type GivexSettingsDeleteMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    givexSettings: GivexSettings
    status: Int!
}

"""Mixed search result records belonging to retailer"""
type GlobalSearchResult implements Node {
    details: JSON!
    id: ID!
    recordType: String!
}

"""The connection type for GlobalSearchResult."""
type GlobalSearchResultsConnection {
    """A list of edges."""
    edges: [GlobalSearchResultsEdge]

    """A list of nodes."""
    nodes: [GlobalSearchResult]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type GlobalSearchResultsEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: GlobalSearchResult
}

"""A golden product record."""
type GoldenProduct implements Node {
    """True if at least one item under this golden product record is active"""
    active: Boolean!

    """Adverts associated to the golden product"""
    adverts(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """
        Whether to only fetch adverts that are displayable (e.g. are valid, have inventory available)
        """
        displayableOnly: Boolean

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): AdvertConnection!

    """Brand of the golden product record."""
    brand: Brand

    """When the golden product record was created."""
    createdAt: ISO8601DateTime!
    customIframeThumbnail: Image
    customIframeUrl: String

    """Description for the golden product record."""
    description: String

    """PDF documents for information on product."""
    documents(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): GoldenProductDocumentsConnection

    """External ids linked to the golden product record."""
    externalIds: [ExternalID!]!

    """Golden product variants"""
    goldenProductVariants(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): GoldenProductVariantsConnection
    id: ID!
    images(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): ImagesConnection
    legacyId: Int!

    """Price Unit as a Configurable Unit of Measure."""
    measurementPriceUnit: MeasurementUnit

    """Metadata key/values."""
    metadata: [Metadatum!]!

    """This field returns option type values set to the golden product."""
    optionValues(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): GoldenProductOptionValueConnection!

    """Origin country code of the golden product"""
    originCountryCode: String
    price: String

    """The recommended retail price (RRP) for the golden product."""
    recommendedRetailPrice: String

    """The sale type for the golden product."""
    saleType: GoldenProductSaleTypeEnum

    """The direct shipping parcel information for the golden product."""
    shippingParcel: ShippingParcel
    specifications: String
    taxCode: String

    """
    The Taxon (or Category) that a golden product belongs to - eg. Bikes, Shoes, Wigs.
    """
    taxon: Taxon

    """Title for the golden product record."""
    title: String!

    """When the golden product record was last updated."""
    updatedAt: ISO8601DateTime!

    """When relevant, the model year of the product."""
    year: Int
    youtubeVideoId: String
    youtubeVideoUrl: String
}

enum GoldenProductActiveStatusEnum {
    ACTIVE
    INACTIVE
}

"""Autogenerated input type of GoldenProductCreateMutation"""
input GoldenProductCreateMutationInput {
    attributes: GoldenProductInput!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
}

"""Autogenerated return type of GoldenProductCreateMutation."""
type GoldenProductCreateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    goldenProduct: GoldenProduct
    status: Int!
}

"""Autogenerated input type of GoldenProductDeleteMutation"""
input GoldenProductDeleteMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID of the golden product"""
    id: ID!
}

"""Autogenerated return type of GoldenProductDeleteMutation."""
type GoldenProductDeleteMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    goldenProduct: GoldenProduct
    status: Int!
}

"""PDF documents relating to the golden product."""
type GoldenProductDocument implements Node {
    """The name of the PDF."""
    filename: String
    id: ID!

    """The file size of the attached document in bytes."""
    size: Int

    """The Golden Products attached PDF documents."""
    url: String
}

"""
Golden product document upload. Exactly one of (dataBase64 AND filename) or sourceUrl must be supplied.
"""
input GoldenProductDocumentInput {
    """The document data, base64 encoded."""
    dataBase64: String

    """The ID from an existing document"""
    documentId: ID

    """The filename that will be used to label this document."""
    filename: String

    """The file size of the document in bytes."""
    size: Int

    """A URL from which the document data can be fetched."""
    sourceUrl: String
}

"""The connection type for GoldenProductDocument."""
type GoldenProductDocumentsConnection {
    """A list of edges."""
    edges: [GoldenProductDocumentsEdge]

    """A list of nodes."""
    nodes: [GoldenProductDocument]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type GoldenProductDocumentsEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: GoldenProductDocument
}

input GoldenProductInput {
    """Brand for the golden product."""
    brandId: ID

    """Image thumbnail for the custom video supplied via 'custom_iframe_url'"""
    customIframeThumbnail: ImageInput

    """Custom video url relating to the golden product"""
    customIframeUrl: String

    """Description for the golden product."""
    description: String

    """PDF documents relating to the golden product"""
    documents: [GoldenProductDocumentInput!]

    """External IDs key/value pairs."""
    externalIds: [KeyValueInput!]
    images: [ImageInput!]

    """Metadata key/value pairs."""
    metadata: [KeyValueInput!]

    """Option values for the golden product."""
    optionValues: [GoldenProductOptionValueInput!]

    """Origin country code of the golden product"""
    originCountryCode: String
    price: String

    """The recommended retail price (RRP) for the golden product."""
    recommendedRetailPrice: String

    """The sale type for the golden product."""
    saleType: GoldenProductSaleTypeEnum

    """The direct shipping parcel information for the golden product."""
    shippingParcel: ShippingParcelInput

    """Specifications for the golden product."""
    specifications: String

    """Tax code applicable for the golden product."""
    taxCode: String

    """Taxon for the golden product."""
    taxonId: ID!

    """Title for the golden product."""
    title: String!

    """When relevant, the model year of the product."""
    year: Int

    """Youtube video url relating to the golden product"""
    youtubeVideoUrl: String
}

"""
Golden Product option value for a golden product's option type supporting all field types.
"""
type GoldenProductOptionValue implements Node {
    """
    ID for the value. This value is less likely to change when the field values are unchanged but cannot guaranty.
    """
    id: ID!

    """Option Type the value belongs to."""
    optionType: OptionType!

    """Option value for single-select or multi-select Option Type."""
    optionValue: OptionValue

    """Value for free-text Option Type."""
    textValue: String
}

"""The connection type for GoldenProductOptionValue."""
type GoldenProductOptionValueConnection {
    """A list of edges."""
    edges: [GoldenProductOptionValueEdge]

    """A list of nodes."""
    nodes: [GoldenProductOptionValue]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type GoldenProductOptionValueEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: GoldenProductOptionValue
}

"""
Input for updating a golden product option value. Set only optionValueId for
single-select and multi-select option types, and set only optionTypeId and
textValue for a free-text option type.
"""
input GoldenProductOptionValueInput {
    """Option Type ID required for a free-text option type"""
    optionTypeId: ID

    """Option Value ID used for single-select and multi-select option types"""
    optionValueId: ID

    """Free-text value used for a free-text option type"""
    textValue: String
}

"""The type of transaction permitted for a given golden product."""
enum GoldenProductSaleTypeEnum {
    """Can be purchased via the website or other means."""
    BUY_ONLINE

    """Can be purchased exclusively via the website."""
    BUY_ONLINE_ONLY

    """
    Can be purchased via the website and can be delivered or picked up in store.
    """
    BUY_ONLINE_OR_CLICK_AND_COLLECT

    """Can be purchased via the website then picked up in store."""
    CLICK_AND_COLLECT

    """Being sold by a private seller (i.e. not a store)."""
    CLASSIFIED
}

"""The connection type for GoldenProduct."""
type GoldenProductsConnection {
    """A list of edges."""
    edges: [GoldenProductsEdge]

    """A list of nodes."""
    nodes: [GoldenProduct]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type GoldenProductsEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: GoldenProduct
}

input GoldenProductUpdateInput {
    """Brand for the golden product."""
    brandId: ID

    """Image thumbnail for the custom video supplied via 'custom_iframe_url'"""
    customIframeThumbnail: ImageInput

    """Custom video url relating to the golden product"""
    customIframeUrl: String

    """Description for the golden product."""
    description: String

    """PDF documents relating to the golden product"""
    documents: [GoldenProductDocumentInput!]

    """External IDs key/value pairs."""
    externalIds: [KeyValueInput!]
    images: [ImageInput!]

    """Metadata key/value pairs."""
    metadata: [KeyValueInput!]

    """Option values for the golden product."""
    optionValues: [GoldenProductOptionValueInput!]

    """Origin country code of the golden product"""
    originCountryCode: String
    price: String

    """The recommended retail price (RRP) for the golden product."""
    recommendedRetailPrice: String

    """The sale type for the golden product."""
    saleType: GoldenProductSaleTypeEnum

    """The direct shipping parcel information for the golden product."""
    shippingParcel: ShippingParcelInput

    """Specifications for the golden product."""
    specifications: String

    """Tax code applicable for the golden product."""
    taxCode: String

    """Taxon for the golden product."""
    taxonId: ID

    """Title for the golden product."""
    title: String

    """When relevant, the model year of the product."""
    year: Int

    """Youtube video url relating to the golden product"""
    youtubeVideoUrl: String
}

"""Autogenerated input type of GoldenProductUpdateMutation"""
input GoldenProductUpdateMutationInput {
    attributes: GoldenProductUpdateInput!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID of the golden product to be updated"""
    goldenProductId: ID!
}

"""Autogenerated return type of GoldenProductUpdateMutation."""
type GoldenProductUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    goldenProduct: GoldenProduct
    status: Int!
}

"""A variant under the golden product record."""
type GoldenProductVariant implements Node {
    """Shows if the golden product variant is active"""
    active: Boolean!
    barcodes: [String!]

    """The comparable size of the item. Used for comparable unit pricing."""
    comparableSize: Float

    """When the golden product variant was created."""
    createdAt: ISO8601DateTime!

    """Description for the golden product variant."""
    description: String
    externalIds: [ExternalID!]!

    """The golden product this variant belongs to"""
    goldenProduct: GoldenProduct!
    id: ID!
    images(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): ImagesConnection!

    """The size of the item. Used for comparable unit pricing."""
    itemSize: Float
    legacyId: Int!

    """Comparable Unit as a Configurable Unit of Measure"""
    measurementComparableUnit: MeasurementUnit

    """Item Unit as a Configurable Unit of Measure"""
    measurementItemUnit: MeasurementUnit

    """Metadata key/values"""
    metadata: [Metadatum!]!
    notes: String

    """
    This field returns option type values set to the golden product variant.
    """
    optionValues(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): GoldenProductVariantOptionValueConnection!

    """The recommended retail price (RRP) for the item."""
    recommendedRetailPrice: String

    """The direct shipping parcel information for the golden product variant."""
    shippingParcel: ShippingParcel
    shippingProfile: ShippingProfile
    sku: String
    taxCode: String

    """When the golden product variant was last updated."""
    updatedAt: ISO8601DateTime!

    """Variants associated to the golden product variant"""
    variants(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """
        Whether to only fetch variants that are displayable (e.g. are valid, have inventory available)
        """
        displayableOnly: Boolean

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): VariantConnection!
}

"""Autogenerated input type of GoldenProductVariantCreateMutation"""
input GoldenProductVariantCreateMutationInput {
    attributes: GoldenProductVariantInput!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
}

"""Autogenerated return type of GoldenProductVariantCreateMutation."""
type GoldenProductVariantCreateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    goldenProductVariant: GoldenProductVariant
    status: Int!
}

"""Autogenerated input type of GoldenProductVariantDeleteMutation"""
input GoldenProductVariantDeleteMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID of the golden product variant to delete"""
    id: ID!
}

"""Autogenerated return type of GoldenProductVariantDeleteMutation."""
type GoldenProductVariantDeleteMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    goldenProductVariant: GoldenProductVariant
    status: Int!
}

input GoldenProductVariantInput {
    """Shows if the golden product variant is active"""
    active: Boolean

    """Barcodes associated to the golden product variant."""
    barcodes: [String!]

    """The comparable size of the item. Used for comparable unit pricing."""
    comparableSize: Float

    """Description for the golden product variant."""
    description: String

    """External IDs key/value pairs."""
    externalIds: [KeyValueInput!]

    """The golden product this variant belongs to."""
    goldenProductId: ID!
    images: [ImageInput!]

    """The size of the item. Used for comparable unit pricing."""
    itemSize: Float

    """Metadata key/value pairs."""
    metadata: [KeyValueInput!]

    """Notes for the golden product variant."""
    notes: String

    """
    Option values of the golden product variant. If this argument is given,
    product option values will be updated to match the input and delete the missing ones.
    """
    optionValues: [GoldenProductVariantOptionValueInput!]

    """The recommended retail price (RRP) for the item."""
    recommendedRetailPrice: String
    shippingParcel: ShippingParcelInput
    shippingProfileId: ID

    """SKU for the golden product variant."""
    sku: String

    """Tax code applicable for the golden product variant."""
    taxCode: String
}

"""Autogenerated input type of GoldenProductVariantLinkVariantsMutation"""
input GoldenProductVariantLinkVariantsMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    goldenProductVariantId: ID!
    variantIds: [ID!] = []
    variantLegacyIds: [Int!] = []
}

"""Autogenerated return type of GoldenProductVariantLinkVariantsMutation."""
type GoldenProductVariantLinkVariantsMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    goldenProductVariant: GoldenProductVariant
    status: Int!
}

"""
Golden Product Variant option value for a golden product variant's option type supporting all field types.
"""
type GoldenProductVariantOptionValue implements Node {
    """
    ID for the value. This value is less likely to change when the field values are unchanged but cannot guaranty.
    """
    id: ID!

    """Option Type the value belongs to."""
    optionType: OptionType!

    """Option value for single-select or multi-select Option Type."""
    optionValue: OptionValue

    """Value for free-text Option Type."""
    textValue: String
}

"""The connection type for GoldenProductVariantOptionValue."""
type GoldenProductVariantOptionValueConnection {
    """A list of edges."""
    edges: [GoldenProductVariantOptionValueEdge]

    """A list of nodes."""
    nodes: [GoldenProductVariantOptionValue]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type GoldenProductVariantOptionValueEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: GoldenProductVariantOptionValue
}

"""
Input for updating a golden product variant option value. Set only optionValueId
for single-select and multi-select option types, and set only optionTypeId and
textValue for a free-text option type.
"""
input GoldenProductVariantOptionValueInput {
    """Option Type ID required for a free-text option type"""
    optionTypeId: ID

    """Option Value ID used for single-select and multi-select option types"""
    optionValueId: ID

    """Free-text value used for a free-text option type"""
    textValue: String
}

"""Autogenerated input type of GoldenProductVariantsActivateMutation"""
input GoldenProductVariantsActivateMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """IDs of the golden product variant to be activated"""
    goldenProductVariantIds: [ID!]!
}

"""Autogenerated return type of GoldenProductVariantsActivateMutation."""
type GoldenProductVariantsActivateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    goldenProductVariants: [GoldenProductVariant!]
    status: Int!
}

"""The connection type for GoldenProductVariant."""
type GoldenProductVariantsConnection {
    """A list of edges."""
    edges: [GoldenProductVariantsEdge]

    """A list of nodes."""
    nodes: [GoldenProductVariant]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""Autogenerated input type of GoldenProductVariantsDeactivateMutation"""
input GoldenProductVariantsDeactivateMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    goldenProductVariantIds: [ID!]! = []
}

"""Autogenerated return type of GoldenProductVariantsDeactivateMutation."""
type GoldenProductVariantsDeactivateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    goldenProductVariants: [GoldenProductVariant!]
    status: Int!
}

"""An edge in a connection."""
type GoldenProductVariantsEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: GoldenProductVariant
}

"""Autogenerated input type of GoldenProductVariantUnlinkVariantsMutation"""
input GoldenProductVariantUnlinkVariantsMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    goldenProductVariantId: ID!
    variantIds: [ID!]!
}

"""
Autogenerated return type of GoldenProductVariantUnlinkVariantsMutation.
"""
type GoldenProductVariantUnlinkVariantsMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    goldenProductVariant: GoldenProductVariant
    status: Int!
}

input GoldenProductVariantUpdateInput {
    """Shows if the golden product variant is active"""
    active: Boolean

    """Barcodes associated to the golden product variant."""
    barcodes: [String!]

    """The comparable size of the item. Used for comparable unit pricing."""
    comparableSize: Float

    """Description for the golden product variant."""
    description: String

    """External IDs key/value pairs."""
    externalIds: [KeyValueInput!]

    """The golden product this variant belongs to."""
    goldenProductId: ID
    images: [ImageInput!]

    """The size of the item. Used for comparable unit pricing."""
    itemSize: Float

    """Metadata key/value pairs."""
    metadata: [KeyValueInput!]

    """Notes for the golden product variant."""
    notes: String

    """
    Option values of the golden product variant. If this argument is given,
    product option values will be updated to match the input and delete the missing ones.
    """
    optionValues: [GoldenProductVariantOptionValueInput!]

    """The recommended retail price (RRP) for the item."""
    recommendedRetailPrice: String
    shippingParcel: ShippingParcelInput
    shippingProfileId: ID

    """SKU for the golden product variant."""
    sku: String

    """Tax code applicable for the golden product variant."""
    taxCode: String
}

"""Autogenerated input type of GoldenProductVariantUpdateMutation"""
input GoldenProductVariantUpdateMutationInput {
    attributes: GoldenProductVariantUpdateInput!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID of the golden product variant to be updated"""
    goldenProductVariantId: ID!
}

"""Autogenerated return type of GoldenProductVariantUpdateMutation."""
type GoldenProductVariantUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    goldenProductVariant: GoldenProductVariant
    status: Int!
}

"""Properties of a single Google/Universal Analytics tracker"""
type GoogleAnalyticsTracker {
    """Tracker ID to send to Google Analytics."""
    id: String!

    """A name to identify the tracker."""
    name: String!
}

"""Google maps credentials"""
type GoogleMapsCredentials {
    """Google Maps API key"""
    apiKey: String

    """Google Maps host"""
    host: String
}

"""Google reCAPTCHA credentials"""
type GoogleRecaptchaCredentials {
    """Google reCAPTCHA site key"""
    siteKey: String
}

"""Data for composing a site header"""
type Header {
    categoryMenuEntries: [CategoryMenuEntry!]!
    navBar: NavBar!
    searchFields: [SearchField!]!
}

"""Data for all health related checks"""
type HealthCheck {
    """Full list of all health checks"""
    all: [StatusInfo!]!

    """Health check info for database"""
    database: StatusInfo!

    """Health check info for default"""
    default: StatusInfo!

    """Health check info for elasticsearch"""
    elasticsearch: StatusInfo!

    """Health check info for memcached"""
    memcached: StatusInfo!

    """Health check info for puma"""
    puma: StatusInfo!

    """Health check info for redis"""
    redis: StatusInfo!

    """Health check info for ruby"""
    ruby: StatusInfo!

    """Health check info for sidekiq"""
    sidekiq: StatusInfo!

    """Overall health check success"""
    success: Boolean!

    """Health check info for version"""
    version: StatusInfo!
}

"""Image attachment for adverts and some other models"""
type Image implements Node {
    """Image alt text"""
    alt: String
    filename: String
    height: Int
    id: ID!

    """Image metadata"""
    metadata: String

    """
    NOTE: This will be deprecated, assume images are always ordered and set position values on integrations accordingly.
    """
    position: Int!

    """The file size of the image in bytes."""
    size: Int

    """The src URL for the image."""
    url(
        """
        Sets a background color (hex, eg: ff0000) for fit=fill/fillmax. NOTE: we
        would suggest using fit=clip and css style of "object-fit: contain" instead.
        """
        fillColor: String

        """Resize Fit Mode: default is max"""
        fit: ImageFitEnum

        """Desired height (in pixels) of image."""
        height: Int

        """Return image original format as it was uploaded."""
        originalFormat: Boolean

        """Desired width (in pixels) of image."""
        width: Int
    ): String!
    width: Int
}

"""The resize fit mode - See: https://docs.imgix.com/apis/url/size/fit"""
enum ImageFitEnum {
    """
    Resizes the image to fit within the width and height dimensions without
    cropping or distorting the image, and the remaining space is filled with
    extended pixels from the edge of the image. The resulting image will match the
    constraining dimensions. The pixel extension is called an affine clamp, hence
    the value name, "clamp".
    """
    clamp @deprecated(reason: "Deprecated from January 2021")

    """
    Resizes the image to fit within the width and height boundaries without
    cropping or distorting the image. The resulting image will match one of the
    constraining dimensions, while the other dimension is altered to maintain the
    same aspect ratio of the input image.
    """
    clip

    """
    Resizes the image to fill the width and height dimensions and crops any excess
    image data. The resulting image will match the width and height constraints
    without distorting the image. It's used in conjunction with the the crop
    parameter, which controls how the image is cropped. Both the w and h
    parameters will also need to be set.
    """
    crop

    """
    Finds the area containing all faces, or a specific face in an image, and
    scales it to specified width and height dimensions. Can be used in conjunction
    with faceindex to identify a specific face, as well as facepad to include
    additional padded area around the face to zoom out from the immediate area
    around the faces.
    """
    facearea @deprecated(reason: "Deprecated from January 2021")

    """
    Resizes the image to fit within the requested width and height dimensions
    while preserving the original aspect ratio and without discarding any original
    image data. Excess space is filled with a solid color or blurred version of
    the image. The resulting image exactly matches the requested dimensions.
    """
    fill

    """
    Resizes the image to fit within the requested width and height dimensions
    while preserving the original aspect ratio and without discarding any original
    image data. If the requested width or height exceeds that of the original, the
    original image remains the same size. The excess space is filled with a solid
    color or blurred version of the image. The resulting image exactly matches the
    requested dimensions.
    """
    fillmax

    """
    Resizes the image to fit within the width and height dimensions without
    cropping or distorting the image, but will not increase the size of the image
    if it is smaller than the output size. The resulting image will maintain the
    same aspect ratio of the input image.
    """
    max

    """
    Resizes and crops the image to match the aspect ratio of the requested width
    and height. Will not exceed the original width and height of the image.
    """
    min

    """
    Scales the image to fit the constraining dimensions exactly. The resulting
    image will fill the dimensions, and will not maintain the aspect ratio of the input image.
    """
    scale
}

"""Image gallery data for the shop page"""
type ImageGallery {
    id: ID!

    """Image data stored on seller"""
    images: [Image!]!

    """Video data stored on seller"""
    video: Video
}

"""The display style for images in the gallery"""
enum ImageGalleryLayoutEnum {
    """
    Padded adds space between the border and the image, and shows the full image scaled and centred.
    """
    padded

    """
    Full bleed doesn't add space between the border and the image, and crops the image to cover the whole image area.
    """
    full_bleed
}

"""The orientation for images in the gallery"""
enum ImageGalleryOrientationEnum {
    """Display orientation for the images is horizontal"""
    horizontal

    """Display orientation for the images is vertical"""
    vertical
}

"""
Image upload. Exactly one of (dataBase64 AND filename) or sourceUrl must be supplied.
"""
input ImageInput {
    """Alt text description of the image."""
    alt: String

    """The image data, base64 encoded."""
    dataBase64: String

    """The filename that will be used to label this image."""
    filename: String

    """The ID from an existing image type"""
    imageId: ID

    """The file size of the image in bytes."""
    size: Int

    """A URL from which the image data can be fetched."""
    sourceUrl: String
}

"""The connection type for Image."""
type ImagesConnection {
    """A list of edges."""
    edges: [ImagesEdge]

    """A list of nodes."""
    nodes: [Image]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type ImagesEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: Image
}

"""Autogenerated input type of ImageUploadMutation"""
input ImageUploadMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """The image data, base64 encoded."""
    dataBase64: String!
}

"""Autogenerated return type of ImageUploadMutation."""
type ImageUploadMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]

    """The sourceUrl to send in ImageInput"""
    sourceUrl: String
    status: Int!
}

type ImportExport implements Node {
    className: String!
    createdAt: ISO8601DateTime!
    errorsCsvLink: String @deprecated(reason: "Requires SP1.0 login, please use \"errorsToCsv\" and \"hasErrorsToCsv\" instead")
    errorsToCsv: String
    expectedResultCount: Int
    failedCount: Int
    file: Attachment
    hasErrorsToCsv: Boolean!
    humanClassName: String!
    id: ID!
    legacyId: Int!
    processedCount: Int
    seller: Seller!
    status: ImportExportStatusEnum
    updatedAt: ISO8601DateTime!
}

type ImportExportCommissionPackageSchedule implements Node {
    className: String!
    createdAt: ISO8601DateTime!
    expectedResultCount: Int
    failedCount: Int
    file: Attachment
    humanClassName: String!
    id: ID!
    legacyId: Int!
    processedCount: Int
    status: ImportExportStatusEnum
    updatedAt: ISO8601DateTime!
}

"""The connection type for ImportExport."""
type ImportExportConnection {
    """A list of edges."""
    edges: [ImportExportEdge]

    """A list of nodes."""
    nodes: [ImportExport]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type ImportExportEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: ImportExport
}

"""Import Export status"""
enum ImportExportStatusEnum {
    PENDING
    PREVIEW
    LOADING
    PROCESSING
    FINISHED
    ERROR
    ABORTED
}

"""Import Export type"""
enum ImportExportTypeEnum {
    ADVERT_EXPORT
    ADVERT_IMPORT
    EMAILS_IMPORT
    PRODUCT_DB_EXPORT
    STOCKLEVEL_IMPORT
    SHIPMENTS_IMPORT
}

type Inquiry {
    """The Advert to which the inquiry relates"""
    advert: Advert

    """The Full name of the person raising the inquiry"""
    customerFullName: String!

    """The email address of the person raising the inquiry"""
    email: String!
    id: ID!

    """Whether or not customer subscribed to the email marketing list"""
    marketingOptIn: Boolean!

    """The message, question or inquiry that has been raised by a customer"""
    message: String!

    """The phone number of the person raising the inquiry"""
    phone: String

    """The post code of the person raising the inquiry"""
    postCode: String

    """The Seller to which the inquiry relates"""
    seller: Seller!
}

"""Inquiry Attributes."""
input InquiryCreateInput {
    """The Id of the Advert to which the inquiry relates"""
    advertId: ID

    """Full name of the person raising the inquiry"""
    customerFullName: String!

    """The email address of the person raising the inquiry"""
    email: String!

    """Whether we add this email address to the email marketing list"""
    marketingOptIn: Boolean = false

    """
    The message, question or inquiry that you would like to send to the Seller
    """
    message: String!

    """The phone number of the person raising the inquiry"""
    phone: String = ""

    """The post code of the person raising the inquiry"""
    postCode: String = ""

    """The Id of the Seller to which the inquiry relates"""
    sellerId: ID!
}

"""Autogenerated input type of InquiryCreateMutation"""
input InquiryCreateMutationInput {
    attributes: InquiryCreateInput!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
}

"""Autogenerated return type of InquiryCreateMutation."""
type InquiryCreateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    inquiry: Inquiry
    status: Int!
}

"""Record to handle multi-store inventory."""
type Inventory implements Node {
    """It is used to identify the quantity available."""
    countOnHand: Int!
    id: ID!

    """Used to identify if infinite inventory is enabled"""
    infiniteQuantity: Boolean!
    price: Money
    salePrice: Money

    """Seller associated in the multi-store membership."""
    seller: Seller!
}

"""The connection type for Inventory."""
type InventorysConnection {
    """A list of edges."""
    edges: [InventorysEdge]

    """A list of nodes."""
    nodes: [Inventory]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type InventorysEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: Inventory
}

"""Invoice items associated with an order."""
type Invoice implements Node {
    adjustments: [Adjustment!]!
    amendments: [InvoiceAmendment!]!
    annotations: [InvoiceAnnotation!]!
    buyerBillingAddress: Address
    buyerEmailAddress: String
    buyerFirstName: String
    buyerMessageToSeller: String
    buyerPhone: String
    buyerSurname: String

    """Commission amount Denominated in cents."""
    commissionAmountCents: Int

    """Commission amount In string with currency symbol."""
    commissionAmountFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """Total commission tax amount for the invoice Denominated in cents."""
    commissionAmountTaxCents: Int

    """
    Total commission tax amount for the invoice In string with currency symbol.
    """
    commissionAmountTaxFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """Data for the commission invoice in PDF format (EXPENSIVE TO GENERATE)"""
    commissionPdfData: String

    """Link to retrieve the commission invoice in PDF format"""
    commissionPdfLink: String

    """Commission tax rate set in invoice"""
    commissionTaxRate: Float

    """The date the invoice was created."""
    createdAt: ISO8601DateTime!
    deliveryType: DeliveryTypeEnum!

    """
    The discount applied to the invoice. Negative value. Denominated in cents.
    """
    discountCents: Int!

    """
    The discount applied to the invoice. Negative value. In string with currency symbol.
    """
    discountFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!
    externalIds: [ExternalID!]!
    externalTaxApplied: Boolean!
    id: ID!

    """The id used to identify the invoice."""
    legacyId: Int!
    lineItems: [LineItem!]!

    """Merchant fee Denominated in cents."""
    merchantFeeCents: Int

    """Merchant fee In string with currency symbol."""
    merchantFeeFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """Merchant fee tax rate set in invoice"""
    merchantFeesTaxRate: Float

    """
    Total tax for service provided by marketplace operator to seller Denominated in cents.
    """
    merchantFeeTaxTotalCents: Int

    """
    Total tax for service provided by marketplace operator to seller In string with currency symbol.
    """
    merchantFeeTaxTotalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """Metadata key/values"""
    metadata: [Metadatum!]!
    order: Order!
    orderPurgedAt: ISO8601DateTime

    """The date the invoice was paid."""
    paidAt: ISO8601DateTime
    paymentInstrumentType: String

    """data for the invoice in PDF format (EXPENSIVE TO GENERATE)"""
    pdfData: String @deprecated(reason: "Use pdfData instead")

    """Link to retrieve the invoice in PDF format"""
    pdfLink: String

    """Postage tax rate on invoice"""
    postageTaxRate: Float
    refundRequests: [RefundRequest!]!

    """Data for the remittance invoice in PDF format (EXPENSIVE TO GENERATE)"""
    remittancePdfData: String

    """Link to retrieve the remittance invoice in PDF format"""
    remittancePdfLink: String @deprecated(reason: "Use remittancePdfData instead")
    remittedAt: ISO8601DateTime
    seller: Seller!
    shipments: [Shipment!]!
    shippingAddress: Address

    """The invoice postage cost. Denominated in cents."""
    shippingCostCents: Int!

    """The invoice postage cost. In string with currency symbol."""
    shippingCostFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """
    General description of the delivery method and estimated time in transit for the shipment.
    """
    shippingDescription: String!

    """
    Message for user, informing them of the location from where their purchase
    will be shipped if applicable. Will return null if seller is multistore parent retailer.
    """
    shippingFromLocationMessage(
        """
        Whether to include the name of the city that the item is shipping from in the message.
        """
        useCity: Boolean = true
    ): String
    status: InvoiceStatusEnum! @deprecated(reason: "As an invoice can contain multiple line items, each of which which can be partially sent, partially refunded, partially awaiting return and partially cancelled all at the same time, a single status field is no longer sufficient to describe the status of an invoice. Instead, use statusFlags or look at refundRequests and invoiceAmendments to get the full picture. This field will be removed 2021-12-01.\n")
    statusFlags: [InvoiceStatusFlagEnum!]!

    """
    The invoice subtotal, excluding discounts and postage. Tax is included for tax
    inclusive marketplaces. Denominated in cents.
    """
    subtotalCents: Int!

    """
    The invoice subtotal, excluding discounts and postage. Tax is included for tax
    inclusive marketplaces. In string with currency symbol.
    """
    subtotalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """Tax rate on invoice"""
    taxRate: Float

    """The postage tax on the invoice. Denominated in cents."""
    taxShippingCents: Int!

    """The postage tax on the invoice. In string with currency symbol."""
    taxShippingFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """The tax on the invoice. Denominated in cents."""
    taxTotalCents: Int!

    """The tax on the invoice. In string with currency symbol."""
    taxTotalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """
    Total cost of the invoice, which includes subtotals and cost of shipping if applicable. Denominated in cents.
    """
    totalCents: Int!

    """
    Total cost of the invoice, which includes subtotals and cost of shipping if applicable. In string with currency symbol.
    """
    totalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """
    Total cost of the invoice, including adjustments. Denominated in cents.
    """
    totalIncludingAdjustmentsCents: Int!

    """
    Total cost of the invoice, including adjustments. In string with currency symbol.
    """
    totalIncludingAdjustmentsFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!
    updatedAt: ISO8601DateTime!
}

"""Amendments to an invoice."""
type InvoiceAmendment implements Node {
    """
    The total value of the commission within this amendment. Denominated in cents.
    """
    commissionAmountTotalCents: Int

    """
    The total value of the commission within this amendment. In string with currency symbol.
    """
    commissionAmountTotalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """
    The total value of the tax on the commissionAmountTotal. Denominated in cents.
    """
    commissionTaxTotalCents: Int

    """
    The total value of the tax on the commissionAmountTotal. In string with currency symbol.
    """
    commissionTaxTotalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String
    createdAt: ISO8601DateTime!
    externalTaxApplied: Boolean!
    id: ID!
    invoice: Invoice!

    """The id used to identify the invoice amendment."""
    legacyId: Int!

    """
    The total value of the item/s within this amendment. Denominated in cents.
    """
    lineItemAmountTotalCents: Int

    """
    The total value of the item/s within this amendment. In string with currency symbol.
    """
    lineItemAmountTotalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String
    lineItems: [InvoiceAmendmentLineItem!]!

    """
    The total value of the tax on the lineItemAmountTotal. Denominated in cents.
    """
    lineItemTaxTotalCents: Int

    """
    The total value of the tax on the lineItemAmountTotal. In string with currency symbol.
    """
    lineItemTaxTotalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """The order that this invoice amendment is for."""
    order: Order!

    """
    The total value of the remittance within this amendment. Denominated in cents.
    """
    remittanceAmountTotalCents: Int

    """
    The total value of the remittance within this amendment. In string with currency symbol.
    """
    remittanceAmountTotalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """
    The remittance adjustment value of the invoice amendment. Denominated in cents.
    """
    remittanceCents: Int!

    """
    The remittance adjustment value of the invoice amendment. In string with currency symbol.
    """
    remittanceFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """
    The total value of the tax on the remittanceAmountTotal. Denominated in cents.
    """
    remittanceTaxTotalCents: Int

    """
    The total value of the tax on the remittanceAmountTotal. In string with currency symbol.
    """
    remittanceTaxTotalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String
    remittedAt: ISO8601DateTime

    """
    The tax adjustment value of the invoice amendment. Denominated in cents.
    """
    taxCents: Int!

    """
    The tax adjustment value of the invoice amendment. In string with currency symbol.
    """
    taxFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """Tax rate on invoice"""
    taxRate: Float

    """Total adjustment value of the invoice amendment. Denominated in cents."""
    totalCents: Int!

    """
    Total adjustment value of the invoice amendment. In string with currency symbol.
    """
    totalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!
    updatedAt: ISO8601DateTime!
}

"""Autogenerated input type of InvoiceAmendmentCreateMutation"""
input InvoiceAmendmentCreateMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID of the invoice to amend."""
    invoiceId: ID!

    """Invoice amendment line items to create."""
    lineItems: [InvoiceAmendmentLineItemInput!]!

    """
    Amount to adjust remittance. Negative values are a refund. Denominated in cents.
    """
    remittanceCents: Int!
}

"""Autogenerated return type of InvoiceAmendmentCreateMutation."""
type InvoiceAmendmentCreateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    invoiceAmendment: InvoiceAmendment
    status: Int!
}

"""Attributes for filtering invoices"""
input InvoiceAmendmentFilters {
    """Invoice amendments created since this time"""
    createdSince: ISO8601DateTime = null

    """Invoice amendments created until this time"""
    createdUntil: ISO8601DateTime = null

    """Invoice amendments remitted since this time"""
    remittedSince: ISO8601DateTime = null

    """Invoice amendments remitted until this time"""
    remittedUntil: ISO8601DateTime = null

    """Invoice amendments updated since this time"""
    updatedSince: ISO8601DateTime = null

    """Invoice amendments updated until this time"""
    updatedUntil: ISO8601DateTime = null
}

"""Line items associated with an invoice amendment."""
type InvoiceAmendmentLineItem implements Node {
    """
    The amount (per item) that this line item is adding to the amendment. Denominated in cents.
    """
    amountCents: Int!

    """
    The amount (per item) that this line item is adding to the amendment. In string with currency symbol.
    """
    amountFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """The value of the commission of this line item. Denominated in cents."""
    commissionAmountCents: Int

    """
    The value of the commission of this line item. In string with currency symbol.
    """
    commissionAmountFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """The value of the tax on the commissionAmount. Denominated in cents."""
    commissionTaxCents: Int

    """
    The value of the tax on the commissionAmount. In string with currency symbol.
    """
    commissionTaxFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """
    Amendment line item description where it is not amending an invoice line item.
    """
    custom: String

    """
    Tax rate for the custom line item (for display purposes only). It defaults to
    the Marketplace default tax rate if not provided in the refund request approve mutation.
    """
    customLineItemTaxRate: Decimal

    """Does this refer to dispatched or not-yet-dispatched line items?"""
    dispatched: Boolean
    id: ID!

    """The invoice line item that is being amended."""
    lineItem: LineItem

    """The value of the item/s of this line item. Denominated in cents."""
    lineItemAmountCents: Int

    """
    The value of the item/s of this line item. In string with currency symbol.
    """
    lineItemAmountFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """The value of the tax on the lineItemAmount. Denominated in cents."""
    lineItemTaxCents: Int

    """
    The value of the tax on the lineItemAmount. In string with currency symbol.
    """
    lineItemTaxFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String
    quantity: Int!

    """The value of the remittance of this line item. Denominated in cents."""
    remittanceAmountCents: Int

    """
    The value of the remittance of this line item. In string with currency symbol.
    """
    remittanceAmountFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """The value of the tax on the remittanceAmount. Denominated in cents."""
    remittanceTaxCents: Int

    """
    The value of the tax on the remittanceAmount. In string with currency symbol.
    """
    remittanceTaxFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """Status of the invoice amendment line item"""
    status: InvoiceAmendmentLineItemStatusEnum!

    """Tax on the line item. Denominated in cents."""
    taxCents: Int

    """Tax on the line item. In string with currency symbol."""
    taxFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """Line item tax rate"""
    taxRate: Float

    """
    The total that this line item is adding to the amendment. Denominated in cents.
    """
    totalCents: Int!

    """
    The total that this line item is adding to the amendment. In string with currency symbol.
    """
    totalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!
}

"""
Line items associated with an invoice amendment.

Either lineItemId OR custom must be supplied, not both.

If lineItemId is supplied, you should also supply the
dispatched flag: In January 2022 you will be _required_ to
supply the dispatched flag in this case.

Quantity should be positive.

Amount should be negative for a refund.

"""
input InvoiceAmendmentLineItemInput {
    """
    Amount per unit for each item. Multiplied by quantity to get total for this
    line. Negative for a refund. Denominated in cents.
    """
    amountCents: Int

    """
    Text of the amendment line item, if and only if lineItemId is not supplied.
    """
    custom: String

    """Does this refer to dispatched or not-yet-dispatched line items?"""
    dispatched: Boolean

    """ID of the invoice line item to which this amendment line item refers."""
    lineItemId: ID

    """Quantity of this item to be amended."""
    quantity: Int!

    """Reason for refunding the line item."""
    reason: String

    """Status of the amendment line item."""
    status: InvoiceAmendmentLineItemStatusEnum!

    """Total amount for each item. Negative for a refund."""
    total: MoneyInputField
}

"""All possible statuses for invoice amendment line items."""
enum InvoiceAmendmentLineItemStatusEnum {
    """An invoice adjustment because the customer has received a refund."""
    REFUNDED

    """
    An invoice adjustment because the order or line item has been cancelled.
    """
    CANCELLED
}

"""The connection type for InvoiceAmendment."""
type InvoiceAmendmentsConnection {
    """A list of edges."""
    edges: [InvoiceAmendmentsEdge]

    """A list of nodes."""
    nodes: [InvoiceAmendment]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type InvoiceAmendmentsEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: InvoiceAmendment
}

"""Attributes for sorting invoice amendments"""
input InvoiceAmendmentSort {
    """Fields to sort invoice amendments"""
    fields: [InvoiceAmendmentSortFieldEnum!]! = [CREATED_AT]

    """Ordering to sort the results"""
    ordering: SortOrderingEnum = ASCENDING
}

"""The field that is used to sort invoice amendments"""
enum InvoiceAmendmentSortFieldEnum {
    CREATED_AT
    UPDATED_AT
    REMITTED_AT
}

"""Annotation on an invoice."""
type InvoiceAnnotation implements Node {
    content: String!
    createdAt: ISO8601DateTime!
    id: ID!
    invoice: Invoice!
    invoiceAnnotationType: InvoiceAnnotationType!
    resolved: Boolean!
    updatedAt: ISO8601DateTime!
}

"""Autogenerated input type of InvoiceAnnotationCreateMutation"""
input InvoiceAnnotationCreateMutationInput {
    """Attributes to assign to the invoice annotation."""
    attributes: InvoiceAnnotationInput!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID of the invoice annotation type."""
    invoiceAnnotationTypeId: ID!

    """ID of the invoice to be annotated."""
    invoiceId: ID!
}

"""Autogenerated return type of InvoiceAnnotationCreateMutation."""
type InvoiceAnnotationCreateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    invoiceAnnotation: InvoiceAnnotation
    status: Int!
}

"""Attributes for creating or updating an invoice annotation"""
input InvoiceAnnotationInput {
    """
    Content of the invoice annotation. What is considered valid content will vary depending on the invoice annotation type.

    """
    content: String!

    """Has this annotation been resolved?"""
    resolved: Boolean!
}

"""Autogenerated input type of InvoiceAnnotationResolveMutation"""
input InvoiceAnnotationResolveMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID of the invoice annotation to be resolved."""
    invoiceAnnotationId: ID!
}

"""Autogenerated return type of InvoiceAnnotationResolveMutation."""
type InvoiceAnnotationResolveMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    invoiceAnnotation: InvoiceAnnotation
    status: Int!
}

"""A type of invoice annotation."""
type InvoiceAnnotationType implements Node {
    creatableByCustomer: Boolean
    creatableByOperator: Boolean
    creatableBySeller: Boolean
    createdAt: ISO8601DateTime!
    description: String!
    discardedAt: ISO8601DateTime
    editableByCustomer: Boolean
    editableByOperator: Boolean
    editableBySeller: Boolean
    id: ID!
    name: String!
    resolvableByCustomer: Boolean
    resolvableByOperator: Boolean
    resolvableBySeller: Boolean
    updatedAt: ISO8601DateTime!
    viewableByCustomer: Boolean
    viewableByOperator: Boolean
    viewableBySeller: Boolean
}

"""The connection type for InvoiceAnnotationType."""
type InvoiceAnnotationTypeConnection {
    """A list of edges."""
    edges: [InvoiceAnnotationTypeEdge]

    """A list of nodes."""
    nodes: [InvoiceAnnotationType]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""Autogenerated input type of InvoiceAnnotationTypeCreateMutation"""
input InvoiceAnnotationTypeCreateMutationInput {
    """Attributes to assign to new invoice annotation type."""
    attributes: InvoiceAnnotationTypeInput!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
}

"""Autogenerated return type of InvoiceAnnotationTypeCreateMutation."""
type InvoiceAnnotationTypeCreateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    invoiceAnnotationType: InvoiceAnnotationType
    status: Int!
}

"""Autogenerated input type of InvoiceAnnotationTypeDiscardMutation"""
input InvoiceAnnotationTypeDiscardMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID of the invoice annotation type to be discarded."""
    invoiceAnnotationTypeId: ID!
}

"""Autogenerated return type of InvoiceAnnotationTypeDiscardMutation."""
type InvoiceAnnotationTypeDiscardMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    invoiceAnnotationType: InvoiceAnnotationType
    status: Int!
}

"""An edge in a connection."""
type InvoiceAnnotationTypeEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: InvoiceAnnotationType
}

"""Attributes for creating or updating an invoice annotation type"""
input InvoiceAnnotationTypeInput {
    creatableByCustomer: Boolean
    creatableByOperator: Boolean
    creatableBySeller: Boolean

    """
    Description of the invoice annotation type. Will be presented as instructions
    to the people creating an invoice annotation of this type.

    """
    description: String!
    editableByCustomer: Boolean
    editableByOperator: Boolean
    editableBySeller: Boolean

    """
    Name of the invoice annotation type. Must be unique amongst non-discarded invoice annotation types.
    """
    name: String!
    resolvableByCustomer: Boolean
    resolvableByOperator: Boolean
    resolvableBySeller: Boolean
    viewableByCustomer: Boolean
    viewableByOperator: Boolean
    viewableBySeller: Boolean
}

"""Autogenerated input type of InvoiceAnnotationTypeUpdateMutation"""
input InvoiceAnnotationTypeUpdateMutationInput {
    """Attributes to assign to the invoice annotation type."""
    attributes: InvoiceAnnotationTypeInput!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID of the invoice annotation type to be updated."""
    invoiceAnnotationTypeId: ID!
}

"""Autogenerated return type of InvoiceAnnotationTypeUpdateMutation."""
type InvoiceAnnotationTypeUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    invoiceAnnotationType: InvoiceAnnotationType
    status: Int!
}

"""Autogenerated input type of InvoiceAnnotationUpdateMutation"""
input InvoiceAnnotationUpdateMutationInput {
    """Attributes to assign to the invoice annotation."""
    attributes: InvoiceAnnotationInput!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID of the invoice annotation to be updated."""
    invoiceAnnotationId: ID!
}

"""Autogenerated return type of InvoiceAnnotationUpdateMutation."""
type InvoiceAnnotationUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    invoiceAnnotation: InvoiceAnnotation
    status: Int!
}

"""Available statuses click_and_collect invoices can transition to"""
enum InvoiceClickAndCollectStatusEnum {
    READY
    COLLECTED
}

"""The connection type for Invoice."""
type InvoiceConnection {
    """A list of edges."""
    edges: [InvoiceEdge]

    """A list of nodes."""
    nodes: [Invoice]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type InvoiceEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: Invoice
}

"""Attributes for filtering invoices"""
input InvoiceFilters {
    """Invoices with that are ready for collection"""
    awaitingCollection: Boolean = null

    """Invoices with pending refund requests"""
    awaitingReturn: Boolean = null

    """Invoices that are linked with this buyer email address"""
    buyerEmailAddress: String = null

    """Invoices that are linked with a buyers name containing this value"""
    buyerName: String = null

    """Invoices created since this time"""
    createdSince: ISO8601DateTime = null

    """Invoices created until this time"""
    createdUntil: ISO8601DateTime = null

    """
    Invoices with external ID value matching the value of an exposed external ID set on the associated order
    """
    externalId: String = null

    """Invoices with matching marketplacer database invoice ID"""
    legacyId: Int = null

    """Invoices with line items that are not fully dispatched"""
    notDispatched: Boolean = null

    """Invoices with orders having matching marketplacer database order ID"""
    orderId: Int = null

    """Invoices paid since this time"""
    paidSince: ISO8601DateTime = null

    """Invoices paid until this time"""
    paidUntil: ISO8601DateTime = null

    """Invoices with external ID value starting with the given value"""
    partialExternalId: String = null

    """Invoices remitted since this time"""
    remittedSince: ISO8601DateTime = null

    """Invoices remitted until this time"""
    remittedUntil: ISO8601DateTime = null

    """Invoices with one of these statuses"""
    statuses: [InvoiceStatusEnum!] = null

    """Invoices updated since this time"""
    updatedSince: ISO8601DateTime = null

    """Invoices updated until this time"""
    updatedUntil: ISO8601DateTime = null

    """Invoices with an unresolved annotation of this type"""
    withUnresolvedAnnotationsOfType: ID = null
}

"""Attributes for creating or updating an invoice"""
input InvoiceInput {
    """Adjustments to apply to the invoice."""
    adjustments: [AdjustmentInput!]

    """
    Attributes for external IDs used by external systems to fetch invoices.
    """
    externalIds: [KeyValueInput!]

    """Attributes of line items associated with the invoice."""
    lineItems: [LineItemInput!]!

    """Metadata key/value pairs."""
    metadata: [KeyValueInput!]

    """
    Total cost of the invoice, which includes subtotals and cost of shipping if
    applicable. Denominated in cents. Deprecated as of July 2022 as the total is
    calculated from line items and will be removed on January 2023.
    """
    totalCents: Int
}

"""The connection type for Invoice."""
type InvoicesConnection {
    """A list of edges."""
    edges: [InvoicesEdge]

    """A list of nodes."""
    nodes: [Invoice]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type InvoicesEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: Invoice
}

"""Attributes for sorting invoices"""
input InvoiceSort {
    """Fields to sort invoices"""
    fields: [InvoiceSortFieldEnum!]! = [CREATED_AT]

    """Ordering to sort the results"""
    ordering: SortOrderingEnum = ASCENDING
}

"""The field that is used to sort invoices"""
enum InvoiceSortFieldEnum {
    CREATED_AT
    UPDATED_AT
    PAID_AT
    REMITTED_AT
    STATUS
}

"""
The current status of an invoice. The invoice status field was deprecated, so
this enum is also deprecated. Will be removed 2021-12-01.
"""
enum InvoiceStatusEnum {
    AWAITING_PAYMENT @deprecated(reason: "The invoice status field was deprecated, so this enum is also deprecated. Will be removed 2021-12-01.")
    PAID @deprecated(reason: "The invoice status field was deprecated, so this enum is also deprecated. Will be removed 2021-12-01.")
    PAYMENT_UNDER_REVIEW @deprecated(reason: "The invoice status field was deprecated, so this enum is also deprecated. Will be removed 2021-12-01.")
    SENT @deprecated(reason: "The invoice status field was deprecated, so this enum is also deprecated. Will be removed 2021-12-01.")
    PARTIALLY_SENT @deprecated(reason: "The invoice status field was deprecated, so this enum is also deprecated. Will be removed 2021-12-01.")
    READY @deprecated(reason: "The invoice status field was deprecated, so this enum is also deprecated. Will be removed 2021-12-01.")
    COLLECTED @deprecated(reason: "The invoice status field was deprecated, so this enum is also deprecated. Will be removed 2021-12-01.")
    REFUNDED @deprecated(reason: "Was too confusing, look at invoiceAmendments and refundRequests instead. Will be removed 2021-12-01.")
    CANCELLED @deprecated(reason: "The invoice status field was deprecated, so this enum is also deprecated. Will be removed 2021-12-01.")
}

"""A status flag on an invoice."""
enum InvoiceStatusFlagEnum {
    PAID
    PAYMENT_UNDER_REVIEW
    SENT
    PARTIALLY_SENT
    AWAITING_RETURN
    AWAITING_REFUND
    REFUNDED
    CANCELLED
    READY
    COLLECTED
    REMITTED
}

"""An ISO 8601-encoded date"""
scalar ISO8601Date

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

"""Represents untyped JSON"""
scalar JSON

"""Key Value tuple"""
type KeyValue {
    key: String!
    value: String!
}

"""
Generic key-value object for when we need data whose structure isn't predefined.
"""
input KeyValueInput {
    """The object key."""
    key: String!

    """The value associated with the given key."""
    value: String
}

"""Klaviyo settings"""
type KlaviyoSettings {
    category: CategoryTypeEnum!
    description: String!
    ecommerceTrackingEnabled: Boolean
    edmEnabled: Boolean
    logoUrl: String!
    privateApiKey: String
    providerHandle: String!
    providerName: String!
    publicApiKey: String
    status: StatusTypeEnum!
}

"""Autogenerated input type of KlaviyoSettingsCreateOrUpdateMutation"""
input KlaviyoSettingsCreateOrUpdateMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Klaviyo private API key."""
    privateApiKey: String!

    """Klaviyo public API key."""
    publicApiKey: String!
}

"""Autogenerated return type of KlaviyoSettingsCreateOrUpdateMutation."""
type KlaviyoSettingsCreateOrUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    klaviyoSettings: KlaviyoSettings
    status: Int!
}

"""Autogenerated input type of KlaviyoSettingsDeleteMutation"""
input KlaviyoSettingsDeleteMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
}

"""Autogenerated return type of KlaviyoSettingsDeleteMutation."""
type KlaviyoSettingsDeleteMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    klaviyoSettings: KlaviyoSettings
    status: Int!
}

"""Line items associated with a cart or order."""
type LineItem implements Node {
    """Adjustments applied to the line item"""
    adjustments: [Adjustment!]

    """The advertisement of the item being purchased."""
    advert: Advert @deprecated(reason: "Since this can change after the order is created, you should use the copied values")

    """The advert code captured at the time of invoice creation"""
    advertCode: String

    """The advert id captured at the time of invoice creation"""
    advertId: ID

    """The advert legacyId captured at the time of invoice creation"""
    advertLegacyId: Int

    """The advert title captured at the time of invoice creation"""
    advertTitle: String

    """Brand name for the line item"""
    brandName: String

    """Commission amount Denominated in cents."""
    commissionAmountCents: Int

    """Commission amount In string with currency symbol."""
    commissionAmountFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """Total commission tax amount for the line item Denominated in cents."""
    commissionAmountTaxCents: Int

    """
    Total commission tax amount for the line item In string with currency symbol.
    """
    commissionAmountTaxFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """Commission percentage used to calculate the commission amount"""
    commissionRate: String

    """Commission tax rate set in invoice"""
    commissionTaxRate: Float

    """
    The discount applied to the item. Negative value. Denominated in cents.
    """
    discountCents: Int!

    """
    The discount applied to the item. Negative value. In string with currency symbol.
    """
    discountFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!
    externalIds: [ExternalID!]!
    id: ID!
    image: Image
    inventory: Inventory

    """Total cost per item. Denominated in cents."""
    itemAmountCents: Int!

    """Total cost per item. In string with currency symbol."""
    itemAmountFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!
    legacyId: Int!

    """Merchant fee tax rate set in invoice"""
    merchantFeesTaxRate: Float

    """Metadata key/values"""
    metadata: [Metadatum!]!

    """The postage total on the item(s). Denominated in cents."""
    postageCents: Int!

    """The postage total on the item(s). In string with currency symbol."""
    postageFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """Postage tax rate"""
    postageTaxRate: Float

    """The pricing model of the line item"""
    pricingModel: PricingModelEnum!
    quantity: Int!
    quantityAwaitingDispatch: Int

    """Quantity that has been dispatched that is available for refund."""
    quantityReturnable: Int!

    """
    Deprecated: As of Feb 2021 in favour of shipments field (collection of all
    associated shipments). Returns the most recent shipment associated with this line item
    """
    shipment: Shipment
    shipments: [Shipment!]

    """Status of the line item. It is suggested to use statusFull"""
    status: LineItemStatusEnum!

    """A fuller featured status that includes shipping statuses"""
    statusFull: LineItemStatusFullEnum!

    """
    The item subtotal, excluding discounts and postage. Tax is included for tax inclusive marketplaces. Denominated in cents.
    """
    subtotalCents: Int!

    """
    The item subtotal, excluding discounts and postage. Tax is included for tax
    inclusive marketplaces. In string with currency symbol.
    """
    subtotalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """Line item tax rate"""
    taxRate: Float

    """The tax on the item. Denominated in cents."""
    taxTotalCents: Int!

    """The tax on the item. In string with currency symbol."""
    taxTotalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """
    Total cost of the items, which includes subtotals and cost of shipping if applicable. Denominated in cents.
    """
    totalCents: Int!

    """
    Total cost of the items, which includes subtotals and cost of shipping if applicable. In string with currency symbol.
    """
    totalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """The product variant that is being purchased."""
    variant: Variant @deprecated(reason: "Since this can change after the order is created, you should use the copied values")

    """The variant barcode captured at the time of invoice creation"""
    variantBarcode: String

    """The variant id captured at the time of invoice creation"""
    variantId: ID

    """The variant legacyId captured at the time of invoice creation"""
    variantLegacyId: Int

    """The variant description captured at the time of invoice creation"""
    variantName: String

    """The variant sku captured at the time of invoice creation"""
    variantSku: String

    """The wholesale price of the line item"""
    wholesalePrice: Decimal
}

"""The connection type for LineItem."""
type LineItemConnection {
    """A list of edges."""
    edges: [LineItemEdge]

    """A list of nodes."""
    nodes: [LineItem]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type LineItemEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: LineItem
}

"""Line items associated with a cart or order."""
input LineItemInput {
    """Adjustments to be applied to the line item."""
    adjustments: [AdjustmentInput!]

    """
    Total cost of the item, which includes subtotals but excludes shipping
    (postage). Please ensure that the amount entered is equal to the Line Item
    Unit Price x Quantity
    """
    cost: MoneyInputField

    """Delivery type."""
    deliveryType: DeliveryTypeEnum = BUY_ONLINE

    """IDs used by external systems to fetch LineItems"""
    externalIds: [KeyValueInput!]

    """
    ID of the inventory for this line item/variant.The variant associated with this inventory must match `variantId`
    """
    inventoryId: ID

    """Metadata key/value pairs {external_shipment_id: "SHIP111"}"""
    metadata: [KeyValueInput!]

    """Total cost of shipping the item."""
    postage: MoneyInputField

    """
    Deprecated as of March 2022, please use the postage input. Total cost of shipping the item. Denominated in cents.
    """
    postageCents: Int

    """Quantity of this item to be associated with the given order."""
    quantity: Int!

    """
    Deprecated as of March 2022, please use the cost input. Total cost of the
    item, which includes subtotals but excludes shipping (postage). Denominated in
    cents. Please ensure that the amount entered is equal to the Line Item Unit
    Price x Quantity
    """
    totalCents: Int

    """ID of the variant to become a line item."""
    variantId: ID!
}

"""
Autogenerated input type of LineItemsForShipmentsSpreadsheetDownloadMutation
"""
input LineItemsForShipmentsSpreadsheetDownloadMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    format: SpreadsheetEnum = XLSX
    sellerId: ID = null
}

"""
Autogenerated return type of LineItemsForShipmentsSpreadsheetDownloadMutation.
"""
type LineItemsForShipmentsSpreadsheetDownloadMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    export: ImportExport
    status: Int!
}

"""
Autogenerated input type of LineItemsForShipmentsSpreadsheetUploadMutation
"""
input LineItemsForShipmentsSpreadsheetUploadMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """
    ID of the seller. May be omitted if using a seller api key, but is required otherwise
    """
    sellerId: ID
    spreadsheet: FileInput!
}

"""
Autogenerated return type of LineItemsForShipmentsSpreadsheetUploadMutation.
"""
type LineItemsForShipmentsSpreadsheetUploadMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    import: ImportExport
    status: Int!
}

"""All possible statuses for line items."""
enum LineItemStatusEnum {
    """Associated with an active, mutable cart."""
    NEW

    """Associated with a finalized, immutable order."""
    ALLOCATED

    """A purchased item for which the user has received a refund."""
    REFUNDED

    """Associated with an order that has been cancelled."""
    CANCELLED
}

"""All possible statuses for line items."""
enum LineItemStatusFullEnum {
    """Associated with an active, mutable cart."""
    NEW

    """Associated with a finalized, immutable order."""
    ALLOCATED

    """A purchased item which has been shipped to the user."""
    SHIPPED

    """A purchased item for which the user has received a refund."""
    REFUNDED

    """Associated with an order that has been cancelled."""
    CANCELLED
}

"""Location object returned with location-based search results."""
type Location {
    countryCode: String!
    displayName: String!

    """Display name with postcode in countries with duplicated locations"""
    displayNameFull: String!

    """Multiple locations with same name within region?"""
    duplicated: Boolean!
    locationName: String!
    locationSlug: String
    postalCode: String
    regionName: String!
    regionShort: String!
    regionSlug: String!
}

"""Loyalty program levels"""
type LoyaltyProgramLevel {
    id: ID!

    """Loyalty program levels name"""
    name: String!
}

"""The connection type for LoyaltyProgramLevel."""
type LoyaltyProgramLevelsConnection {
    """A list of edges."""
    edges: [LoyaltyProgramLevelsEdge]

    """A list of nodes."""
    nodes: [LoyaltyProgramLevel]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type LoyaltyProgramLevelsEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: LoyaltyProgramLevel
}

type Mapping implements Node {
    advertCount: Int!
    adverts(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): AdvertsConnection!
    autoMapScore: Float
    id: ID!
    mappedTo: MapToUnion
    mappedType: MappingTypeEnum!
    prototype: Prototype
    sourceValue: String!
    suggestions(
        """Limit to the first N results"""
        first: Int = 5
    ): [SuggestionsUnion!]
    unmappable: Boolean!
}

"""Unfiltered counts"""
type MappingCount {
    brand: Int!
    optionValue: Int!
    taxon: Int!
}

"""An edge in a connection."""
type MappingEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: Mapping
}

input MappingFilters {
    autoMapped: Boolean
    hasAffectedAdverts: Boolean
    mapped: Boolean
    mappedType: MappingTypeEnum
    maxAutoMapScore: Float
    minAutoMapScore: Float

    """Filter by product id or source value"""
    q: String
    unmappable: Boolean
}

"""The connection type for Mapping."""
type MappingsConnection {
    """A list of edges."""
    edges: [MappingEdge]

    """A list of nodes."""
    nodes: [Mapping]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!

    """Unfiltered counts"""
    unfilteredCounts: MappingCount
}

"""Autogenerated input type of MappingSetMutation"""
input MappingSetMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    mappingId: ID!
    mapToId: ID = null
    unmappable: Boolean = false
}

"""Autogenerated return type of MappingSetMutation."""
type MappingSetMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    mapping: Mapping
    status: Int!
}

enum MappingTypeEnum {
    BRAND
    TAXON
    OPTION_VALUE
}

union MapToUnion = Brand | OptionValue | Taxon

"""A menu entry with markdown contents"""
type Markdown implements Node {
    id: ID!

    """Raw markdown for entry detail"""
    markdown: String!

    """Presentational name of the entry"""
    name: String!
}

"""Marketfacer pages enabled flags"""
type MarketfacerPagesEnabled {
    directory: Boolean!
    search: Boolean!
    shop: Boolean!
}

"""Marketplacer API key info"""
type MarketplacerAPIKey {
    """The date the API key was created."""
    createdAt: ISO8601DateTime!

    """The user id of created API key"""
    createdById: Int!

    """The user type of created API key"""
    createdByType: String!
    description: String!
    id: ID!
    organization: String!
}

"""Autogenerated input type of MarketplacerAPIKeyCreateMutation"""
input MarketplacerAPIKeyCreateMutationInput {
    apiTermsOfUse: Boolean!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """description of API key"""
    description: String!
    organization: String!
}

"""Autogenerated return type of MarketplacerAPIKeyCreateMutation."""
type MarketplacerAPIKeyCreateMutationPayload {
    apiKey: String

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    marketplacerApiKey: MarketplacerAPIKey
    status: Int!
}

"""Measurement unit"""
type MeasurementUnit implements Node {
    """List of adverts implementing the measurement unit"""
    adverts(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): AdvertsConnection!

    """List of comparable variants implementing the measurement unit"""
    comparableVariants(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): VariantConnection!

    """When the record was created"""
    createdAt: ISO8601DateTime!
    id: ID!

    """The field that represents the measurement unit type"""
    measurementType: String!

    """Full name of measurement unit (eg: kilograms)"""
    name: String!

    """Short code for the measurement unit (eg: kg)"""
    short: String!

    """When the record was last updated"""
    updatedAt: ISO8601DateTime!

    """List of variants implementing the measurement unit"""
    variants(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): VariantConnection!
}

"""Member settings on marketplace"""
type MemberSettings {
    """True if advanced refunds flow is enabled."""
    advancedRefundsEnabled: Boolean!

    """
    Legacy Seller Portal is disabled for all Sellers. This will mean any links to the legacy portal will be redirected.
    """
    disableLegacySellerPortal: Boolean!

    """
    True if the business registration code of the seller should be hidden from view.
    """
    hideSellerBusinessRegistrationCode: Boolean!
    id: ID!

    """
    List of keys that can be used to set line item metadata on an invoice line item.
    """
    lineItemMetadataExposed: [String!]!

    """ExternalIDs set on the order at creation through the API."""
    orderExternalIdsExposed: [String!]!
}

"""Autogenerated input type of MetadataUpsertMutation"""
input MetadataUpsertMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Name of the remote system for the ID, eg. 'my_system'"""
    key: String!

    """ID of the local object to link"""
    owner: ID!

    """ID on the remote system"""
    value: String!
}

"""Autogenerated return type of MetadataUpsertMutation."""
type MetadataUpsertMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    metadata: Metadatum
    status: Int!
}

"""Metadata key value tuples"""
type Metadatum {
    createdAt: ISO8601DateTime!
    key: String!
    updatedAt: ISO8601DateTime!
    value: String!
}

"""Product model"""
type Model implements Node {
    id: ID!
    name: String!

    """
    The URL subpath associated with the given model.
    Mostly used for building URLs for product search results.
    """
    slug: String!
    year: Int
}

"""
Minimal subset of Model type which can be used to build a
model filter for advert search
"""
type ModelFilterOption {
    """The number of adverts associated with each model filter option"""
    count: Int!
    id: ID!
    name: String!

    """
    The URL subpath associated with the given model.
    Mostly used for building URLs for product search results.
    """
    slug: String!
}

"""A monetary value with currency"""
type Money {
    amount: Decimal!
    currencyCode: String!
    formatted(currency: String, disambiguate: Boolean = false): String!
}

"""
Money input field where values are usually specified in the lowest currency
denomination (e.g. cents), unless otherwise specified.
"""
input MoneyInputField {
    """The amount. Denominated in lowest currency value, e.g. Cents."""
    amount: Int!

    """
    The tax on the amount. Denominated in lowest currency value, e.g. Cents.
    """
    tax: Int

    """
    The decimal value tax rate for this line item. If not supplied, will be
    fetched from the associated variant, advert, category, Finance Settings or country.
    """
    taxRate: Float
}

"""A branch of a store with multiple locations."""
type MultiStore {
    """Show the parent store info"""
    showParentInfo: Boolean!
}

"""The child of a managed multi store."""
type MultiStoreMembership {
    """Id of the parent multi store"""
    multiStoreId: Int!
}

"""Queries for modifying data in the database."""
type Mutation {
    """
    start a background job to download activity log data. Only accessible to operator admin users.
    """
    activityLogDownload(
        """Parameters for ActivityLogDownloadMutation"""
        input: ActivityLogDownloadMutationInput!
    ): ActivityLogDownloadMutationPayload

    """
    Initiate a username/password login for an administrator.

    May return a session token (in which case no further action is
    required to complete the login, and the session token can be
    used as an API key until it expires).

    May also return one or more multi-factor authentication (MFA)
    challenges. If it does, at least one MFA challenge needs to be
    successfully responded to in order to get the session token.

    NOTE: MFA Challenge is not yet implemented in this login, so if it is
    required, an error will be returned.
    """
    adminLoginUsername(
        """Parameters for AdminLoginUsernameMutation"""
        input: AdminLoginUsernameMutationInput!
    ): AdminLoginUsernameMutationPayload

    """
    Mark an existing advert as deleted. Only accessible to operator and seller admin users.
    """
    advertDelete(
        """Parameters for AdvertDeleteMutation"""
        input: AdvertDeleteMutationInput!
    ): AdvertDeleteMutationPayload

    """
    Updates the advert's published status. Only accessible to operator and seller admin users.
    """
    advertPublishedUpdate(
        """Parameters for AdvertPublishedUpdateMutation"""
        input: AdvertPublishedUpdateMutationInput!
    ): AdvertPublishedUpdateMutationPayload

    """
    start a background job to import adverts. Only accessible to operator and seller admin users.
    """
    advertSpreadsheetConfirmImport(
        """Parameters for AdvertSpreadsheetConfirmImportMutation"""
        input: AdvertSpreadsheetConfirmImportMutationInput!
    ): AdvertSpreadsheetConfirmImportMutationPayload

    """
    start a background job to download adverts. Only accessible to operator and seller admin users.
    """
    advertSpreadsheetDownload(
        """Parameters for AdvertSpreadsheetDownloadMutation"""
        input: AdvertSpreadsheetDownloadMutationInput!
    ): AdvertSpreadsheetDownloadMutationPayload

    """
    start a background job to upload adverts. Only accessible to operator and seller admin users.
    """
    advertSpreadsheetUpload(
        """Parameters for AdvertSpreadsheetUploadMutation"""
        input: AdvertSpreadsheetUploadMutationInput!
    ): AdvertSpreadsheetUploadMutationPayload

    """
    Create an Advert if no ID is passed, otherwise updates existing Advert. Only
    accessible to operator and seller admin users.
    """
    advertUpsert(
        """Parameters for AdvertUpsertMutation"""
        input: AdvertUpsertMutationInput!
    ): AdvertUpsertMutationPayload

    """
    Bulk approves products via vetting. Only accessible to operator admin users.
    """
    advertVettingApprove(input: AdvertVettingApproveInput!): AdvertVettingApproveMutationPayload

    """
    Bulk rejects products via vetting. Only accessible to operator admin users.
    """
    advertVettingReject(input: AdvertVettingRejectInput!): AdvertVettingRejectMutationPayload

    """
    Bulk resubmit adverts for vetting. Only accessible to operator and seller admin users.
    """
    advertVettingResubmit(input: AdvertVettingResubmitInput!): AdvertVettingResubmitMutationPayload

    """
    Create or update Adyen settings. Only accessible to operator admin users.
    """
    adyenSettingsCreateOrUpdate(
        """Parameters for AdyenSettingsCreateOrUpdateMutation"""
        input: AdyenSettingsCreateOrUpdateMutationInput!
    ): AdyenSettingsCreateOrUpdateMutationPayload

    """Delete Adyen settings. Only accessible to operator admin users."""
    adyenSettingsDelete(
        """Parameters for AdyenSettingsDeleteMutation"""
        input: AdyenSettingsDeleteMutationInput!
    ): AdyenSettingsDeleteMutationPayload

    """
    Create or update Afterpay settings. Only accessible to operator admin users.
    """
    afterpaySettingsCreateOrUpdate(
        """Parameters for AfterpaySettingsCreateOrUpdateMutation"""
        input: AfterpaySettingsCreateOrUpdateMutationInput!
    ): AfterpaySettingsCreateOrUpdateMutationPayload

    """Delete Afterpay settings. Only accessible to operator admin users."""
    afterpaySettingsDelete(
        """Parameters for AfterpaySettingsDeleteMutation"""
        input: AfterpaySettingsDeleteMutationInput!
    ): AfterpaySettingsDeleteMutationPayload

    """
    Attempt a payment in Billing Invoice. Only accessible to operator and seller admin users.
    """
    attemptBillingInvoicePayment(
        """Parameters for AttemptBillingInvoicePaymentMutation"""
        input: AttemptBillingInvoicePaymentMutationInput!
    ): AttemptBillingInvoicePaymentMutationPayload

    """
    start a background job to download billing history. Only accessible to operator and seller admin users.
    """
    billingHistoryDownload(
        """Parameters for BillingHistoryDownloadMutation"""
        input: BillingHistoryDownloadMutationInput!
    ): BillingHistoryDownloadMutationPayload

    """
    Create or update Braintree settings. Only accessible to operator admin users.
    """
    braintreeSettingsCreateOrUpdate(
        """Parameters for BraintreeSettingsCreateOrUpdateMutation"""
        input: BraintreeSettingsCreateOrUpdateMutationInput!
    ): BraintreeSettingsCreateOrUpdateMutationPayload

    """Delete Braintree settings. Only accessible to operator admin users."""
    braintreeSettingsDelete(
        """Parameters for BraintreeSettingsDeleteMutation"""
        input: BraintreeSettingsDeleteMutationInput!
    ): BraintreeSettingsDeleteMutationPayload

    """
    Cancel a billing record. Only accessible to operator and seller admin users.
    """
    cancelBillingInvoice(
        """Parameters for CancelBillingInvoiceMutation"""
        input: CancelBillingInvoiceMutationInput!
    ): CancelBillingInvoiceMutationPayload

    """Add an item to a order. Currently only supports product variants."""
    cartAddCartItem(
        """Parameters for CartAddCartItemMutation"""
        input: CartAddCartItemMutationInput!
    ): CartAddCartItemMutationPayload

    """Add an item to current session cart. Only supports product variants."""
    cartAddItem(
        """Parameters for CartAddItemMutation"""
        input: CartAddItemMutationInput!
    ): CartAddItemMutationPayload

    """
    Checkout a cart using the cart ID. This checkout can be used with Braintree
    payment provider and can only be used if Braintree is set up on the
    marketplace. Will receive order once cart has been processed successfully.
    """
    cartCheckout(
        """Parameters for CartCheckoutMutation"""
        input: CartCheckoutMutationInput!
    ): CartCheckoutMutationPayload

    """
    Create a mutable cart to keep track of items that a user maybe wants to purchase.
    """
    cartCreate(
        """Parameters for CartCreateMutation"""
        input: CartCreateMutationInput!
    ): CartCreateMutationPayload

    """Delete a cart."""
    cartDelete(
        """Parameters for CartDeleteMutation"""
        input: CartDeleteMutationInput!
    ): CartDeleteMutationPayload

    """Remove a line item from a cart."""
    cartRemoveCartItem(
        """Parameters for CartRemoveCartItemMutation"""
        input: CartRemoveCartItemMutationInput!
    ): CartRemoveCartItemMutationPayload

    """
    Update a mutable cart to keep track of items that a user maybe wants to purchase.
    """
    cartUpdate(
        """Parameters for CartUpdateMutation"""
        input: CartUpdateMutationInput!
    ): CartUpdateMutationPayload

    """Update cart item details for a cart."""
    cartUpdateCartItem(
        """Parameters for CartUpdateCartItemMutation"""
        input: CartUpdateCartItemMutationInput!
    ): CartUpdateCartItemMutationPayload

    """Create a Catalog Rule. Only accessible to operator admin users."""
    catalogRuleCreate(
        """Parameters for CatalogRuleCreateMutation"""
        input: CatalogRuleCreateMutationInput!
    ): CatalogRuleCreateMutationPayload

    """Delete a Catalog rule. Only accessible to operator admin users."""
    catalogRuleDelete(
        """Parameters for CatalogRuleDeleteMutation"""
        input: CatalogRuleDeleteMutationInput!
    ): CatalogRuleDeleteMutationPayload

    """Update a Catalog Rule. Only accessible to operator admin users."""
    catalogRuleUpdate(
        """Parameters for CatalogRuleUpdateMutation"""
        input: CatalogRuleUpdateMutationInput!
    ): CatalogRuleUpdateMutationPayload

    """
    Create a chat message between operator and seller. Only accessible to operator and seller admin users.
    """
    chatMessageCreate(
        """Parameters for ChatMessageCreateMutation"""
        input: ChatMessageCreateMutationInput!
    ): ChatMessageCreateMutationPayload

    """
    Mark a chat message as read. Only accessible to operator and seller admin users.
    """
    chatMessageRead(
        """Parameters for ChatMessageReadMutation"""
        input: ChatMessageReadMutationInput!
    ): ChatMessageReadMutationPayload

    """
    Updates status of invoice that have click_and_collect delivery type. Only accessible to operator and seller admin users.
    """
    clickAndCollectStatusUpdate(
        """Parameters for ClickAndCollectStatusUpdateMutation"""
        input: ClickAndCollectStatusUpdateMutationInput!
    ): ClickAndCollectStatusUpdateMutationPayload

    """Create a Commission Package. Only accessible to operator admin users."""
    commissionPackageCreate(
        """Parameters for CommissionPackageCreateMutation"""
        input: CommissionPackageCreateMutationInput!
    ): CommissionPackageCreateMutationPayload

    """
    Mark an existing commission package as deleted. Only accessible to operator admin users.
    """
    commissionPackageDelete(
        """Parameters for CommissionPackageDeleteMutation"""
        input: CommissionPackageDeleteMutationInput!
    ): CommissionPackageDeleteMutationPayload

    """
    Delete an existing commission package schedule. Only accessible to operator admin users.
    """
    commissionPackageScheduleDelete(
        """Parameters for CommissionPackageScheduleDeleteMutation"""
        input: CommissionPackageScheduleDeleteMutationInput!
    ): CommissionPackageScheduleDeleteMutationPayload

    """
    Start a background job to download a commission package schedule. Only accessible to operator admin users.
    """
    commissionPackageScheduleSpreadsheetDownload(
        """Parameters for CommissionPackageScheduleSpreadsheetDownloadMutation"""
        input: CommissionPackageScheduleSpreadsheetDownloadMutationInput!
    ): CommissionPackageScheduleSpreadsheetDownloadMutationPayload

    """
    Start a background job to upload a commission package schedule. Only accessible to operator admin users.
    """
    commissionPackageScheduleSpreadsheetUpload(
        """Parameters for CommissionPackageScheduleSpreadsheetUploadMutation"""
        input: CommissionPackageScheduleSpreadsheetUploadMutationInput!
    ): CommissionPackageScheduleSpreadsheetUploadMutationPayload

    """Update a commission package. Only accessible to operator admin users."""
    commissionPackageUpdate(
        """Parameters for CommissionPackageUpdateMutation"""
        input: CommissionPackageUpdateMutationInput!
    ): CommissionPackageUpdateMutationPayload

    """
    Creates a CustomField if no ID is passed, otherwise updates existing
    CustomField (note: CustomFieldGroup must be created prior to creating
    CustomField). Only accessible to operator admin users.
    """
    customFieldCreateOrUpdate(
        """Parameters for CustomFieldCreateOrUpdateMutation"""
        input: CustomFieldCreateOrUpdateMutationInput!
    ): CustomFieldCreateOrUpdateMutationPayload

    """
    Deletes an existing CustomField. Only accessible to operator admin users.
    """
    customFieldDelete(
        """Parameters for CustomFieldDeleteMutation"""
        input: CustomFieldDeleteMutationInput!
    ): CustomFieldDeleteMutationPayload

    """
    Creates a CustomFieldGroup if no ID is passed, otherwise updates existing
    CustomFieldGroup. Only accessible to operator admin users.
    """
    customFieldGroupCreateOrUpdate(
        """Parameters for CustomFieldGroupCreateOrUpdateMutation"""
        input: CustomFieldGroupCreateOrUpdateMutationInput!
    ): CustomFieldGroupCreateOrUpdateMutationPayload

    """
    Deletes an existing CustomFieldGroup and associated CustomFields. Only accessible to operator admin users.
    """
    customFieldGroupDelete(
        """Parameters for CustomFieldGroupDeleteMutation"""
        input: CustomFieldGroupDeleteMutationInput!
    ): CustomFieldGroupDeleteMutationPayload

    """
    Create an association between an existing Object (eg. Advert) and external IDs. Only accessible to operator admin users.
    """
    externalIdUpsert(
        """Parameters for ExternalIDUpsertMutation"""
        input: ExternalIDUpsertMutationInput!
    ): ExternalIDUpsertMutationPayload

    """
    Create or update Givex settings. Only accessible to operator admin users.
    """
    givexSettingsCreateOrUpdate(
        """Parameters for GivexSettingsCreateOrUpdateMutation"""
        input: GivexSettingsCreateOrUpdateMutationInput!
    ): GivexSettingsCreateOrUpdateMutationPayload

    """Delete Givex settings. Only accessible to operator admin users."""
    givexSettingsDelete(
        """Parameters for GivexSettingsDeleteMutation"""
        input: GivexSettingsDeleteMutationInput!
    ): GivexSettingsDeleteMutationPayload

    """Create a Golden Product. Only accessible to operator admin users."""
    goldenProductCreate(
        """Parameters for GoldenProductCreateMutation"""
        input: GoldenProductCreateMutationInput!
    ): GoldenProductCreateMutationPayload

    """Delete a Golden product. Only accessible to operator admin users."""
    goldenProductDelete(
        """Parameters for GoldenProductDeleteMutation"""
        input: GoldenProductDeleteMutationInput!
    ): GoldenProductDeleteMutationPayload

    """Update a Golden Product. Only accessible to operator admin users."""
    goldenProductUpdate(
        """Parameters for GoldenProductUpdateMutation"""
        input: GoldenProductUpdateMutationInput!
    ): GoldenProductUpdateMutationPayload

    """
    Create a golden product variant. Only accessible to operator admin users.
    """
    goldenProductVariantCreate(
        """Parameters for GoldenProductVariantCreateMutation"""
        input: GoldenProductVariantCreateMutationInput!
    ): GoldenProductVariantCreateMutationPayload

    """
    Delete a Golden product variant record. Only accessible to operator admin users.
    """
    goldenProductVariantDelete(
        """Parameters for GoldenProductVariantDeleteMutation"""
        input: GoldenProductVariantDeleteMutationInput!
    ): GoldenProductVariantDeleteMutationPayload

    """
    Link the provided variants to the golden product variants by appending to
    existing association. Also links the advert to the golden product if a link is
    not already established. Only accessible to operator admin users.
    """
    goldenProductVariantLinkVariants(
        """Parameters for GoldenProductVariantLinkVariantsMutation"""
        input: GoldenProductVariantLinkVariantsMutationInput!
    ): GoldenProductVariantLinkVariantsMutationPayload

    """
    Activates Golden product variants. Only accessible to operator admin users.
    """
    goldenProductVariantsActivate(
        """Parameters for GoldenProductVariantsActivateMutation"""
        input: GoldenProductVariantsActivateMutationInput!
    ): GoldenProductVariantsActivateMutationPayload

    """
    Deactivate Golden Product Variants. Only accessible to operator admin users.
    """
    goldenProductVariantsDeactivate(
        """Parameters for GoldenProductVariantsDeactivateMutation"""
        input: GoldenProductVariantsDeactivateMutationInput!
    ): GoldenProductVariantsDeactivateMutationPayload

    """
    Unlink the provided variants from the golden product variant. Only accessible to operator admin users.
    """
    goldenProductVariantUnlinkVariants(
        """Parameters for GoldenProductVariantUnlinkVariantsMutation"""
        input: GoldenProductVariantUnlinkVariantsMutationInput!
    ): GoldenProductVariantUnlinkVariantsMutationPayload

    """
    Update a golden product variant. Only accessible to operator admin users.
    """
    goldenProductVariantUpdate(
        """Parameters for GoldenProductVariantUpdateMutation"""
        input: GoldenProductVariantUpdateMutationInput!
    ): GoldenProductVariantUpdateMutationPayload

    """
    Upload an image to be attached elsewhere. Only accessible to operator and seller admin users.
    """
    imageUpload(
        """Parameters for ImageUploadMutation"""
        input: ImageUploadMutationInput!
    ): ImageUploadMutationPayload

    """
    Create an inquiry to the seller. Only accessible to operator admin users.
    """
    inquiryCreate(
        """Parameters for InquiryCreateMutation"""
        input: InquiryCreateMutationInput!
    ): InquiryCreateMutationPayload

    """Create an invoice amendment. Only accessible to operator admin users."""
    invoiceAmendmentCreate(
        """Parameters for InvoiceAmendmentCreateMutation"""
        input: InvoiceAmendmentCreateMutationInput!
    ): InvoiceAmendmentCreateMutationPayload

    """Annotate an invoice."""
    invoiceAnnotationCreate(
        """Parameters for InvoiceAnnotationCreateMutation"""
        input: InvoiceAnnotationCreateMutationInput!
    ): InvoiceAnnotationCreateMutationPayload

    """Resolve an invoice annotation."""
    invoiceAnnotationResolve(
        """Parameters for InvoiceAnnotationResolveMutation"""
        input: InvoiceAnnotationResolveMutationInput!
    ): InvoiceAnnotationResolveMutationPayload

    """
    Create an invoice annotation type. Only accessible to operator admin users.
    """
    invoiceAnnotationTypeCreate(
        """Parameters for InvoiceAnnotationTypeCreateMutation"""
        input: InvoiceAnnotationTypeCreateMutationInput!
    ): InvoiceAnnotationTypeCreateMutationPayload

    """
    Discard an invoice annotation type. Only accessible to operator admin users.
    """
    invoiceAnnotationTypeDiscard(
        """Parameters for InvoiceAnnotationTypeDiscardMutation"""
        input: InvoiceAnnotationTypeDiscardMutationInput!
    ): InvoiceAnnotationTypeDiscardMutationPayload

    """
    Update an invoice annotation type. Only accessible to operator admin users.
    """
    invoiceAnnotationTypeUpdate(
        """Parameters for InvoiceAnnotationTypeUpdateMutation"""
        input: InvoiceAnnotationTypeUpdateMutationInput!
    ): InvoiceAnnotationTypeUpdateMutationPayload

    """Update an invoice annotation."""
    invoiceAnnotationUpdate(
        """Parameters for InvoiceAnnotationUpdateMutation"""
        input: InvoiceAnnotationUpdateMutationInput!
    ): InvoiceAnnotationUpdateMutationPayload

    """
    Create or update Klaviyo settings. Only accessible to operator admin users.
    """
    klaviyoSettingsCreateOrUpdate(
        """Parameters for KlaviyoSettingsCreateOrUpdateMutation"""
        input: KlaviyoSettingsCreateOrUpdateMutationInput!
    ): KlaviyoSettingsCreateOrUpdateMutationPayload

    """Delete Klaviyo settings. Only accessible to operator admin users."""
    klaviyoSettingsDelete(
        """Parameters for KlaviyoSettingsDeleteMutation"""
        input: KlaviyoSettingsDeleteMutationInput!
    ): KlaviyoSettingsDeleteMutationPayload

    """
    start a background job to download line items that have not yet been shipped.
    Only accessible to operator and seller admin users.
    """
    lineItemsForShipmentsSpreadsheetDownload(
        """Parameters for LineItemsForShipmentsSpreadsheetDownloadMutation"""
        input: LineItemsForShipmentsSpreadsheetDownloadMutationInput!
    ): LineItemsForShipmentsSpreadsheetDownloadMutationPayload

    """
    start a background job to bulk dispatch line items. Only accessible to operator and seller admin users.
    """
    lineItemsForShipmentsSpreadsheetUpload(
        """Parameters for LineItemsForShipmentsSpreadsheetUploadMutation"""
        input: LineItemsForShipmentsSpreadsheetUploadMutationInput!
    ): LineItemsForShipmentsSpreadsheetUploadMutationPayload

    """Logs a user out, based on a session cookie."""
    logOut(
        """Parameters for UserLogOutMutation"""
        input: UserLogOutMutationInput!
    ): UserLogOutMutationPayload

    """
    Set the mapping value. Only accessible to operator and seller admin users.
    """
    mappingSet(
        """Parameters for MappingSetMutation"""
        input: MappingSetMutationInput!
    ): MappingSetMutationPayload

    """Generate API keys. Only accessible to operator and seller admin users."""
    marketplacerApiKeyCreate(
        """Parameters for MarketplacerAPIKeyCreateMutation"""
        input: MarketplacerAPIKeyCreateMutationInput!
    ): MarketplacerAPIKeyCreateMutationPayload

    """
    Create an association between an existing Object (eg. Order/Invoice/Seller)
    and Metadata. Only accessible to operator admin users.
    """
    metadataUpsert(
        """Parameters for MetadataUpsertMutation"""
        input: MetadataUpsertMutationInput!
    ): MetadataUpsertMutationPayload

    """Subscribe the given email to the marketing newsletter."""
    newsletterSubscribe(
        """Parameters for NewsletterSubscribeMutation"""
        input: NewsletterSubscribeMutationInput!
    ): NewsletterSubscribeMutationPayload

    """
    Create an OptionType if no ID is passed, otherwise updates existing Prototype. Only accessible to operator admin users.
    """
    optionTypeCreateOrUpdate(
        """Parameters for OptionTypeCreateOrUpdateMutation"""
        input: OptionTypeCreateOrUpdateMutationInput!
    ): OptionTypeCreateOrUpdateMutationPayload

    """
    Create an OptionValue if no ID is passed, otherwise updates existing OptionValue. Only accessible to operator admin users.
    """
    optionValueCreateOrUpdate(
        """Parameters for OptionValueCreateOrUpdateMutation"""
        input: OptionValueCreateOrUpdateMutationInput!
    ): OptionValueCreateOrUpdateMutationPayload

    """
    Delete an existing OptionValue. Only accessible to operator admin users.
    """
    optionValueDelete(
        """Parameters for OptionValueDeleteMutation"""
        input: OptionValueDeleteMutationInput!
    ): OptionValueDeleteMutationPayload

    """Create an order. Only accessible to operator admin users."""
    orderCreate(
        """Parameters for OrderCreateMutation"""
        input: OrderCreateMutationInput!
    ): OrderCreateMutationPayload

    """
    start a background job to download order history. Only accessible to operator and seller admin users.
    """
    orderHistoryDownload(
        """Parameters for OrderHistoryDownloadMutation"""
        input: OrderHistoryDownloadMutationInput!
    ): OrderHistoryDownloadMutationPayload

    """Update a finalized order. Only accessible to operator admin users."""
    orderUpdate(
        """Parameters for OrderUpdateMutation"""
        input: OrderUpdateMutationInput!
    ): OrderUpdateMutationPayload

    """
    Create a partner integration toggle event. Only accessible to operator and seller admin users.
    """
    partnerIntegrationToggleEventCreate(
        """Parameters for PartnerIntegrationToggleEventCreateMutation"""
        input: PartnerIntegrationToggleEventCreateMutationInput!
    ): PartnerIntegrationToggleEventCreateMutationPayload

    """Resets password for a user or admin."""
    passwordReset(
        """Parameters for PasswordResetMutation"""
        input: PasswordResetMutationInput!
    ): PasswordResetMutationPayload

    """Create a payment method. Only accessible to operator admin users."""
    paymentMethodCreate(
        """Parameters for PaymentMethodCreateMutation"""
        input: PaymentMethodCreateMutationInput!
    ): PaymentMethodCreateMutationPayload

    """Delete a payment method. Only accessible to operator admin users."""
    paymentMethodDelete(
        """Parameters for PaymentMethodDeleteMutation"""
        input: PaymentMethodDeleteMutationInput!
    ): PaymentMethodDeleteMutationPayload

    """
    Create or update PayPal Commerce settings. Only accessible to operator admin users.
    """
    paypalCommerceSettingsCreateOrUpdate(
        """Parameters for PaypalCommerceSettingsCreateOrUpdateMutation"""
        input: PaypalCommerceSettingsCreateOrUpdateMutationInput!
    ): PaypalCommerceSettingsCreateOrUpdateMutationPayload

    """
    Delete PayPal Commerce settings. Only accessible to operator admin users.
    """
    paypalCommerceSettingsDelete(
        """Parameters for PaypalCommerceSettingsDeleteMutation"""
        input: PaypalCommerceSettingsDeleteMutationInput!
    ): PaypalCommerceSettingsDeleteMutationPayload

    """
    Confirm an order using order ID. This order confirmation is used only for
    redirect based payment providers such as Afterpay, Zip. Will receive order
    once order has been processed successfully.
    """
    processPaymentGatewayRedirect(
        """Parameters for ProcessPaymentGatewayRedirectMutation"""
        input: ProcessPaymentGatewayRedirectMutationInput!
    ): ProcessPaymentGatewayRedirectMutationPayload

    """
    Create or update a promotion. Only accessible to operator and seller admin users.
    """
    promotionUpsert(
        """Parameters for PromotionUpsertMutation"""
        input: PromotionUpsertMutationInput!
    ): PromotionUpsertMutationPayload

    """
    Create a Prototype if no ID is passed, otherwise updates existing Prototype. Only accessible to operator admin users.
    """
    prototypeCreateOrUpdate(
        """Parameters for PrototypeCreateOrUpdateMutation"""
        input: PrototypeCreateOrUpdateMutationInput!
    ): PrototypeCreateOrUpdateMutationPayload

    """
    Purge the sensitive user data from an order. Only accessible to operator admin users.
    """
    purgeOrderData(
        """Parameters for PurgeOrderDataMutation"""
        input: PurgeOrderDataMutationInput!
    ): PurgeOrderDataMutationPayload

    """Delete a ranked result. Only accessible to operator admin users."""
    rankedResultDelete(
        """Parameters for RankedResultDeleteMutation"""
        input: RankedResultDeleteMutationInput!
    ): RankedResultDeleteMutationPayload

    """Upsert a ranked result. Only accessible to operator admin users."""
    rankedResultUpsert(
        """Parameters for RankedResultUpsertMutation"""
        input: RankedResultUpsertMutationInput!
    ): RankedResultUpsertMutationPayload

    """Approve the refund request. Only accessible to operator admin users."""
    refundRequestApprove(input: RefundRequestApproveInput!): RefundRequestApproveMutationPayload

    """
    Create a refund request. Only accessible to operator and seller admin users.
    """
    refundRequestCreate(
        """Parameters for RefundRequestCreateMutation"""
        input: RefundRequestCreateMutationInput!
    ): RefundRequestCreateMutationPayload

    """Deny a refund request. Only accessible to operator admin users."""
    refundRequestDeny(
        """Parameters for RefundRequestDenyMutation"""
        input: RefundRequestDenyMutationInput!
    ): RefundRequestDenyMutationPayload

    """
    Accept the refund request line item. Only accessible to operator and seller admin users.
    """
    refundRequestLineItemAccept(
        """Parameters for RefundRequestLineItemAcceptMutation"""
        input: RefundRequestLineItemAcceptMutationInput!
    ): RefundRequestLineItemAcceptMutationPayload

    """
    Deny the refund request line item. Only accessible to operator and seller admin users.
    """
    refundRequestLineItemDeny(
        """Parameters for RefundRequestLineItemDenyMutation"""
        input: RefundRequestLineItemDenyMutationInput!
    ): RefundRequestLineItemDenyMutationPayload

    """
    Return the refund request line item. Only accessible to operator and seller admin users.
    """
    refundRequestLineItemReturn(
        """Parameters for RefundRequestLineItemReturnMutation"""
        input: RefundRequestLineItemReturnMutationInput!
    ): RefundRequestLineItemReturnMutationPayload

    """Refund a refund request. Only accessible to operator admin users."""
    refundRequestRefund(
        """Parameters for RefundRequestRefundMutation"""
        input: RefundRequestRefundMutationInput!
    ): RefundRequestRefundMutationPayload

    """
    Mark a refund request as having been returned. Only accessible to operator and seller admin users.
    """
    refundRequestReturn(
        """Parameters for RefundRequestReturnMutation"""
        input: RefundRequestReturnMutationInput!
    ): RefundRequestReturnMutationPayload

    """
    Revert a refund request denial. Only accessible to operator admin users.
    """
    refundRequestRevertDenial(
        """Parameters for RefundRequestRevertDenialMutation"""
        input: RefundRequestRevertDenialMutationInput!
    ): RefundRequestRevertDenialMutationPayload

    """
    start a background job to download refund requests. Only accessible to operator and seller admin users.
    """
    refundRequestSpreadsheetDownload(
        """Parameters for RefundRequestSpreadsheetDownloadMutation"""
        input: RefundRequestSpreadsheetDownloadMutationInput!
    ): RefundRequestSpreadsheetDownloadMutationPayload

    """Update Remittance Advice. Only accessible to operator admin users."""
    remittanceAdviceUpdate(
        """Parameters for RemittanceAdviceUpdateMutation"""
        input: RemittanceAdviceUpdateMutationInput!
    ): RemittanceAdviceUpdateMutationPayload

    """Remittances Release. Only accessible to operator admin users."""
    remittancesRelease(
        """Parameters for RemittancesReleaseMutation"""
        input: RemittancesReleaseMutationInput!
    ): RemittancesReleaseMutationPayload

    """Sends a reset password email to the logged in user."""
    resetUserPassword(
        """Parameters for ResetUserPasswordMutation"""
        input: ResetUserPasswordMutationInput!
    ): ResetUserPasswordMutationPayload

    """
    Create a return shipment for a refund request. Only accessible to operator and seller admin users.
    """
    returnShipmentCreate(
        """Parameters for ReturnShipmentCreateMutation"""
        input: ReturnShipmentCreateMutationInput!
    ): ReturnShipmentCreateMutationPayload

    """
    Update a return shipment for a refund request. Only accessible to operator and seller admin users.
    """
    returnShipmentUpdate(
        """Parameters for ReturnShipmentUpdateMutation"""
        input: ReturnShipmentUpdateMutationInput!
    ): ReturnShipmentUpdateMutationPayload

    """
    Updates adyen billing payment method for seller. Only accessible to operator and seller admin users.
    """
    sellerAdyenBillingPaymentMethodUpdate(
        """Parameters for SellerAdyenBillingPaymentMethodUpdateMutation"""
        input: SellerAdyenBillingPaymentMethodUpdateMutationInput!
    ): SellerAdyenBillingPaymentMethodUpdateMutationPayload

    """
    Updates braintree billing payment method for seller. Only accessible to operator and seller admin users.
    """
    sellerBraintreeBillingPaymentMethodUpdate(
        """Parameters for SellerBraintreeBillingPaymentMethodUpdateMutation"""
        input: SellerBraintreeBillingPaymentMethodUpdateMutationInput!
    ): SellerBraintreeBillingPaymentMethodUpdateMutationPayload

    """
    Create prospective seller accounts. Only accessible to operator admin users.
    """
    sellerCreate(
        """Parameters for SellerCreateMutation"""
        input: SellerCreateMutationInput!
    ): SellerCreateMutationPayload

    """
    Sends an invoice to the customer. Only accessible to operator and seller admin users.
    """
    sellerSendInvoiceToCustomer(
        """Parameters for SellerSendInvoiceToCustomerMutation"""
        input: SellerSendInvoiceToCustomerMutationInput!
    ): SellerSendInvoiceToCustomerMutationPayload

    """
    Download seller sla metrics as a csv file. Only accessible to operator admin users.
    """
    sellerSlaExportMetricMutation(
        """Parameters for SellerSlaExportMetricMutation"""
        input: SellerSlaExportMetricMutationInput!
    ): SellerSlaExportMetricMutationPayload

    """
    Update a seller. Requires an authenticated user to use mutation. Only accessible to operator and seller admin users.
    """
    sellerUpdate(
        """Parameters for SellerUpdateMutation"""
        input: SellerUpdateMutationInput!
    ): SellerUpdateMutationPayload

    """
    Create or update SendGrid settings. Only accessible to operator admin users.
    """
    sendgridSettingsCreateOrUpdate(
        """Parameters for SendgridSettingsCreateOrUpdateMutation"""
        input: SendgridSettingsCreateOrUpdateMutationInput!
    ): SendgridSettingsCreateOrUpdateMutationPayload

    """Delete SendGrid settings. Only accessible to operator admin users."""
    sendgridSettingsDelete(
        """Parameters for SendgridSettingsDeleteMutation"""
        input: SendgridSettingsDeleteMutationInput!
    ): SendgridSettingsDeleteMutationPayload

    """Updates the user session with location information."""
    sessionLocationInformationUpdateMutation(
        """Parameters for SessionLocationInformationUpdateMutation"""
        input: SessionLocationInformationUpdateMutationInput!
    ): SessionLocationInformationUpdateMutationPayload

    """
    Logs a user out, based on a session token. Only accessible to operator and seller admin users.
    """
    sessionTokenLogOut(
        """Parameters for SessionTokenLogOutMutation"""
        input: SessionTokenLogOutMutationInput!
    ): SessionTokenLogOutMutationPayload

    """
    Create an address to ship items from. Only accessible to operator and seller admin users.
    """
    shipmentAddressCreate(
        """Parameters for ShipmentAddressCreateMutation"""
        input: ShipmentAddressCreateMutationInput!
    ): ShipmentAddressCreateMutationPayload

    """
    Change the sort order for a retailer's shipment addresses. Only accessible to operator and seller admin users.
    """
    shipmentAddressSort(
        """Parameters for ShipmentAddressSortMutation"""
        input: ShipmentAddressSortMutationInput!
    ): ShipmentAddressSortMutationPayload

    """Create a shipment. Only accessible to operator and seller admin users."""
    shipmentCreate(
        """Parameters for ShipmentCreateMutation"""
        input: ShipmentCreateMutationInput!
    ): ShipmentCreateMutationPayload

    """
    Add a status to the shipment status log. Only accessible to operator and seller admin users.
    """
    shipmentStatusCreate(
        """Parameters for ShipmentStatusCreateMutation"""
        input: ShipmentStatusCreateMutationInput!
    ): ShipmentStatusCreateMutationPayload

    """Update a shipment. Only accessible to operator and seller admin users."""
    shipmentUpdate(
        """Parameters for ShipmentUpdateMutation"""
        input: ShipmentUpdateMutationInput!
    ): ShipmentUpdateMutationPayload

    """
    Mark an existing shipping as deleted. Only accessible to operator and seller admin users.
    """
    shippingOptionDelete(
        """Parameters for ShippingOptionDeleteMutation"""
        input: ShippingOptionDeleteMutationInput!
    ): ShippingOptionDeleteMutationPayload

    """
    Create or update shipping rules. Only accessible to operator and seller admin users.
    """
    shippingOptionUpsert(
        """Parameters for ShippingOptionUpsertMutation"""
        input: ShippingOptionUpsertMutationInput!
    ): ShippingOptionUpsertMutationPayload

    """
    Create or Update Shipping Rates. Only accessible to operator and seller admin users.
    """
    shippingRateCreateOrUpdate(
        """Parameters for ShippingRateCreateOrUpdateMutation"""
        input: ShippingRateCreateOrUpdateMutationInput!
    ): ShippingRateCreateOrUpdateMutationPayload

    """
    Delete a shipping rate. Only accessible to operator and seller admin users.
    """
    shippingRateDelete(
        """Parameters for ShippingRateDeleteMutation"""
        input: ShippingRateDeleteMutationInput!
    ): ShippingRateDeleteMutationPayload

    """
    Create or Update Shipping Zones. Only accessible to operator and seller admin users.
    """
    shippingZoneCreateOrUpdate(
        """Parameters for ShippingZoneCreateOrUpdateMutation"""
        input: ShippingZoneCreateOrUpdateMutationInput!
    ): ShippingZoneCreateOrUpdateMutationPayload

    """
    Delete a shipping zone. Only accessible to operator and seller admin users.
    """
    shippingZoneDelete(
        """Parameters for ShippingZoneDeleteMutation"""
        input: ShippingZoneDeleteMutationInput!
    ): ShippingZoneDeleteMutationPayload

    """
    start a background job to download shipping zone postcodes. Only accessible to operator and seller admin users.
    """
    shippingZoneSpreadsheetDownload(
        """Parameters for ShippingZoneSpreadsheetDownloadMutation"""
        input: ShippingZoneSpreadsheetDownloadMutationInput!
    ): ShippingZoneSpreadsheetDownloadMutationPayload

    """
    Update Shippit API credentials. Only accessible to operator and seller admin users.
    """
    shippitCredentialsUpsert(
        """Parameters for ShippitCredentialsUpsertMutation"""
        input: ShippitCredentialsUpsertMutationInput!
    ): ShippitCredentialsUpsertMutationPayload

    """
    start a background job to download stock levels. Only accessible to operator and seller admin users.
    """
    stockLevelsSpreadsheetDownload(
        """Parameters for StockLevelsSpreadsheetDownloadMutation"""
        input: StockLevelsSpreadsheetDownloadMutationInput!
    ): StockLevelsSpreadsheetDownloadMutationPayload

    """
    start a background job to update stock levels of variants or inventories. Only
    accessible to operator and seller admin users.
    """
    stockLevelsSpreadsheetUpload(
        """Parameters for StockLevelsSpreadsheetUploadMutation"""
        input: StockLevelsSpreadsheetUploadMutationInput!
    ): StockLevelsSpreadsheetUploadMutationPayload

    """Create or update tax codes. Only accessible to operator admin users."""
    taxCodeCreateOrUpdate(
        """Parameters for TaxCodeCreateOrUpdateMutation"""
        input: TaxCodeCreateOrUpdateMutationInput!
    ): TaxCodeCreateOrUpdateMutationPayload

    """
    Create a Taxon if no ID is passed, otherwise updates existing Taxon. Only accessible to operator admin users.
    """
    taxonCreateOrUpdate(
        """Parameters for TaxonCreateOrUpdateMutation"""
        input: TaxonCreateOrUpdateMutationInput!
    ): TaxonCreateOrUpdateMutationPayload

    """
    Create a mutable user. Only primary user for a seller can perform this. Only
    accessible to operator and seller admin users.
    """
    userCreate(
        """Parameters for UserCreateMutation"""
        input: UserCreateMutationInput!
    ): UserCreateMutationPayload

    """Updates the session currency."""
    userCurrencySelect(
        """Parameters for UserCurrencySelectMutation"""
        input: UserCurrencySelectMutationInput!
    ): UserCurrencySelectMutationPayload

    """
    Delete a mutable user. Only primary user for a seller can perform this. Only
    accessible to operator and seller admin users.
    """
    userDelete(
        """Parameters for UserDeleteMutation"""
        input: UserDeleteMutationInput!
    ): UserDeleteMutationPayload

    """
    Initiate a token login for a seller.

    Returns a session token which can be used as an API key until it
    expires).
    """
    userLoginToken(
        """Parameters for UserLoginTokenMutation"""
        input: UserLoginTokenMutationInput!
    ): UserLoginTokenMutationPayload

    """
    Initiate a username/password login for a seller.

    Returns a session token which can be used as an API key until it
    expires).
    """
    userLoginUsername(
        """Parameters for UserLoginUsernameMutation"""
        input: UserLoginUsernameMutationInput!
    ): UserLoginUsernameMutationPayload

    """Update a mutable user. Requires an authenticated user to use mutation."""
    userUpdate(
        """Parameters for UserUpdateMutation"""
        input: UserUpdateMutationInput!
    ): UserUpdateMutationPayload

    """Updates the favourite store of the current user."""
    userUpdateFavouriteStore(
        """Parameters for UserUpdateFavouriteStoreMutation"""
        input: UserUpdateFavouriteStoreMutationInput!
    ): UserUpdateFavouriteStoreMutationPayload

    """Delete a variant. Only accessible to operator and seller admin users."""
    variantDelete(
        """Parameters for VariantDeleteMutation"""
        input: VariantDeleteMutationInput!
    ): VariantDeleteMutationPayload

    """Update a variant. Only accessible to operator and seller admin users."""
    variantUpdate(
        """Parameters for VariantUpdateMutation"""
        input: VariantUpdateMutationInput!
    ): VariantUpdateMutationPayload

    """Create a webhook. Only accessible to operator and seller admin users."""
    webhookCreate(
        """Parameters for WebhookCreateMutation"""
        input: WebhookCreateMutationInput!
    ): WebhookCreateMutationPayload

    """Update a webhook. Only accessible to operator and seller admin users."""
    webhookUpdate(
        """Parameters for WebhookUpdateMutation"""
        input: WebhookUpdateMutationInput!
    ): WebhookUpdateMutationPayload

    """
    Create or update Yotpo settings. Only accessible to operator admin users.
    """
    yotpoSettingsCreateOrUpdate(
        """Parameters for YotpoSettingsCreateOrUpdateMutation"""
        input: YotpoSettingsCreateOrUpdateMutationInput!
    ): YotpoSettingsCreateOrUpdateMutationPayload

    """Delete Yotpo settings. Only accessible to operator admin users."""
    yotpoSettingsDelete(
        """Parameters for YotpoSettingsDeleteMutation"""
        input: YotpoSettingsDeleteMutationInput!
    ): YotpoSettingsDeleteMutationPayload

    """
    Create or update Zip settings. Only accessible to operator admin users.
    """
    zipSettingsCreateOrUpdate(
        """Parameters for ZipSettingsCreateOrUpdateMutation"""
        input: ZipSettingsCreateOrUpdateMutationInput!
    ): ZipSettingsCreateOrUpdateMutationPayload

    """Delete Zip settings. Only accessible to operator admin users."""
    zipSettingsDelete(
        """Parameters for ZipSettingsDeleteMutation"""
        input: ZipSettingsDeleteMutationInput!
    ): ZipSettingsDeleteMutationPayload

    """
    Create or update Zooz settings. Only accessible to operator admin users.
    """
    zoozSettingsCreateOrUpdate(
        """Parameters for ZoozSettingsCreateOrUpdateMutation"""
        input: ZoozSettingsCreateOrUpdateMutationInput!
    ): ZoozSettingsCreateOrUpdateMutationPayload

    """Delete Zooz settings. Only accessible to operator admin users."""
    zoozSettingsDelete(
        """Parameters for ZoozSettingsDeleteMutation"""
        input: ZoozSettingsDeleteMutationInput!
    ): ZoozSettingsDeleteMutationPayload
}

"""Labels for all available forms of authorization"""
enum MutationAuthorization {
    """Google reCAPTCHA"""
    recaptcha @deprecated(reason: "As of June 2020, deprecated in favour of MutationAuthorizationTypeEnum.RECAPTCHA in order to be consistent with enum naming conventions. This will be removed in January 2021.")
}

"""Properties defining a navigation bar"""
type NavBar {
    """Blog link visibility"""
    blogVisible: Boolean!

    """Count of items in the cart"""
    cartItemCount: Int

    """Links specific to the vertical/store"""
    customLinks: [CustomNavLink!]!

    """Directory ("Find a store") link location"""
    directoryLinkLocation: String!

    """Directory ("Find a store") link visibility"""
    directoryVisible: Boolean!

    """User login/logout/registration controls visibility"""
    loginLogoutVisible: Boolean!

    """Logo image URL"""
    logo: String

    """Business name"""
    name: String!

    """"Place an ad" link visibility"""
    placeAdVisible: Boolean!

    """True if we want to show "join us" links in the header"""
    showJoinUsLinks: Boolean!
}

"""Autogenerated input type of NewsletterSubscribeMutation"""
input NewsletterSubscribeMutationInput {
    """
    Service to verify requests against. If not supplied, API Key auth is required.
    """
    authorizationType: MutationAuthorization

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Email to subscribe"""
    email: String!

    """Token to verify with `authorizationType` service"""
    token: String
}

"""Autogenerated return type of NewsletterSubscribeMutation."""
type NewsletterSubscribeMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Subscribed email"""
    email: String
    errors: [ValidationError!]
    status: Int!
}

"""Newsletter subscription form metadata"""
type NewsletterSubscriptionForm {
    """Placeholder for Email field of a subscription form"""
    emailPlaceholder: String!

    """Subscribe button text"""
    subscribeButtonText: String!

    """Path to Subscribe page"""
    subscribeIndexPath: String

    """Subscription heading"""
    subscriptionHeading: String
}

"""An object with an ID."""
interface Node {
    """ID of the object."""
    id: ID!
}

type OptionalOptionValue implements Node {
    """ID of the object."""
    id: ID!
    optionType: OptionType!
    optionValue: OptionValue
}

"""The connection type for OptionalOptionValue."""
type OptionalOptionValueConnection {
    """A list of edges."""
    edges: [OptionalOptionValueEdge]

    """A list of nodes."""
    nodes: [OptionalOptionValue]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type OptionalOptionValueEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: OptionalOptionValue
}

"""An advert's option type (e.g. colour, size, shape)."""
type OptionType implements Node {
    appliedTo: AppliedToEnum!
    category: PurposeEnum! @deprecated(reason: "This field is deprecated. Use appliedTo and fieldType instead.")
    description: String!
    displayName: String!
    externalIds: [ExternalID!]!
    fieldType: FieldTypeEnum!
    id: ID!

    """This is the ID stored in the Marketplacer database."""
    legacyId: Int!

    """The name of the option type, mostly for internal organisation."""
    name: String!
    optional: Boolean!
    optionValues(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): OptionValuesConnection

    """
    In which position to put the option when displayed in a list of options.
    """
    position: Int!
    presentation: String
    prototypes(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): PrototypesConnection!
}

"""Autogenerated input type of OptionTypeCreateOrUpdateMutation"""
input OptionTypeCreateOrUpdateMutationInput {
    """
    Where the option type is applied, which can only be on either variant or
    advert level. This value cannot be changed to existing option types
    """
    appliedTo: AppliedToEnum = null

    """
    DEPRECATED: This field is deprecated. Use appliedTo and fieldType instead.
    Specifies the purpose of the option type i.e how it relates to either the
    advert or variant
    """
    category: PurposeEnum = null

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """How the the OptionType should be displayed publically - eg. 'Size'"""
    displayName: String

    """IDs used by external systems to fetch Prototypes"""
    externalIds: [KeyValueInput!]

    """
    The character of the option type on how option values are stored. This value cannot be changed to existing option types
    """
    fieldType: FieldTypeEnum = null

    """ID of the OptionType to update"""
    id: ID

    """Name for the OptionType - eg. 'size'"""
    name: String

    """
    Is the option type optional?. Note: Changing an existing option type from
    optional to required may cause related products to become undisplayable. When
    this value is not provided, true will be set for advert single_select and
    advert free_text option types. For other types, false will be set
    """
    optional: Boolean

    """
    ID for associated Prototypes. Note: Making changes to prototypes (e.g.
    adding/removing option types) may cause related products to become undisplayable
    """
    prototypeIds: [ID!]

    """
    ID for associated Prototypes we want to remove. Note: Making changes to
    prototypes (e.g. adding/removing option types) may cause related products to
    become undisplayable
    """
    prototypeIdsToRemove: [ID!]
}

"""Autogenerated return type of OptionTypeCreateOrUpdateMutation."""
type OptionTypeCreateOrUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    optionType: OptionType
    status: Int!
}

"""
Minimal subset of OptionType type which can be used to
build an option type filter for advert search
"""
type OptionTypeFilterOption {
    displayName: String!
    externalIds: [ExternalID!]!

    """The option values associated with an option type"""
    optionValues: [OptionValueFilterOption!]!

    """
    In which position to put the option when displayed in a list of options.
    """
    position: Int!
}

"""The connection type for OptionType."""
type OptionTypesConnection {
    """A list of edges."""
    edges: [OptionTypesEdge]

    """A list of nodes."""
    nodes: [OptionType]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type OptionTypesEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: OptionType
}

"""Option value for an advert's option type (e.g. 'red', 'large')"""
type OptionValue implements Node {
    displayName: String!
    externalIds: [ExternalID!]
    id: ID!

    """This is the ID stored in the Marketplacer database."""
    legacyId: Int!
    name: String!
    optionType: OptionType

    """
    In which position to put the option when displayed in a list of options.
    """
    position: Int!
    presentation: String! @deprecated(reason: "As of August 2020, deprecated in favour of 'displayName' This will be removed in January 2021.")
}

"""The connection type for OptionValue."""
type OptionValueConnection {
    """A list of edges."""
    edges: [OptionValueEdge]

    """A list of nodes."""
    nodes: [OptionValue]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""Autogenerated input type of OptionValueCreateOrUpdateMutation"""
input OptionValueCreateOrUpdateMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Presentation for the new OptionValue"""
    displayName: String

    """IDs used by external systems to fetch OptionValues"""
    externalIds: [KeyValueInput!]

    """ID of the OptionValue to update"""
    id: ID

    """Name for the new OptionValue"""
    name: String

    """
    ID for parent OptionType. eg. if this OptionValue is 'Orange', the parent OptionType might be 'Colour' or 'Flavour'
    """
    optionTypeId: ID

    """
    A zero based index specifying the sort order in which the Option Values will be displayed (zero first)
    """
    position: Int
}

"""Autogenerated return type of OptionValueCreateOrUpdateMutation."""
type OptionValueCreateOrUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    optionValue: OptionValue
    status: Int!
}

"""Autogenerated input type of OptionValueDeleteMutation"""
input OptionValueDeleteMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID of the OptionValue to update"""
    id: ID
}

"""Autogenerated return type of OptionValueDeleteMutation."""
type OptionValueDeleteMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    optionValue: OptionValue
    status: Int!
}

"""An edge in a connection."""
type OptionValueEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: OptionValue
}

"""
Minimal subset of OptionValue type which can be used as
a value of an option type filter for advert search
"""
type OptionValueFilterOption {
    displayName: String!
    id: ID!
    optionType: OptionType!

    """
    In which position to put the option when displayed in a list of options.
    """
    position: Int!
}

"""The connection type for OptionValue."""
type OptionValuesConnection {
    """A list of edges."""
    edges: [OptionValuesEdge]

    """A list of nodes."""
    nodes: [OptionValue]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type OptionValuesEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: OptionValue
}

"""A cart that has turned into an immutable order."""
type Order implements Node {
    address: Address

    """A displayable string which summarises the status of the invoices"""
    aggregateInvoiceStatus: InvoiceStatusEnum

    """All invoices are in final state: eg. sent / collected / cancelled"""
    aggregateInvoiceStatusFinal: Boolean
    billingAddress: Address
    billingCompanyName: String
    billingEmailAddress: String
    billingFirstName: String
    billingPhone: String
    billingSurname: String

    """ID of the cart that was converted into this order."""
    cartId: ID
    companyName: String
    createdAt: ISO8601DateTime!

    """
    The discount applied to the order. Negative value. Denominated in cents.
    """
    discountCents: Int!

    """
    The discount applied to the order. Negative value. In string with currency symbol.
    """
    discountFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!
    emailAddress: String

    """The expected delivery date selected by the buyer for the order."""
    expectedDeliveryDate: ISO8601DateTime

    """The expected delivery slot selected by the buyer for the order."""
    expectedDeliverySlot: String
    externalId: String
    externalIds: [ExternalID!]!
    firstName: String
    id: ID!
    invoices(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): InvoiceConnection!

    """Is this order a gift order? Defaults to false."""
    isGift: Boolean

    """The id used to identify the order."""
    legacyId: Int!
    lineItems(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): LineItemConnection!

    """A message that will be sent to the gift recipient."""
    messageToGiftRecipient: String

    """Message to the seller."""
    messageToSeller: String

    """Metadata key/values"""
    metadata: [Metadatum!]!
    paymentEvents(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): PaymentEventConnection!
    paymentGatewayDetails: JSON
    paymentInstrumentType: String
    phone: String
    postage: Float!
    purgedAt: ISO8601DateTime
    shipments: [Shipment!]!

    """The order postage cost. Denominated in cents."""
    shippingCostCents: Int!

    """The order postage cost. In string with currency symbol."""
    shippingCostFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!
    status: OrderStatusEnum!
    subtotal: Float!

    """
    The order subtotal, excluding discounts and postage. Tax is included for tax inclusive marketplaces. Denominated in cents.
    """
    subtotalCents: Int!

    """
    The order subtotal, excluding discounts and postage. Tax is included for tax
    inclusive marketplaces. In string with currency symbol.
    """
    subtotalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!
    surname: String
    taxTotal: Float!

    """The tax on the order. Denominated in cents."""
    taxTotalCents: Int!

    """The tax on the order. In string with currency symbol."""
    taxTotalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """
    Required for setting the current order on the checkout page via URL parameter.
    """
    token: String!
    total: Float!

    """The order total. Denominated in cents."""
    totalCents: Int!

    """The order total. In string with currency symbol."""
    totalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!
    updatedAt: ISO8601DateTime!
}

"""Autogenerated input type of OrderCreateMutation"""
input OrderCreateMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Attributes for invoices associated with the given order."""
    invoices: [InvoiceInput!]

    """
    Attributes of line items associated with this order. LineItems will be split into invoices by seller.
    """
    lineItems: [LineItemInput!]

    """
    Notify the order information via Email and SMS. By default, at the moment, it will not send any notifications
    """
    notifications: [OrderCreationNotificationEnum!]

    """Attributes for defining the given order."""
    order: OrderInput!
}

"""Autogenerated return type of OrderCreateMutation."""
type OrderCreateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    order: Order
    status: Int!
}

"""The notification to be sent when an order is created"""
enum OrderCreationNotificationEnum {
    """Notify the order information via Email"""
    EMAIL

    """Notify the order information via SMS"""
    SMS
}

"""Autogenerated input type of OrderHistoryDownloadMutation"""
input OrderHistoryDownloadMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    filters: [InvoiceFilters!] = []
    format: SpreadsheetEnum = CSV
    sellerId: ID = null
}

"""Autogenerated return type of OrderHistoryDownloadMutation."""
type OrderHistoryDownloadMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    export: ImportExport
    status: Int!
}

"""Attributes for creating or updating an order"""
input OrderInput {
    """The buyer's shipping address for an order."""
    address: AddressInput

    """
    The buyer's billing address. If this is left blank, it will default to the shipping address.
    """
    billingAddress: AddressInput

    """
    Name of the company making the order for the purposes of billing if
    applicable. If this is left blank, it will default to the company name attribute.
    """
    billingCompanyName: String

    """
    The buyer's email address for the purposes of billing. If this is left blank,
    it will default to the email address attribute.
    """
    billingEmailAddress: String

    """
    The buyer's first name for the purposes of billing. If this is left blank, it will default to the first name attribute.
    """
    billingFirstName: String

    """
    The buyer's phone number for the purposes of billing. If this is left blank,
    it will default to the phone number attribute.
    """
    billingPhone: String

    """
    The buyer's surname for the purposes of billing. If this is left blank, it will default to the surname attribute.
    """
    billingSurname: String

    """Name of the company making the order if applicable."""
    companyName: String

    """The buyer's email address."""
    emailAddress: String

    """IDs used by external systems to fetch orders."""
    externalIds: [KeyValueInput!]

    """The buyer's first name."""
    firstName: String

    """Is this order a gift order? Defaults to false."""
    isGift: Boolean

    """A message that will be sent to the gift recipient."""
    messageToGiftRecipient: String

    """A message that will be sent to the seller."""
    messageToSeller: String

    """Metadata key/value pairs."""
    metadata: [KeyValueInput!]

    """A note that will appear on every invoice for this order."""
    notes: String

    """Payment Gateway information."""
    paymentGatewayDetails: JSON

    """The buyer's phone number."""
    phone: String

    """The buyer's surname."""
    surname: String

    """
    Whether the user has accepted the terms and conditions. Only required if the website is configured to require it.
    """
    termsAndConditionsAccepted: Boolean
}

"""The current status of an order."""
enum OrderStatusEnum {
    """An order that has been created but not paid for"""
    NEW

    """
    An order that has progressed to the checkout page, but not been paid for
    """
    CHECKOUT

    """An order that has been manually marked as 'abandoned' by an Admin"""
    ABANDONED

    """An order that has been successfully completed."""
    COMPLETE

    """An order that is complete, but with a failed payment."""
    PAYMENT_FAILED

    """
    An order that is complete, but whose payment hasn't been finalised
    (e.g. a direct debit payment waiting on confirmation from the bank).
    """
    PAYMENT_IN_PROGRESS

    """An order that is pending fraud review"""
    PENDING_REVIEW
}

"""Attributes for updating an order"""
input OrderUpdateInput {
    """The buyer's shipping address for an order."""
    address: AddressInput

    """
    The buyer's billing address. If this is left blank, it will default to the shipping address.
    """
    billingAddress: AddressInput

    """
    Name of the company making the order for the purposes of billing if
    applicable. If this is left blank, it will default to the company name attribute.
    """
    billingCompanyName: String

    """
    The buyer's email address for the purposes of billing. If this is left blank,
    it will default to the email address attribute.
    """
    billingEmailAddress: String

    """
    The buyer's first name for the purposes of billing. If this is left blank, it will default to the first name attribute.
    """
    billingFirstName: String

    """
    The buyer's phone number for the purposes of billing. If this is left blank,
    it will default to the phone number attribute.
    """
    billingPhone: String

    """
    The buyer's surname for the purposes of billing. If this is left blank, it will default to the surname attribute.
    """
    billingSurname: String

    """Name of the company making the order if applicable."""
    companyName: String

    """The buyer's email address."""
    emailAddress: String

    """The buyer's first name."""
    firstName: String

    """A message that will be sent to the seller."""
    messageToSeller: String

    """The buyer's phone number."""
    phone: String

    """The buyer's surname."""
    surname: String
}

"""Autogenerated input type of OrderUpdateMutation"""
input OrderUpdateMutationInput {
    """Attributes updates for the given order."""
    attributes: OrderUpdateInput

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID for retrieving the correct cart."""
    orderId: ID!

    """Updated details for the payment gateway."""
    paymentGatewayDetails: JSON

    """Current status that the order should be set to."""
    status: OrderStatusEnum!
}

"""Autogenerated return type of OrderUpdateMutation."""
type OrderUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    order: Order
    status: Int!
}

"""Information about pagination in a connection."""
type PageInfo {
    """When paginating forwards, the cursor to continue."""
    endCursor: String

    """When paginating forwards, are there more items?"""
    hasNextPage: Boolean!

    """When paginating backwards, are there more items?"""
    hasPreviousPage: Boolean!

    """When paginating backwards, the cursor to continue."""
    startCursor: String
}

"""Partner integration toggle enabled or disabled event."""
type PartnerIntegrationToggleEvent {
    category: String!
    emailId: Int
    enabled: Boolean!
    providerHandle: String!
}

"""
Autogenerated input type of PartnerIntegrationToggleEventCreateMutation
"""
input PartnerIntegrationToggleEventCreateMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Properties for partner integration toggle event creation."""
    partnerIntegrationToggleEvent: PartnerIntegrationToggleEventInput!
}

"""
Autogenerated return type of PartnerIntegrationToggleEventCreateMutation.
"""
type PartnerIntegrationToggleEventCreateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    partnerIntegrationToggleEvent: PartnerIntegrationToggleEvent
    status: Int!
}

"""Properties for partner integration toggle event creation."""
input PartnerIntegrationToggleEventInput {
    """Partner integration category."""
    category: String!

    """Whether the partner integration was enabled or disabled"""
    enabled: Boolean!

    """Partner integration provider handle."""
    providerHandle: String!
}

"""Autogenerated input type of PasswordResetMutation"""
input PasswordResetMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    password: String!
    passwordConfirmation: String!
    resetPasswordNonce: String!
}

"""Autogenerated return type of PasswordResetMutation."""
type PasswordResetMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

"""Payment Event"""
type PaymentEvent implements Node {
    amount: String
    id: ID!
    paymentInstrumentType: String
    responseMessage: String
    successful: Boolean!
    transactionId: String
}

"""The connection type for PaymentEvent."""
type PaymentEventConnection {
    """A list of edges."""
    edges: [PaymentEventEdge]

    """A list of nodes."""
    nodes: [PaymentEvent]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type PaymentEventEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: PaymentEvent
}

"""Payment method."""
type PaymentMethod {
    id: ID!
    method: String
    provider: String
    purpose: String
}

"""Autogenerated input type of PaymentMethodCreateMutation"""
input PaymentMethodCreateMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Payment method attributes."""
    paymentMethodAttributes: PaymentMethodInput!
}

"""Autogenerated return type of PaymentMethodCreateMutation."""
type PaymentMethodCreateMutationPayload {
    braintreeBillingSettings: BraintreeBillingSettings
    braintreeEcommerceSettings: BraintreeEcommerceSettings

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    paymentMethod: PaymentMethod
    status: Int!
}

"""Autogenerated input type of PaymentMethodDeleteMutation"""
input PaymentMethodDeleteMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID of the existing payment method."""
    id: ID!
}

"""Autogenerated return type of PaymentMethodDeleteMutation."""
type PaymentMethodDeleteMutationPayload {
    braintreeBillingSettings: BraintreeBillingSettings
    braintreeEcommerceSettings: BraintreeEcommerceSettings

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    paymentMethod: PaymentMethod
    status: Int!
}

"""All available payment method."""
enum PaymentMethodEnum {
    CREDIT_CARD
    CREDIT_CARD_OR_PAYPAL
    DIRECT_DEBIT
    PRE_PAID
    DO_NOT_BILL
    PAYPAL
    AFTERPAY
    BALOTO
    EFECTY
    BANK_REFERENCED
    SU_RED
    GIFT_CARDS
    OTHERS
    ZIP
    BANK_TRANSFER
}

"""Properties for payment method creation."""
input PaymentMethodInput {
    """The payment method used to pay for an order."""
    paymentMethod: PaymentMethodEnum!

    """The payment provider"""
    provider: ProviderEnum!

    """The purpose of the transaction. Can be either ECOMMERCE or BILLING"""
    purpose: PaymentProviderPurposeEnum!
}

"""All available payment providers for checkout."""
enum PaymentProviderEnum {
    BRAINTREE
    AFTERPAY
}

"""Properties from a payment provider."""
input PaymentProviderInput {
    """
    Device data increases the accuracy of Braintree's available advanced fraud
    management tools in determining when a transaction is fraudulent.
    """
    deviceData: String

    """
    The nonce received from a payment provider. Required for checking out with Braintree.
    """
    paymentNonce: String

    """The payment provider used for checking out the cart."""
    paymentProvider: PaymentProviderEnum!

    """Data from the payment provider used to capture or finalize a payment."""
    providerParams: JSON

    """
    The redirect_cancellation_url is used to redirect the user back to the platform when the user cancels the transaction
    """
    redirectCancellationUrl: String

    """
    The redirect_confirmation_url is used to redirect the user back to the
    platform after successfully approving the transaction
    """
    redirectConfirmationUrl: String
}

"""All available payment purposes."""
enum PaymentProviderPurposeEnum {
    BILLING
    ECOMMERCE
}

"""Paypal Commerce settings"""
type PaypalCommerceSettings {
    category: CategoryTypeEnum!
    creditCardEnabled: Boolean!

    """ Denominated in cents."""
    customMerchantBaseFeeCents: Int

    """ In string with currency symbol."""
    customMerchantBaseFeeFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String
    customMerchantFee: Float
    description: String!
    logoUrl: String!
    merchantId: String
    overrideCustomMerchantFee: Boolean!
    paypalEnabled: Boolean!
    providerHandle: String!
    providerName: String!
    status: StatusTypeEnum!
    testModeEnabled: Boolean!
}

"""
Autogenerated input type of PaypalCommerceSettingsCreateOrUpdateMutation
"""
input PaypalCommerceSettingsCreateOrUpdateMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Merchant base fee."""
    customMerchantBaseFee: String

    """Percentage of the order total to be charged for the merchant fee."""
    customMerchantFee: String

    """PayPal Commerce merchant ID."""
    merchantId: String!

    """Override the custom merchant fee."""
    overrideCustomMerchantFee: Boolean
    testModeEnabled: Boolean
}

"""
Autogenerated return type of PaypalCommerceSettingsCreateOrUpdateMutation.
"""
type PaypalCommerceSettingsCreateOrUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    paypalCommerceSettings: PaypalCommerceSettings
    status: Int!
}

"""Autogenerated input type of PaypalCommerceSettingsDeleteMutation"""
input PaypalCommerceSettingsDeleteMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
}

"""Autogenerated return type of PaypalCommerceSettingsDeleteMutation."""
type PaypalCommerceSettingsDeleteMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    paypalCommerceSettings: PaypalCommerceSettings
    status: Int!
}

"""A price range"""
type PriceRange {
    """Maximum value in the range."""
    max: Float!

    """Maximum value in the range, as cents for accuracy."""
    maxCents: Int!

    """Maximum value in the range, formatted in the given currency."""
    maxFormatted: String!

    """Maximum value in the range in session currency."""
    maxInSessionCurrency: String!

    """Minimum value in the range."""
    min: Float!

    """Minimum value in the range, as cents for accuracy."""
    minCents: Int!

    """Minimum value in the range, formatted in the given currency."""
    minFormatted: String!

    """Minimum value in the range in session currency."""
    minInSessionCurrency: String!
}

"""The variant pricing model"""
enum PricingModelEnum {
    """Marketplace pricing model"""
    MARKETPLACE

    """Wholesale pricing model"""
    WHOLESALE
}

"""Autogenerated input type of ProcessPaymentGatewayRedirectMutation"""
input ProcessPaymentGatewayRedirectMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Attributes required by a payment provider to process a payment."""
    paymentProviderRedirectConfirmationAttributes: RedirectConfirmationInput!
}

"""Autogenerated return type of ProcessPaymentGatewayRedirectMutation."""
type ProcessPaymentGatewayRedirectMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    order: Order
    status: Int!
}

"""A promotion, sale, or special discount."""
type Promotion implements Node {
    """Adverts excluded from this promotion."""
    advertsExcluded(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): AdvertsConnection

    """Adverts included in this promotion."""
    advertsIncluded(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): AdvertsConnection

    """Brands excluded from this promotion."""
    brandsExcluded(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): BrandsConnection

    """Brands included in this promotion."""
    brandsIncluded(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): BrandsConnection

    """Categories excluded from this promotion."""
    categoriesExcluded(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): TaxonsConnection

    """Categories included in this promotion."""
    categoriesIncluded(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): TaxonsConnection

    """Percentage of cost borne by the marketplace."""
    costPercentageBorneByMarketplace: Float!

    """Description of the promotion used for internal reference."""
    description: String

    """
    Amount of the discount. Dollar or percentage value depending on 'discountType'.
    """
    discountAmount: Float

    """Type of discount. Options available: 'dollar', 'percentage'."""
    discountType: String

    """Promotion end date."""
    endDate: ISO8601DateTime

    """Is free shipping enabled for this promotion?"""
    freeShipping: Boolean!

    """Is free shipping only for domestic orders?"""
    freeShippingDomesticOnly: Boolean!
    id: ID!

    """Loyalty program restriction applied to this promotion."""
    loyaltyProgramLevels(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): LoyaltyProgramLevelsConnection

    """Maximum amount over which this promotion will not apply."""
    maximumSpend: Float

    """Minimum amount required to be spent for this promotion to apply."""
    minimumSpend: Float

    """
    Name of the promotion - displayed at cart and checkout, order card, invoice.
    """
    name: String!

    """Whether items already on sale are excluded from this promotion."""
    saleItemsExcluded: Boolean!

    """The seller running the promotion."""
    seller: Seller

    """Promotion start date."""
    startDate: ISO8601DateTime

    """Whether the promotion has been suspended."""
    suspended: Boolean!

    """Text for use as the "teaser" within a banner or similar."""
    teaser: String

    """Text for use as the "teaser" within a banner or similar."""
    teaserText: String @deprecated(reason: "Use teaser instead")

    """URL the Promotion links through to"""
    url: String

    """Variants excluded from this promotion."""
    variantsExcluded(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): VariantsConnection

    """Variants included in this promotion."""
    variantsIncluded(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): VariantsConnection
}

input PromotionInput {
    advertsExcludedLegacyIds: [Int!]
    advertsIncludedLegacyIds: [Int!]
    bonusItemAdvertLegacyId: Int = null
    brandsExcludedIds: [ID!]
    brandsIncludedIds: [ID!]
    buyXGetOneFree: Int
    categoriesExcludedIds: [ID!]
    categoriesIncludedIds: [ID!]
    costPercentageBorneByMarketplace: Float
    description: String
    discountAmount: Float

    """
    Every dollar amount for which discount_amount gets applied to. Required if discount_type set as DOLLAR_REPEATING
    """
    discountForEvery: Float

    """Type of discount. Required if discount_amount is set."""
    discountType: DiscountTypeEnum
    endsAt: ISO8601DateTime
    freeShipping: Boolean
    freeShippingDomesticOnly: Boolean
    loyaltyProgramLevels: [ID!]
    maximumSpend: Float
    maximumVariantVolume: Float
    maximumVariantWeight: Float

    """e.g. '2', for 'Buy 2 get 1 free'"""
    minimumSpend: Float
    name: String!
    saleItemsExcluded: Boolean
    startsAt: ISO8601DateTime
    suspended: Boolean
    teaser: String
    url: String
    variantsExcludedLegacyIds: [Int!]
    variantsIncludedLegacyIds: [Int!]
}

"""The connection type for Promotion."""
type PromotionsConnection {
    """A list of edges."""
    edges: [PromotionsEdge]

    """A list of nodes."""
    nodes: [Promotion]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type PromotionsEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: Promotion
}

"""Autogenerated input type of PromotionUpsertMutation"""
input PromotionUpsertMutationInput {
    """Attributes to assign to the promotion."""
    attributes: PromotionInput!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    promotionId: ID
    sellerId: ID = null
}

"""Autogenerated return type of PromotionUpsertMutation."""
type PromotionUpsertMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    promotion: Promotion
    status: Int!
}

"""
Prototypes contain the attributes from which all Adverts in a Category inherit eg. Clothing
"""
type Prototype implements Node {
    externalIds: [ExternalID!]!
    id: ID!

    """Name of the Prototype, eg. Bikes"""
    name: String!
    optionTypes(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): OptionTypesConnection!
}

"""Autogenerated input type of PrototypeCreateOrUpdateMutation"""
input PrototypeCreateOrUpdateMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """IDs used by external systems to fetch Prototypes"""
    externalIds: [KeyValueInput!]

    """ID of the Prototype to update"""
    id: ID

    """Name for the new Prototype"""
    name: String
}

"""Autogenerated return type of PrototypeCreateOrUpdateMutation."""
type PrototypeCreateOrUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    prototype: Prototype
    status: Int!
}

"""The connection type for Prototype."""
type PrototypesConnection {
    """A list of edges."""
    edges: [PrototypesEdge]

    """A list of nodes."""
    nodes: [Prototype]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type PrototypesEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: Prototype
}

"""All available payment providers."""
enum ProviderEnum {
    BRAINTREE
    EPAYCO
    AFTERPAY
    ADYEN_CREDIT_CARD
    ADYEN_DIRECT_DEBIT
    ZOOZ_CREDIT_CARD
    ZOOZ_BANK_TRANSFER
    ZOOZ_CASH_BALOTO
    ZOOZ_CASH_EFECTY
    ZOOZ_CASH_BANK_REFERENCED
    ZOOZ_CASH_SU_RED
    GIVEX_GIFT_CARD
    ZIP_CO
    EXTERNAL
    PAYPAL_COMMERCE_CREDIT_CARD
    PAYPAL_COMMERCE_PAYPAL
    PRE_PAID
    DO_NOT_BILL
}

"""
A product, service, event ticket, reservation, etc. that can be purchased or hired.
"""
union Purchasable = Variant

"""Autogenerated input type of PurgeOrderDataMutation"""
input PurgeOrderDataMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """
    Orders to act upon. Note individual errors can fail and will cause them to be returned in the errors
    """
    orderIds: [ID!]!

    """
    Purge (clear) all of the externalIds on the order and associated invoice,
    lineItem, shipment objects (Note: not any other associated objects)
    """
    purgeExternalIds: Boolean = false

    """
    Purge (clear) all of the metadata on the order and associated invoice,
    lineItem, shipment objects (Note: not any other associated objects)
    """
    purgeMetadata: Boolean = false

    """
    Purge (clear) note data at several levels. "Note" on both the order
    directly and associated shipments. Set "content" on invoice annotations
    to "purged" (can't be blank). Remove receipt attachments on refund requests
    and attachments on return shipments and refund request notes (as well as "note").
    Remove "reason" and "denyRefundReason" on the refund request line items, as well
    as "note" and "attachments" on the associated RefundRequestNote.
    """
    purgeNotes: Boolean = false

    """
    Purge (clear) PII data directly on the order: user, address,
    billing_address, email_address, first_name, surname, phone, company_name,
    billing_email_address billing_phone, billing_first_name, billing_surname,
    billing_company_name, ip_address identity_document_number and date_of_birth
    """
    purgeOrderDetails: Boolean = true
}

"""Autogenerated return type of PurgeOrderDataMutation."""
type PurgeOrderDataMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

"""
The category of the option type. Mostly for validating associated adverts.
"""
enum PurposeEnum {
    """
    For advert variants that users can select to indicate which product options they want.
    """
    VARIANT

    """
    Mandatory option types for the given advert type. Fixed for the associated advert
    (i.e. users cannot select different variants)
    """
    FEATURE

    """
    Similar to PRODUCT_DETAILS_SELECT, except the seller can enter any label
    rather than selecting from a fixed list of values.
    """
    PRODUCT_DETAILS_TEXT

    """Similar to FEATURE option types, except not mandatory."""
    PRODUCT_DETAILS_SELECT

    """Returns OTHER if there is no purpose given"""
    OTHER
}

"""Root queries that don't modify database records."""
type Query {
    """
    Search for published adverts. NOTE: This is probably only helpful for exposing search directly to consumers.
    """
    advertSearch(
        """Search query params to determine which adverts are returned."""
        attributes: AdvertSearchInput
    ): AdvertSearchResponse!

    """
    Select adverts with the given attributes. Only adverts that match all queried
    fields will be returned. If no arguments are given, returns an empty response.
    """
    advertsWhere(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String
        brandIds: [ID!] = []

        """Select adverts created since this time"""
        createdSince: ISO8601DateTime = null

        """Select adverts created until this time"""
        createdUntil: ISO8601DateTime = null

        """Select adverts with a particular External ID"""
        externalId: ExternalIDInput = null

        """
        Filter adverts with provided catalog rule errors. Note this filter may be impacted by background tasks.
        """
        failedCatalogRuleIds: [ID!] = []

        """Returns the first _n_ elements from the list."""
        first: Int

        """Search in ProductID, Title, SKU and Barcode"""
        idTitleSkuBarcode: String = null

        """Returns the last _n_ elements from the list."""
        last: Int
        legacyIds: [Int!] = []

        """Keywords to search for. (Currently Title and Product ID)"""
        q: String = null

        """Select adverts that have been rejected via vetting"""
        rejectedViaVetting: Boolean = false

        """Select adverts that require vetting"""
        requiresVetting: Boolean = false

        """Filter to only associated sellers. (Overridden for seller api keys)."""
        retailerIds: [ID!] = []

        """Specifies how the list is sorted"""
        sort: [AdvertsWhereSort!] = []
        status: AdvertStatusEnum = null

        """Select adverts with stock or without stock"""
        stockStatus: AdvertStockStatusEnum = null
        taxonIds: [ID!] = []

        """
        Select adverts that have associated taxons and including the taxon descendants.
        """
        taxonIdsWithDescendants: [ID!] = []
        title: String = null

        """
        Select adverts that have associated variants with one of the given barcodes.
        """
        variantBarcodes: [String!] = []

        """
        Select adverts that have associated variants with one of the given skus.
        """
        variantSkus: [String!] = []

        """Select adverts that have been vetted"""
        vetted: Boolean = false

        """
        Filter adverts with any catalog rule errors. Note this filter may be impacted by background tasks.
        """
        withFailedCatalogRules: Boolean

        """Select adverts that have a vetting rejection reason"""
        withVettingRejectedReason: Boolean = false
    ): AdvertsConnection!

    """Adyen settings for billing"""
    adyenBillingSettings: AdyenBillingSettings

    """Adyen settings for ecommerce"""
    adyenEcommerceSettings: AdyenEcommerceSettings

    """Afterpay payment configuration data"""
    afterpay: Afterpay

    """Afterpay settings"""
    afterpaySettings: AfterpaySettings

    """
    Includes deleted and unpublished adverts. When using a Seller API key, adverts will be restricted to that Seller.
    """
    allAdverts(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int

        """True if the advert requires vetting"""
        requiresVetting: Boolean = null

        """Specifies how the list is sorted"""
        sort: [AdvertsWhereSort!] = []

        """Only return adverts which have been updated since this date"""
        updatedSince: ISO8601DateTime = null

        """True if advert is vetted"""
        vetted: Boolean = null
    ): AllAdvertsConnection!

    """Query for sellers (extant and prospective or retailer)."""
    allSellers(
        """
        Only return sellers with these types (default is retailer and prospective)
        """
        accountType: [AllSellersAccountTypeEnum!] = [RETAILER, PROSPECTIVE]

        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Include soft deleted sellers in the list"""
        includeDeleted: Boolean = null

        """Returns the last _n_ elements from the list."""
        last: Int

        """Specifies how the list is sorted"""
        sort: [AllSellersSort!] = [{field: UPDATED_AT, ordering: ASCENDING}]

        """Only return sellers which have been updated since this date"""
        updatedSince: ISO8601DateTime = null
    ): AllSellersConnection!
    apiKeyPrincipal: APIKeyPrincipal

    """Get billings"""
    billings(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Filters the list of billings with different criteria"""
        filters: BillingFilters = null

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int

        """
        IDs of sellers. If omitted will return all billing invoices in marketplace. (Overridden for seller API keys)
        """
        retailerIds: [ID!] = []

        """Specifies how the list is sorted"""
        sort: BillingSort = null
    ): BillingsConnection!
    braintree: Braintree

    """Braintree settings for billing"""
    braintreeBillingSettings: BraintreeBillingSettings

    """Braintree settings for ecommerce"""
    braintreeEcommerceSettings: BraintreeEcommerceSettings
    brands(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int

        """Request only brands that have online adverts associated with them."""
        showOnlineOnly: Boolean = false
    ): BrandsConnection!

    """Search for Brands"""
    brandSearch(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Filter brands based on the keyword value passed."""
        keyword: String = ""

        """Returns the last _n_ elements from the list."""
        last: Int
    ): ESBrandSearchConnection!

    """Get cart details."""
    cart(
        """ID of the requested cart."""
        id: ID!
    ): Cart!

    """Returns a collection of Catalog Rules available on the marketplace."""
    catalogRules(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Only return catalog rules made on or after this date"""
        createdSince: ISO8601DateTime = null

        """Only return catalog rules made on or before this date"""
        createdUntil: ISO8601DateTime = null

        """Returns the first _n_ elements from the list."""
        first: Int

        """Filter catalog rules by the key field"""
        keys: [CatalogRulesKeyEnum!] = null

        """Returns the last _n_ elements from the list."""
        last: Int

        """Specifies how the list is sorted"""
        sort: CatalogRulesSort = null
    ): CatalogRulesConnection!

    """Returns relevant change logs"""
    changeLogs(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Show changes made between dates"""
        createdAt: DateRangeInput

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): ChangeLogsConnection

    """Fetch chat messages between operator and seller."""
    chatMessages(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int

        """
        ID of the seller. May be omitted if using a seller api key, but is required otherwise
        """
        sellerId: ID
    ): ChatMessagesConnection!

    """
    Returns a collection of commission packages available on the marketplace
    """
    commissionPackages(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """Only return commission packages with specified postage setting"""
        appliesToPostage: Boolean = null

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Only return commission packages made after this date"""
        createdSince: ISO8601DateTime = null

        """Only return commission packages made before this date"""
        createdUntil: ISO8601DateTime = null

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int

        """
        Search by name of the commission package. Includes partial text matches in
        results. (`default` keyword returns default package)
        """
        name: String = null

        """
        ID of the seller. If omitted will return all commission_packages in marketplace. (Overridden for seller API keys)
        """
        retailerIds: [ID!] = []

        """Specifies how the list is sorted"""
        sort: CommissionPackageSort = null
    ): CommissionPackageConnection!

    """
    Returns a collection of commission packages schedules available on the marketplace.
    """
    commissionPackageSchedules(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """
        ID of the commission package schedule. If omitted will return all commission packages schedules in marketplace
        """
        commissionPackageScheduleIds: [ID!] = []

        """Only return commission package schedules made after this date"""
        createdSince: ISO8601DateTime = null

        """Only return commission package schedules created before this date"""
        createdUntil: ISO8601DateTime = null

        """Filters for Commission Package Schedules"""
        filters: CommissionPackageScheduleFilters = {q: null, scheduledSince: null, scheduledUntil: null, status: null}

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int

        """Specifies how the list is sorted"""
        sort: CommissionPackageScheduleSort = null
    ): CommissionPackageScheduleConnection!

    """
    Returns a collection of commission packages versions for a specified seller in the marketplace
    """
    commissionPackageVersionLogs(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int

        """ID of the seller"""
        retailerId: ID!
    ): CommissionPackageVersionLogConnection!

    """BETA: may change behaviour or arguments"""
    contextualHistory(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String
        createdAt: DateRangeInput
        event: String

        """Returns the first _n_ elements from the list."""
        first: Int
        itemId: ID
        itemType: String

        """Returns the last _n_ elements from the list."""
        last: Int
        whodunnit: String
        whodunnitType: String
    ): ContextualHistoryConnection!

    """All countries and states"""
    countries(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): CountrysConnection!

    """Returns all CustomFieldGroups"""
    customFieldGroups(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): CustomFieldGroupsConnection!

    """Direct email marketing"""
    emailMarketing: EmailMarketing!

    """Email Marketing Subscriptions"""
    emailMarketingSubscriptions(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int

        """Only return Subscriptions created after this date, format: YYYY-MM-DD"""
        subscribedSince: ISO8601Date = null
    ): SubscriptionsConnection!
    externalIds(
        """Limit to the first N values"""
        first: Int = null

        """Label for the system or client that uses this external ID."""
        key: String = null

        """Specify the type of the external id, eg: invoice, order, variant."""
        ownerType: String = null

        """The external ID used by an external system or client."""
        value: String = null

        """The external IDs (plural) used by an external system or client."""
        values: [String!] = null
    ): [ExternalID!]!

    """Check if a feature flag is enabled?"""
    featureEnabled(
        """The flag name to check if it is enabled."""
        name: String!
    ): Boolean!

    """Site footer data"""
    footer: Footer!

    """Givex settings"""
    givexSettings: GivexSettings

    """Deprecated: beta"""
    globalSearch(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Search query params to determine which records are returned"""
        keywords: String! = ""

        """Returns the last _n_ elements from the list."""
        last: Int
    ): GlobalSearchResultsConnection!

    """Golden Product records."""
    goldenProducts(
        activeStatus: GoldenProductActiveStatusEnum = null

        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): GoldenProductsConnection!

    """Site header data"""
    header: Header!
    healthCheck: HealthCheck!
    importExports(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
        status: ImportExportStatusEnum
        type: ImportExportTypeEnum
    ): ImportExportConnection

    """Get invoice amendments"""
    invoiceAmendments(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Filters the list of invoice amendments with different criteria"""
        filters: InvoiceAmendmentFilters = null

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int

        """Specifies how the list is sorted"""
        sort: InvoiceAmendmentSort = null
    ): InvoiceAmendmentsConnection!

    """All invoice annotation types"""
    invoiceAnnotationType(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): InvoiceAnnotationTypeConnection

    """Get invoices"""
    invoices(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Filters the list of invoices with different criteria"""
        filters: InvoiceFilters = null

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int

        """Specifies how the list is sorted"""
        sort: InvoiceSort = null
    ): InvoicesConnection!

    """Klaviyo settings."""
    klaviyoSettings: KlaviyoSettings

    """Get suggestions for location-based search queries."""
    locationSuggestions(
        """Location query string. Can be a city or postcode."""
        query: String!
    ): [Location!]!

    """Loyalty program levels"""
    loyaltyProgramLevels(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): LoyaltyProgramLevelsConnection
    mappings(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String
        filters: MappingFilters

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int

        """
        ID of the seller. May be omitted if using a seller api key, but is required otherwise
        """
        sellerId: ID
    ): MappingsConnection!

    """Fetches an object given its ID."""
    node(
        """ID of the object."""
        id: ID!
    ): Node

    """Fetches a list of objects given a list of IDs."""
    nodes(
        """IDs of the objects."""
        ids: [ID!]!
    ): [Node]!

    """Get order details"""
    order(
        """ID of the requested order."""
        orderId: ID!
    ): Order!

    """Get order details from the cart that it was created from."""
    orderFromCart(
        """ID of the cart that was converted into this order."""
        cartId: ID!
    ): Order
    paymentEvent: PaymentEvent!

    """Paypal Commerce settings"""
    paypalCommerceSettings: PaypalCommerceSettings

    """Returns a list of Promotions"""
    promotions(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int

        """ID of the seller. If omitted will return promotions for all sellers."""
        sellerId: ID

        """One of: active, upcoming, expired, all. Defaults to all."""
        status: String = "all"
    ): PromotionsConnection!

    """Returns a list of Prototypes"""
    prototypes(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Only return Prototypes matching IDs in array"""
        ids: [ID!] = null

        """Returns the last _n_ elements from the list."""
        last: Int
    ): PrototypesConnection!

    """RankedResult records - force first adverts for category/brand"""
    rankedResults(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): RankedResultsConnection!

    """Returns a list of redirects"""
    redirects(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): RedirectConnection!

    """Pre and Post Refund Reasons"""
    refundReasons: RefundReason!

    """Refund request notes"""
    refundRequestNotes(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Only return refund request notes created after this date."""
        createdSince: ISO8601DateTime = null

        """Only return refund request notes created before this date."""
        createdUntil: ISO8601DateTime = null

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int

        """Only return refund request notes with this as the new status."""
        newStatus: String = null

        """Only return refund request notes for associated refund requests."""
        refundRequestIds: [ID!] = []

        """
        Only return refund request notes for associated refund request line items.
        """
        refundRequestLineItemIds: [ID!] = []

        """
        Only return remittances for associated sellers. (Overridden for seller API keys)
        """
        retailerIds: [ID!] = []
    ): RefundRequestNoteConnection!

    """Retrieve refund requests"""
    refundRequests(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Filters the list of refund requests with different criteria"""
        filters: RefundRequestFilters = null

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int

        """ID of the seller. If omitted will return all refund requests"""
        sellerId: ID
    ): RefundRequestConnection!

    """Get remittance advices."""
    remittanceAdvices(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Only return remittance advices created after this date."""
        createdSince: ISO8601DateTime = null

        """Only return remittance advices created before this date."""
        createdUntil: ISO8601DateTime = null

        """Returns the first _n_ elements from the list."""
        first: Int

        """Only return remittances for associated invoice amendments."""
        invoiceAmendmentIds: [ID!] = null

        """Only return remittances for invoice amendments with these legacy IDs."""
        invoiceAmendmentLegacyIds: [Int!] = null

        """Only return remittances for associated invoices."""
        invoiceIds: [ID!] = null

        """Only return remittances for invoices with these legacy IDs."""
        invoiceLegacyIds: [Int!] = null

        """Returns the last _n_ elements from the list."""
        last: Int

        """Only return remittances with these legacy IDs."""
        legacyIds: [Int!] = []

        """Only return remittance advices paid after this date."""
        paidSince: ISO8601DateTime = null

        """Only return remittance advices paid before this date."""
        paidUntil: ISO8601DateTime = null

        """Only return remittance advices with a specified payment reference."""
        paymentReference: [String!] = null

        """
        Only return remittances associated with invoices (if value is 'invoice') or
        invoice amendments (if value is 'invoice_amendment').
        """
        remittableType: String = null

        """
        Only return remittance advices with remittance actions run before this date.
        """
        remittanceActionLastRunSince: ISO8601DateTime = null

        """
        Only return remittance advices with remittance actions run after this date.
        """
        remittanceActionLastRunUntil: ISO8601DateTime = null

        """
        Only return remittances with particular remittance actions performed on them. Options available: 'hyperwallet', 'xero'.
        """
        remittanceActions: [String!] = null

        """
        Only return remittances for associated sellers. (Overridden for seller API keys)
        """
        retailerIds: [ID!] = []

        """
        Only return remittances for sellers with these legacy IDs. (Overridden for seller API keys)
        """
        retailerLegacyIds: [Int!] = []

        """
        Only return remittances for sellers with these names. (Overridden for seller API keys)
        """
        retailerNames: [String!] = []

        """Only return remittances with this total value."""
        total: Float = null

        """Only return remittances with this total paid value."""
        totalPaid: Float = null
    ): RemittanceAdviceConnection!

    """Get multiple remittances."""
    remittances(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Only return remittances made after this date"""
        createdSince: ISO8601DateTime = null

        """Only return remittances made before this date"""
        createdUntil: ISO8601DateTime = null

        """Returns the first _n_ elements from the list."""
        first: Int

        """Only return remittances for associated invoice amendments."""
        invoiceAmendmentIds: [ID!] = null

        """Only return remittances for invoice amendments with these legacy IDs."""
        invoiceAmendmentLegacyIds: [Int!] = null

        """Only return remittances for associated invoices."""
        invoiceIds: [ID!] = null

        """Only return remittances for invoices with these legacy IDs."""
        invoiceLegacyIds: [Int!] = null

        """Returns the last _n_ elements from the list."""
        last: Int

        """
        Only return remittances that are unprocessed for a particular reason.Options
        available: 'missing_remittance_details', 'missing_hyperwallet_details',
        'zero_or_negative_total_remittance_amount',
        'pending_hyperwallet_verification', 'missing_xero_account',
        'pending_release'.
        """
        pendingReasons: String = null

        """
        Only return remittances where a remittance advice has been generated (if
        value is 'true') or pending generation (if value is 'false').
        """
        processed: Boolean = null

        """
        Only return remittances that are released (if value is 'true') or held (if value is 'false').
        """
        released: Boolean = null

        """
        Only return remittances associated with invoices (if value is 'invoice') or
        invoice amendments (if value is 'invoice_amendment').
        """
        remittableType: String = null

        """Only return remittances for sellers with these names."""
        retailerBusinessNames: [String!] = null

        """Only return remittances for associated sellers."""
        retailerIds: [ID!] = []
    ): RemittanceConnection!
    sellerCategories: [SellerCategoryLink!]!

    """
    Minimal set of attributes required for displaying and filtering Sellers on a map
    """
    sellerGeographicLocations: [SellerGeolocation!]!

    """Query ElasticSearch for sellers."""
    sellerSearch(
        """Query params to define which sellers to search for."""
        attributes: SellerSearchInput
    ): SellerSearchResponse!

    """Fetch sellers sorted by their latest chat messages' created timestamp"""
    sellersForChats(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int

        """
        Keywords to search for. (Currently Business Name and Legal Business Name)
        """
        q: String = null
    ): SellersForChatsConnection!

    """Insights & Statistics for a seller"""
    sellerStats(
        """
        ID of the seller. May be omitted if using a seller api key, but is required otherwise
        """
        sellerId: ID
    ): SellerStats

    """
    Select sellers with the given attributes. Only sellers that match all queried
    fields will be returned. If no arguments are given, returns all available sellers
    """
    sellersWhere(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int

        """
        Keywords to search for. (Currently Business Name, Email Address, and Legal Business Name)
        """
        q: String = null

        """Filter by ID of the sellers."""
        retailerIds: [ID!] = []

        """Filter by the SLA rating range"""
        slaRatingRange: SellerSlaRatingRangeInput = null

        """Specifies how the list is sorted"""
        sort: SellersWhereSort = null
    ): SellerConnection!

    """SendGrid settings."""
    sendgridSettings: SendgridSettings

    """Information about the current session"""
    session: SessionData

    """Shipment Addresses"""
    shipmentAddresses(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int

        """
        ID of the seller. If omitted will return all shipment addresses for marketplace.
        """
        sellerId: ID
    ): AddresssConnection

    """Shipment Carriers"""
    shipmentCarriers(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): ShipmentCarrierConnection

    """Returns a collection of shipping options available on the marketplace"""
    shippingOptions(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Filters the list of shipping options with different criteria"""
        filters: ShippingOptionFilters = null

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int

        """
        ID of the seller. If omitted will return all shipping rules including marketplace rules
        """
        sellerId: ID
    ): ShippingOptionConnection

    """Returns a collection of shipping profiles available on the marketplace"""
    shippingProfiles(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): ShippingProfileConnection

    """Returns a collection of shipping rates available on the marketplace"""
    shippingRates(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int

        """
        ID of the seller. If omitted will return all shipping rules including marketplace rules
        """
        sellerId: ID
    ): ShippingRateConnection

    """Returns a collection of shipping zones available on the marketplace"""
    shippingZones(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int

        """
        ID of the seller. If omitted will return all shipping rules including marketplace rules
        """
        sellerId: ID
    ): ShippingZoneConnection

    """Returns a Shippit Credentials Object for shipping settings"""
    shippitCredentials(
        """ID of the seller. If omitted will return an error"""
        sellerId: ID!
    ): ShippitCredentials

    """Site configuration properties"""
    siteConfig: SiteConfig!
    taxCodes: [TaxCode!]!
    taxons(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int

        """Filter taxons that belong to to the selected parent."""
        parentId: ID = null

        """Filter taxons that have online adverts associated with them."""
        showOnlineOnly: Boolean = false
    ): TaxonsConnection!
    taxonSearch(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int

        """
        Filter taxons where the taxon name contains the search value string. Must
        have a minimum of 2 characters for each search word.
        """
        searchValue: String = ""
    ): TaxonConnection!

    """Get taxon and brand suggestions for text-based search queries."""
    textQuerySuggestions(
        """Query string to be used to find text suggestions."""
        query: String!
    ): [TextQuerySuggestion!]!

    """Return theming attributes from AppConfig"""
    theme: Theme!

    """Third-party login links"""
    thirdPartyLoginLinks(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int

        """What kind of login provider?"""
        scope: ThirdPartyLoginLinkScopeEnum!
    ): ThirdPartyLoginLinkConnection!

    """Fetch I18n translation values by key."""
    translations(
        """Params to generate the requested translations."""
        translations: [TranslationInput!]!
    ): [Translation!]!

    """
    Retrieve carts that have been updated relative a certain timestamp.
    Either updatedSince or notUpdatedSince must be supplied.
    If you supply both or neither, you will get no results.

    """
    updatedCarts(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int

        """Only return carts which have not been updated since this date"""
        notUpdatedSince: ISO8601DateTime

        """Only return carts which have been updated since this date"""
        updatedSince: ISO8601DateTime
    ): UpdatedCartsConnection!

    """Retrieve orders that have been updated after a certain date"""
    updatedOrders(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int

        """Only return orders which have been updated since this date"""
        updatedSince: ISO8601DateTime!
    ): UpdatedOrdersConnection!

    """Retrieve refund requests that have been updated after a certain date"""
    updatedRefundRequests(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int

        """Only return refund requests which have been updated since this date"""
        updatedSince: ISO8601DateTime!
    ): UpdatedRefundRequestsConnection!
    user: User!

    """
    Select variants with the given attributes. Only variants that match all
    queried fields will be returned. If no arguments are given, returns an empty response.
    """
    variantsWhere(
        advertFilters: AdvertFilterInput

        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
        variantFilters: VariantFilterInput
    ): VariantConnection!

    """Returns the webhook events associated to webhooks"""
    webhookEvents(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int

        """
        ID of the webhook, if not provided then all webhook events are returned, ordered by updated_at timestamp
        """
        webhookId: ID
    ): WebhookEventsConnection

    """Returns the webhooks linked to marketplacer events."""
    webhooks(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): WebhooksConnection

    """Yotpo settings"""
    yotpoSettings: YotpoSettings

    """Zip settings"""
    zipSettings: ZipSettings

    """Zooz settings"""
    zoozSettings: ZoozSettings
}

"""RankedResult records - force first adverts for category/brand"""
type RankedResult implements Node {
    advertIds: [Int!]!
    adverts: [Advert!]!
    brand: Brand
    brandId: Int
    id: ID!
    taxon: Taxon
    taxonId: Int
}

"""Autogenerated input type of RankedResultDeleteMutation"""
input RankedResultDeleteMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID of the existing ranked result. Set blank to create a new one."""
    id: ID!
}

"""Autogenerated return type of RankedResultDeleteMutation."""
type RankedResultDeleteMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    rankedResult: RankedResult
    status: Int!
}

"""The connection type for RankedResult."""
type RankedResultsConnection {
    """A list of edges."""
    edges: [RankedResultsEdge]

    """A list of nodes."""
    nodes: [RankedResult]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type RankedResultsEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: RankedResult
}

"""Autogenerated input type of RankedResultUpsertMutation"""
input RankedResultUpsertMutationInput {
    """Integer IDs for the adverts (in order)"""
    advertIds: [Int!]!

    """Integer ID for the brand"""
    brandId: Int

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID of the existing ranked result. Set blank to create a new one."""
    id: ID

    """Integer ID for the taxon"""
    taxonId: Int
}

"""Autogenerated return type of RankedResultUpsertMutation."""
type RankedResultUpsertMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    rankedResult: RankedResult
    status: Int!
}

"""
Minimal subset of Rating type which can be used to build a
rating filter for advert search
"""
type RatingFilterOption {
    """The number of adverts associated with each rating filter option"""
    count: Int!
    name: String!
}

"""All redirects for the marketplace"""
type Redirect implements Node {
    businessName: String!
    id: ID!

    """New redirect path"""
    newPath: String!

    """Original path"""
    oldPath: String!

    """True if the redirect is temporary"""
    temporary: Boolean!
}

"""Properties for only redirect confirmation payment provider."""
input RedirectConfirmationInput {
    """The token that is generated by a payment provider"""
    orderToken: String!

    """The payment provider used to pay for the order"""
    paymentProvider: PaymentProviderEnum!
}

"""The connection type for Redirect."""
type RedirectConnection {
    """A list of edges."""
    edges: [RedirectEdge]

    """A list of nodes."""
    nodes: [Redirect]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type RedirectEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: Redirect
}

type RefundReason {
    denyRefundReasons: [String!]!
    id: ID!
    postDispatchRefundReasons: [String!]!
    preDispatchRefundReasons: [String!]!
}

"""Refund requests associated with an invoice"""
type RefundRequest implements Node {
    """
    The amount of cash refunded (could also include credit card or afterpay). Denominated in cents.
    """
    cashAmountCents: Int

    """
    The amount of cash refunded (could also include credit card or afterpay). In string with currency symbol.
    """
    cashAmountFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """
    The total refund value of the commission within this refund request. Denominated in cents.
    """
    commissionAmountTotalCents: Int

    """
    The total refund value of the commission within this refund request. In string with currency symbol.
    """
    commissionAmountTotalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """
    The total value of the tax on the commissionAmountTotal. Denominated in cents.
    """
    commissionTaxTotalCents: Int

    """
    The total value of the tax on the commissionAmountTotal. In string with currency symbol.
    """
    commissionTaxTotalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """The timestamp at which this refund request was created."""
    createdAt: ISO8601DateTime!
    externalIds: [ExternalID!]!

    """The amount to be refunded to gift cards. Denominated in cents."""
    giftCardAmountCents: Int

    """
    The amount to be refunded to gift cards. In string with currency symbol.
    """
    giftCardAmountFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String
    id: ID!

    """The initiator of this refund request."""
    initiatedBy: RefundRequestInitiatorEnum

    """The invoice to which this refund request refers."""
    invoice: Invoice!

    """The id used to identify the refund request."""
    legacyId: Int!

    """
    The total refund value of the item/s within this refund request. Denominated in cents.
    """
    lineItemAmountTotalCents: Int

    """
    The total refund value of the item/s within this refund request. In string with currency symbol.
    """
    lineItemAmountTotalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """Line items for which this refund is being requested."""
    lineItems: [RefundRequestLineItem!]!

    """
    The total value of the tax on the lineItemAmountTotal. Denominated in cents.
    """
    lineItemTaxTotalCents: Int

    """
    The total value of the tax on the lineItemAmountTotal. In string with currency symbol.
    """
    lineItemTaxTotalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """Metadata key/values"""
    metadata: [Metadatum!]!

    """Notes associated with this refund request."""
    notes: [RefundRequestNote!]!

    """
    Receipts for the refund (e.g. screenshots from payment provider portal, etc.)
    """
    receipts: [Image!]! @deprecated(reason: "Attachments should be added via RefundRequestNote.attachments. This field will be removed on 2022-12-15.")

    """
    The amount that will be recovered from the retailer. Denominated in cents.
    """
    recoveredAmountCents: Int

    """
    The amount that will be recovered from the retailer. In string with currency symbol.
    """
    recoveredAmountFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """The total amount to be refunded to the customer. Denominated in cents."""
    refundAmountCents: Int

    """
    The total amount to be refunded to the customer. In string with currency symbol.
    """
    refundAmountFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """
    The timestamp at which this refund request was refunded to the customer (can be nil).
    """
    refundedAt: ISO8601DateTime

    """
    The total refund value of the remittance within this amendment. Denominated in cents.
    """
    remittanceAmountTotalCents: Int

    """
    The total refund value of the remittance within this amendment. In string with currency symbol.
    """
    remittanceAmountTotalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """
    The total value of the tax on the remittanceAmountTotal. Denominated in cents.
    """
    remittanceTaxTotalCents: Int

    """
    The total value of the tax on the remittanceAmountTotal. In string with currency symbol.
    """
    remittanceTaxTotalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """
    The value of the purchased items that are being refunded. Denominated in cents.
    """
    requestValueCents: Int

    """
    The value of the purchased items that are being refunded. In string with currency symbol.
    """
    requestValueFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """Documentation or photos related to the package received."""
    returnedConsignments: [Image!]! @deprecated(reason: "Attachments should be added via RefundRequestNote.attachments. This field will be removed on 2022-12-15.")

    """Shipments associated with this refund request."""
    shipments: [ReturnShipment!]!

    """The status of this refund request."""
    status: RefundRequestStatusEnum!

    """Total amount to be refunded. Denominated in cents."""
    totalCents: Int

    """Total amount to be refunded. In string with currency symbol."""
    totalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """The timestamp at which this refund request was updated."""
    updatedAt: ISO8601DateTime!
}

input RefundRequestApproveInput {
    """
    LineItemPriceBreakdowns should be used if you intend to provide a price breakdown for all elements of that
    line item, otherwise don't supply this object and default values from the original invoice will be used
    for lineItems that are not provided.
    """
    lineItemPriceBreakdowns: [RefundRequestLineItemApproveInput!] = []

    """
    To be used when creating new custom line items that are not associated with an invoice line item.
    """
    newCustomLineItemPriceBreakdowns: [RefundRequestCustomLineItemApproveInput!] = []

    """
    An optional input field allowing the storage of both a text string comment and attachments.
    """
    note: RefundRequestNoteInput = null

    """
    The ID of the refund request to be approved. Supply only refund requests with status PROCESSED.
    """
    refundRequestId: ID!
}

"""Autogenerated return type of RefundRequestApproveMutation."""
type RefundRequestApproveMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    refundRequest: RefundRequest
    status: Int!
}

"""The connection type for RefundRequest."""
type RefundRequestConnection {
    """A list of edges."""
    edges: [RefundRequestEdge]

    """A list of nodes."""
    nodes: [RefundRequest]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""Autogenerated input type of RefundRequestCreateMutation"""
input RefundRequestCreateMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ExternalID (key/value)."""
    externalIds: [KeyValueInput!] = []

    """Initiator of the refund request. The default value is ADMIN"""
    initiatedBy: RefundRequestInitiatorEnum

    """ID of the invoice."""
    invoiceId: ID!

    """Line items for which the refund is being requested."""
    lineItems: [RefundRequestLineItemInput!]!

    """Metadata key/value pairs"""
    metadata: [KeyValueInput!] = []

    """Notes on the refund request."""
    notes: [RefundRequestNoteInput!]!
}

"""Autogenerated return type of RefundRequestCreateMutation."""
type RefundRequestCreateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    refundRequest: RefundRequest
    status: Int!
}

input RefundRequestCustomLineItemApproveInput {
    """The commission component of the lineItemAmount. Denominated in cents."""
    commissionAmount: Int!

    """
    The tax amount on the commissionAmount. Denominated in cents. If one is not
    provided it will be calculated using commission_amount.
    """
    commissionTax: Int = null

    """
    Description of custom refund request line item that is not associated with an
    invoice line item (to be used only when creating a new custom refund request line item)
    """
    custom: String!

    """IDs used by external systems to fetch Prototypes"""
    externalIds: [KeyValueInput!] = []

    """The amount to be refunded to the shopper. Denominated in cents."""
    lineItemAmount: Int!

    """
    The tax amount on the lineItemAmount. Denominated in cents. If one is not
    provided it will be calculated using line_item_amount.
    """
    lineItemTax: Int = null

    """
    Tax rate for the custom line item (for display purposes only). Provide this
    value alongside lineItemTax. If not provided, it defaults to Marketplace
    default tax rate.
    """
    lineItemTaxRate: Decimal

    """The remittance component of the lineItemAmount. Denominated in cents."""
    remittanceAmount: Int!

    """
    The tax amount on the remittanceAmount. If one is not provided it will be calculated using commission_amount.
    """
    remittanceTax: Int = null
}

"""Autogenerated input type of RefundRequestDenyMutation"""
input RefundRequestDenyMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Notes to create."""
    notes: [RefundRequestNoteInput!]!

    """ID of the refund request."""
    refundRequestId: ID!
}

"""Autogenerated return type of RefundRequestDenyMutation."""
type RefundRequestDenyMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    refundRequest: RefundRequest
    status: Int!
}

"""An edge in a connection."""
type RefundRequestEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: RefundRequest
}

"""Attributes for filtering refund requests"""
input RefundRequestFilters {
    """Refund requests that are linked with this seller business name"""
    businessName: String = null

    """
    Refund requests that are linked with a buyer email address containing this value
    """
    buyerEmailAddress: String = null

    """
    Refund requests that are linked with a buyer name containing this value
    """
    buyerName: String = null

    """Refund requests created since this time"""
    createdSince: ISO8601DateTime = null

    """Refund requests created until this time"""
    createdUntil: ISO8601DateTime = null

    """Refund request with invoice id matching marketplacer database ID"""
    invoiceLegacyId: Int = null

    """Refund requests for invoices paid on this date"""
    invoicePaidAt: ISO8601Date = null

    """Refund request with matching marketplacer database ID"""
    legacyId: Int = null

    """Refund requests with ANY line item with one of these statuses"""
    lineItemStatuses: [RefundRequestLineItemStatusEnum!] = null

    """Refund requests refunded since this time"""
    refundedSince: ISO8601DateTime = null

    """Refund requests refunded until this time"""
    refundedUntil: ISO8601DateTime = null

    """Refund requests for remitted invoices"""
    remitted: Boolean = null

    """Refund requests with one of these statuses"""
    statuses: [RefundRequestStatusEnum!] = null
}

"""The initiator of this refund request."""
enum RefundRequestInitiatorEnum {
    """A marketplace operator"""
    ADMIN

    """A seller on this marketplace"""
    SELLER

    """A shopper at this marketplace"""
    BUYER
}

"""Line item on a refund request"""
type RefundRequestLineItem implements Node {
    """Money amount being requested for this refund. Denominated in cents."""
    amountCents: Int!

    """
    Money amount being requested for this refund. In string with currency symbol.
    """
    amountFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """Money amount for each item in this refund. Denominated in cents."""
    amountPerItemCents: Int!

    """
    Money amount for each item in this refund. In string with currency symbol.
    """
    amountPerItemFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """
    The refunded value of the commission of this line item. Denominated in cents.
    """
    commissionAmountCents: Int

    """
    The refunded value of the commission of this line item. In string with currency symbol.
    """
    commissionAmountFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """The value of the tax on the commissionAmount. Denominated in cents."""
    commissionTaxCents: Int

    """
    The value of the tax on the commissionAmount. In string with currency symbol.
    """
    commissionTaxFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """The reason of action deny refund"""
    denyRefundReason: String

    """
    Description of refund request line item (used only for custom line items not associated with invoice line items).
    """
    description: String

    """Does this refer to dispatched or not-yet-dispatched line items?"""
    dispatched: Boolean
    externalIds: [ExternalID!]!
    id: ID!
    legacyId: Int!

    """Invoice line item for which a refund is being requested."""
    lineItem: LineItem

    """
    The refunded value of the item/s of this line item. Denominated in cents.
    """
    lineItemAmountCents: Int

    """
    The refunded value of the item/s of this line item. In string with currency symbol.
    """
    lineItemAmountFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """The value of the tax on the lineItemAmount. Denominated in cents."""
    lineItemTaxCents: Int

    """
    The value of the tax on the lineItemAmount. In string with currency symbol.
    """
    lineItemTaxFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """Metadata key/values"""
    metadata: [Metadatum!]!

    """Notes associated with this refund request."""
    notes: [RefundRequestNote!]!

    """
    True if this line item only changes the amount to reclaim from the retailer
    (remittance). Only a marketplace operator can supply this field.
    """
    onlyRemittance: Boolean!

    """Quantity of the item for which a refund is being requested."""
    quantity: Int!

    """Reason the refund is being requested for this line item."""
    reason: String

    """The refund request for which this is a line item."""
    refundRequest: RefundRequest!

    """
    The refunded value of the remittance of this line item. Denominated in cents.
    """
    remittanceAmountCents: Int

    """
    The refunded value of the remittance of this line item. In string with currency symbol.
    """
    remittanceAmountFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """The value of the tax on the remittanceAmount. Denominated in cents."""
    remittanceTaxCents: Int

    """
    The value of the tax on the remittanceAmount. In string with currency symbol.
    """
    remittanceTaxFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """Shipments associated with this refund request line item."""
    shipments: [ReturnShipment!]!

    """The status of this refund request line item"""
    status: RefundRequestLineItemStatusEnum!
}

"""Autogenerated input type of RefundRequestLineItemAcceptMutation"""
input RefundRequestLineItemAcceptMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Notes to create."""
    notes: [RefundRequestNoteInput!]!
    refundRequestLineItemId: ID!
}

"""Autogenerated return type of RefundRequestLineItemAcceptMutation."""
type RefundRequestLineItemAcceptMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    refundRequestLineItem: RefundRequestLineItem
    status: Int!
}

input RefundRequestLineItemApproveInput {
    """The commission component of the lineItemAmount. Denominated in cents."""
    commissionAmount: Int!

    """
    The tax amount on the commissionAmount. Denominated in cents. If one is not
    provided it will be calculated using commission_amount.
    """
    commissionTax: Int = null

    """
    The ID for the refund request line item for refund. Supply only line items with status REFUND_ACCEPTED.
    """
    id: ID!

    """The amount to be refunded to the shopper. Denominated in cents."""
    lineItemAmount: Int!

    """
    The tax amount on the lineItemAmount. Denominated in cents. If one is not
    provided it will be calculated using line_item_amount.
    """
    lineItemTax: Int = null

    """The remittance component of the lineItemAmount. Denominated in cents."""
    remittanceAmount: Int!

    """
    The tax amount on the remittanceAmount. If one is not provided it will be calculated using commission_amount.
    """
    remittanceTax: Int = null
}

"""The status to start the refund request line item in."""
enum RefundRequestLineItemCreateStatusEnum {
    """
    When a refund request has been initiated, line items will go to the Pending
    Approval status. At this state the Seller needs to make a decision on wanting
    the item shipped back to them.
    """
    PENDING_APPROVAL

    """
    The line item will be in this status when a decision has been made to have the item shipped back to the Seller.
    """
    AWAITING_RETURN

    """
    The line item will be in this status when a decision has been made to not have
    the item shipped back to the Seller. The Seller wants a returnless refund.
    """
    REFUND_ACCEPTED
}

"""Autogenerated input type of RefundRequestLineItemDenyMutation"""
input RefundRequestLineItemDenyMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Reason for denying a refund for this line item."""
    denyRefundReason: String!

    """Notes to create."""
    notes: [RefundRequestNoteInput!]!
    refundRequestLineItemId: ID!
}

"""Autogenerated return type of RefundRequestLineItemDenyMutation."""
type RefundRequestLineItemDenyMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    refundRequestLineItem: RefundRequestLineItem
    status: Int!
}

"""
Line item on a refund request.

Either a line item ID (which must be a line item from the
invoice to which this refund request is related) and a reason OR both
custom and amountPerItem must be supplied.

If you supply a line item ID you must supply a reason and
cannot supply custom or amountPerItem. You should also supply
the dispatched flag: In January 2022 you will be _required_ to
supply the dispatched flag in this case.

If you supply custom and amountPerItem then you cannot supply
a line item ID, reason or dispatched flag.

"""
input RefundRequestLineItemInput {
    """Amount per item to be refunded. Denominated in cents."""
    amountPerItemCents: Int

    """Custom line item (e.g. return postage refund) description."""
    custom: String

    """
    This determines if the line item is a cancellation (not yet shipped) or a
    return. For a cancellation, mark this as false; For a return, mark this as true
    """
    dispatched: Boolean

    """IDs used by external systems to fetch Prototypes"""
    externalIds: [KeyValueInput!] = []

    """
    ID of the invoice line item to which this refund request line item refers.
    """
    lineItemId: ID

    """Metadata key/value pairs"""
    metadata: [KeyValueInput!] = []

    """Notes to create."""
    notes: [RefundRequestNoteInput!] = []

    """
    True if this line item only changes the amount to reclaim from the retailer
    (remittance). Only a marketplace operator can supply this field.
    """
    onlyRemittance: Boolean

    """Quantity of the item for which a refund is being requested."""
    quantity: Int!

    """Reason the refund is being requested for this line item."""
    reason: String

    """The status to start the refund request line item in."""
    status: RefundRequestLineItemCreateStatusEnum = AWAITING_RETURN
}

"""Autogenerated input type of RefundRequestLineItemReturnMutation"""
input RefundRequestLineItemReturnMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Notes to create."""
    notes: [RefundRequestNoteInput!]!
    refundRequestLineItemId: ID!
}

"""Autogenerated return type of RefundRequestLineItemReturnMutation."""
type RefundRequestLineItemReturnMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    refundRequestLineItem: RefundRequestLineItem
    status: Int!
}

"""The current status of an refund request line item."""
enum RefundRequestLineItemStatusEnum {
    """
    When a refund request has been initiated, line items will go to the Pending
    Approval status. At this state the Seller needs to make a decision on wanting
    the item shipped back to them.
    """
    PENDING_APPROVAL

    """
    The line item will be in this status when a decision has been made to have the item shipped back to the Seller.
    """
    AWAITING_RETURN

    """
    The line item will be in this status when a decision has been made to not have
    the item shipped back to the Seller. The Seller wants a returnless refund.
    """
    REFUND_ACCEPTED

    """
    When the Operator denies refunding the line item, then it moves to the Refund denied status.
    """
    REFUND_DENIED

    """
    When the Operator refunds the line item, then it moves to the Refunded status.
    """
    REFUNDED
}

"""Note on a refund request"""
type RefundRequestNote implements Node {
    """The admin who recorded the note."""
    admin: Admin

    """Receipts, documentation or photos related to the package received."""
    attachments: [Image!]!
    id: ID!

    """IP address of the person adding this note."""
    ipAddress: String

    """
    When this note was recorded, the status that the refund request or refund request line item was transitioned to.
    """
    newStatus: RefundRequestNoteStatusEnum!

    """Text of the note."""
    note: String

    """The refund request for which this is a note."""
    refundRequest: RefundRequest!

    """The refund request line item for which this is a note."""
    refundRequestLineItem: RefundRequestLineItem

    """Timestamp of when this note was recorded"""
    timestamp: ISO8601DateTime!

    """The customer who recorded the note."""
    user: User
}

"""The connection type for RefundRequestNote."""
type RefundRequestNoteConnection {
    """A list of edges."""
    edges: [RefundRequestNoteEdge]

    """A list of nodes."""
    nodes: [RefundRequestNote]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type RefundRequestNoteEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: RefundRequestNote
}

"""Note on a refund request"""
input RefundRequestNoteInput {
    """The admin who recorded the note."""
    adminId: ID

    """Receipts, documentation or photos related to the package received."""
    attachments: [ImageInput!]

    """
    IP address of the person adding this note. Will default to the ip address from the request if not submitted.
    """
    ipAddress: String = null

    """Text of the note."""
    note: String

    """
    The customer who recorded the note. Will default to the user from the API key if not submitted.
    """
    userId: ID = null
}

"""
The status of the refund request or refund request line item when the refund request note was created.
"""
enum RefundRequestNoteStatusEnum {
    """
    When the refund request is awaiting actions, usually when a line item is in Pending Approval or Awaiting Return status
    """
    AWAITING
    RETURNED

    """
    When all line items in the refund request are in the Refund Denied status
    """
    DENIED

    """
    When all line items in the refund request are in the Refund Accepted status
    """
    PROCESSED

    """
    When a refund request has been initiated, line items will go to the Pending
    Approval status. At this state the Seller needs to make a decision on wanting
    the item shipped back to them.
    """
    PENDING_APPROVAL

    """
    The line item will be in this status when a decision has been made to have the item shipped back to the Seller.
    """
    AWAITING_RETURN

    """
    The line item will be in this status when a decision has been made to not have
    the item shipped back to the Seller. The Seller wants a returnless refund.
    """
    REFUND_ACCEPTED

    """
    When the Operator denies refunding the line item, then it moves to the Refund denied status.
    """
    REFUND_DENIED

    """
    When the Operator refunds the line item, then it moves to the Refunded status.
    """
    REFUNDED
}

"""Autogenerated input type of RefundRequestRefundMutation"""
input RefundRequestRefundMutationInput {
    """Amount refunded (cash). In cents."""
    cashAmountCents: Int

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """
    Line items to add. Must be custom line items, not referencing an invoice line item.
    """
    newLineItems: [RefundRequestLineItemInput!]

    """Notes to create."""
    notes: [RefundRequestNoteInput!]!

    """ID of the refund request."""
    refundRequestId: ID!
}

"""Autogenerated return type of RefundRequestRefundMutation."""
type RefundRequestRefundMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    refundRequest: RefundRequest
    status: Int!
}

"""Autogenerated input type of RefundRequestReturnMutation"""
input RefundRequestReturnMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """
    Line items to add. Must be custom line items, not referencing an invoice line item.
    """
    newLineItems: [RefundRequestLineItemInput!]

    """Notes to create."""
    notes: [RefundRequestNoteInput!]!

    """ID of the refund request."""
    refundRequestId: ID!
}

"""Autogenerated return type of RefundRequestReturnMutation."""
type RefundRequestReturnMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    refundRequest: RefundRequest
    status: Int!
}

"""Autogenerated input type of RefundRequestRevertDenialMutation"""
input RefundRequestRevertDenialMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Notes to create."""
    notes: [RefundRequestNoteInput!]!

    """ID of the refund request."""
    refundRequestId: ID!
}

"""Autogenerated return type of RefundRequestRevertDenialMutation."""
type RefundRequestRevertDenialMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    refundRequest: RefundRequest
    status: Int!
}

"""Autogenerated input type of RefundRequestSpreadsheetDownloadMutation"""
input RefundRequestSpreadsheetDownloadMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    filters: RefundRequestFilters = null
    format: SpreadsheetEnum = CSV

    """ID of the seller. If omitted will return all refund requests"""
    sellerId: ID
}

"""Autogenerated return type of RefundRequestSpreadsheetDownloadMutation."""
type RefundRequestSpreadsheetDownloadMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    export: ImportExport
    status: Int!
}

"""The current status of an refund request."""
enum RefundRequestStatusEnum {
    """
    When the refund request is awaiting actions, usually when a line item is in Pending Approval or Awaiting Return status
    """
    AWAITING
    RETURNED
    REFUND_ACCEPTED
    REFUND_DENIED

    """When any line items in the refund request are in the Refunded status"""
    REFUNDED

    """
    When all line items in the refund request are in the Refund Denied status
    """
    DENIED

    """
    When all line items in the refund request are in the Refund Accepted status
    """
    PROCESSED
}

"""Remittance for invoice or invoice amendment"""
type Remittance implements Node {
    """The remittance amount Denominated in cents."""
    amountCents: Int!

    """The remittance amount In string with currency symbol."""
    amountFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """The value of the commission of this remittance. Denominated in cents."""
    commissionAmountCents: Int

    """
    The value of the commission of this remittance. In string with currency symbol.
    """
    commissionAmountFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String
    createdAt: ISO8601DateTime!
    id: ID!

    """Invoice"""
    invoice: Invoice

    """An amendment/change to an invoice. May be empty."""
    invoiceAmendment: InvoiceAmendment

    """Reasons that this remittance is pending"""
    pendingReasons: [String!]!
    released: Boolean!

    """The seller associated with the remittance."""
    seller: Seller!
}

"""Remittance action"""
type RemittanceAction {
    """The date the remittance action was completed."""
    completedAt: ISO8601DateTime

    """The date the remittance action was created."""
    createdAt: ISO8601DateTime

    """The destination of the remittance action, e.g. 'hyperwallet', 'xero'."""
    destination: String!
    id: ID!

    """The id used to identify the remittance action."""
    legacyId: Int!
    remittanceAdvice: RemittanceAdvice
    remittanceEvents: [RemittanceEvent!]!
}

"""Remittance advice"""
type RemittanceAdvice implements Node {
    """
    Supporting documents relating to actions taken on the remittance advice.
    """
    attachments: [Image!]!

    """
    The total value of the commission within this remittance advice. Denominated in cents.
    """
    commissionAmountTotalCents: Int

    """
    The total value of the commission within this remittance advice. In string with currency symbol.
    """
    commissionAmountTotalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """The date the remittance advice was created."""
    createdAt: ISO8601DateTime
    id: ID!

    """The id used to identify the remittance advice."""
    legacyId: Int!

    """The date the remittance advice was paid."""
    paidAt: ISO8601DateTime

    """External payment reference for the payment of the remittance advice."""
    paymentReference: String
    remittanceActions: [RemittanceAction!]!
    remittances: [Remittance!]!
    seller: Seller!

    """The total amount of the remittance advice Denominated in cents."""
    totalCents: Int!

    """
    The total amount of the remittance advice In string with currency symbol.
    """
    totalFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """The total amount paid on the remittance advice Denominated in cents."""
    totalPaidCents: Int

    """
    The total amount paid on the remittance advice In string with currency symbol.
    """
    totalPaidFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String
}

"""The connection type for RemittanceAdvice."""
type RemittanceAdviceConnection {
    """A list of edges."""
    edges: [RemittanceAdviceEdge]

    """A list of nodes."""
    nodes: [RemittanceAdvice]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type RemittanceAdviceEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: RemittanceAdvice
}

"""Autogenerated input type of RemittanceAdviceUpdateMutation"""
input RemittanceAdviceUpdateMutationInput {
    """
    Supporting documents relating to actions taken on the remittance advice.
    """
    attachments: [ImageInput!]

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """The date the remittance advice was paid."""
    paidAt: ISO8601DateTime

    """External payment reference for the payment of the remittance advice."""
    paymentReference: String

    """ID of the remittance advice."""
    remittanceAdviceId: ID!

    """
    Total paid to the seller on this remittance advice denominated in cents.
    """
    totalPaidCents: Int!
}

"""Autogenerated return type of RemittanceAdviceUpdateMutation."""
type RemittanceAdviceUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    remittanceAdvice: RemittanceAdvice
    status: Int!
}

"""The connection type for Remittance."""
type RemittanceConnection {
    """A list of edges."""
    edges: [RemittanceEdge]

    """A list of nodes."""
    nodes: [Remittance]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!

    """Total remittance amount"""
    totalRemittanceAmount: Money!
}

"""An edge in a connection."""
type RemittanceEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: Remittance
}

"""Remittance event"""
type RemittanceEvent {
    """Date the remittance event was created."""
    createdAt: ISO8601DateTime

    """Remittance Event ID."""
    eventId: Int!
    id: ID!

    """Success or error message."""
    message: String

    """Whether the remittance event was successful."""
    successful: Boolean
}

"""Autogenerated input type of RemittancesReleaseMutation"""
input RemittancesReleaseMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """IDs for remittances"""
    remittanceIds: [ID!]!
}

"""Autogenerated return type of RemittancesReleaseMutation."""
type RemittancesReleaseMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    remittances: [Remittance!]
    status: Int!
}

type RemittanceSummary {
    rows: [RemittanceSummaryRow!]!
    totals: RemittanceSummaryRow
}

enum RemittanceSummaryGroupBy {
    BY_YEAR
    BY_MONTH
    BY_DAY
}

type RemittanceSummaryRow {
    date: String!
    groupBy: SalesSummaryGroupBy!
    invoicesCount: BigInt!
    totalAmount: Money!
}

"""Autogenerated input type of ResetUserPasswordMutation"""
input ResetUserPasswordMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """The user's email address"""
    emailAddress: String!
}

"""Autogenerated return type of ResetUserPasswordMutation."""
type ResetUserPasswordMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

"""
Category label and category slug for building seller category search links
"""
type RetailerAccessConfig {
    canAccessInsightsAndStatistics: Boolean!
    canAccessMarketingTools: Boolean!
}

"""Shipment tracking information."""
type ReturnShipment implements Node {
    attachments: [Image!]!

    """Carrier"""
    carrier: ShipmentCarrier!
    createdAt: ISO8601DateTime!

    """Seller specified URL for a third-party drop-off location website"""
    dropOffUrl: String
    externalIds: [ExternalID!]!
    id: ID!
    legacyId: Int!

    """Metadata key/values"""
    metadata: [Metadatum!]!

    """Note on the shipment"""
    note: String
    refundRequest: RefundRequest!
    shippedItems: [ReturnShippedItem!]
    statusLog(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): ShipmentStatusConnection

    """Tracking #"""
    trackingNumber: String!
    updatedAt: ISO8601DateTime!
}

"""Autogenerated input type of ReturnShipmentCreateMutation"""
input ReturnShipmentCreateMutationInput {
    attachments: [ImageInput!] = []

    """ID of the carrier."""
    carrierId: ID!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Seller specified URL for a third-party drop-off location website"""
    dropOffUrl: String

    """ExternalID (key/value)."""
    externalIds: [KeyValueInput!] = []

    """Metadata (key/value)."""
    metadata: [KeyValueInput!] = []
    note: String

    """ID of the refund request."""
    refundRequestId: ID!
    shippedItems: [ReturnShippedItemInput!]!

    """Shipment carrier tracking number."""
    trackingNumber: String!
}

"""Autogenerated return type of ReturnShipmentCreateMutation."""
type ReturnShipmentCreateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    shipment: ReturnShipment
    status: Int!
}

"""Autogenerated input type of ReturnShipmentUpdateMutation"""
input ReturnShipmentUpdateMutationInput {
    attachments: [ImageInput!]
    carrierId: ID

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Seller specified URL for a third-party drop-off location website"""
    dropOffUrl: String

    """ExternalID (key/value)."""
    externalIds: [KeyValueInput!]

    """Metadata (key/value)."""
    metadata: [KeyValueInput!]
    note: String

    """ID of the refund request shipment."""
    shipmentId: ID!
    trackingNumber: String
}

"""Autogenerated return type of ReturnShipmentUpdateMutation."""
type ReturnShipmentUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    shipment: ReturnShipment
    status: Int!
}

"""
Quantity and LineItem which has been shipped as part of a parent ReturnShipment.
"""
type ReturnShippedItem implements Node {
    id: ID!

    """RefundRequestLineItem which has had the quantity of items shipped"""
    lineItem: RefundRequestLineItem!
    quantity: Int!
}

input ReturnShippedItemInput {
    """RefundRequestLineItem which has had the quantity of items shipped"""
    lineItemId: ID!
    quantity: Int!
}

type SalesSummary {
    rows: [SalesSummaryRow!]!
    totals: SalesSummaryRow
}

enum SalesSummaryGroupBy {
    BY_YEAR
    BY_MONTH
    BY_DAY
}

type SalesSummaryRow {
    commissionAmount: Money!
    consumerPaid: Money!
    date: String!
    groupBy: SalesSummaryGroupBy!
    merchantFee: Money!
    ordersTotal: BigInt!
    postage: Money!
    productSales: Money!
}

"""Properties of a single search field"""
union SearchField = FreeTextAndSelectField | FreeTextField | SelectField

"""Customization settings pertaining to search"""
type SearchSettings {
    """Save search postcode in user session"""
    saveSessionSearchPostcode: Boolean!

    """Show availability filter in search"""
    showAvailabilityFilter: Boolean!

    """Show brand filter in search"""
    showBrandFilter: Boolean!

    """Show condition filter in search"""
    showConditionFilter: Boolean!

    """Show gender filter in search"""
    showGenderFilter: Boolean!

    """Show model filter in search"""
    showModelFilter: Boolean!

    """Show seller filter in search"""
    showSellerFilter: Boolean!
}

"""Field where a list of predefined options is supplied"""
type SelectField {
    """Default selection value (as exists in `options`)"""
    defaultValue: String
    name: String!
    options: [SelectOption!]!
}

"""A single selectable option within a Select field"""
type SelectOption {
    label: String!
    value: String!
}

"""Retailer or private seller."""
type Seller implements Node {
    """Used to identify the Seller from an Account Management perspective"""
    accountCode: String

    """The bank's account name for direct debit."""
    accountName: String

    """The bank's account number for direct debit."""
    accountNumber: String

    """Account type of the Seller"""
    accountType: String
    address: Address

    """True if product vetting is enabled for the seller."""
    advertVettingRequired: Boolean!

    """True if API access is enabled for this seller."""
    apiEnabled: Boolean

    """
    Base Commission Level. Note: this is only visible when an API Key is provided,
    and excludes options like category based commissions.
    """
    baseCommissionRate: Float

    """Domestic shipping cost applied at the Seller level"""
    baseDomesticShippingCost: Float!

    """International shipping cost applied at the Seller level"""
    baseInternationalShippingCost: Float!

    """Bank State Branch for direct debit."""
    bsb: String

    """The seller's trading name."""
    businessName: String!

    """National business identification number (e.g. ABN in Australia)."""
    businessNumber: String!

    """Chat message"""
    chatMessages(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): ChatMessagesConnection!

    """Store Policies - Click and Collect Policy"""
    clickAndCollectPolicy: String

    """The commission package of the seller."""
    commissionPackage: CommissionPackage!

    """Commission package versions logs of the seller."""
    commissionPackageVersionLogs: [CommissionPackageVersionLog!]

    """only accessible to the seller"""
    createdAt: ISO8601DateTime

    """Customised fields for the seller."""
    customFieldGroups(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): EntityCustomFieldGroupConnection

    """Store Policies - Shipping and Delivery Policy"""
    deliveryDetails: String

    """Orders over this threshold value will qualify for free shipping"""
    domesticShippingFreeThreshold: Float
    emailAddress: String!

    """only accessible to the seller"""
    emailCc: String

    """True if advert auto mapping is enabled for the seller"""
    enableAdvertAutoMapping: Boolean!

    """True if wholesale and rrp pricing are enabled for the seller"""
    enableWholesalePricing: Boolean!

    """True if wholesale pricing promo is enabled for the seller"""
    enableWholesalePricingPromo: Boolean!

    """True if seller is allowed to mark variants as wholesale"""
    enableWholesaleProduct: Boolean!
    externalIds: [ExternalID!]!

    """This field identifies sellers that have a stored payment method"""
    hasStoredPaymentMethod: Boolean!

    """True if seller has unpaid billings"""
    hasUnpaidBillings: Boolean!
    id: ID!

    """Image gallery data for the shop page"""
    imageGallery: ImageGallery!

    """True if seller is allowed to initiate refunds"""
    initiateRefundsEnabled: Boolean

    """True if Integrations manager is enabled for this seller"""
    integrationsManagerEnabled: Boolean

    """Seller authenticated url for the integration manager auth path"""
    integrationsManagerUrl: String

    """True if seller enabled international shipping"""
    internationalShippingEnabled: Boolean!

    """
    Orders over this threshold value will qualify for free international shipping
    """
    internationalShippingFreeThreshold: Float

    """
    Maximum number of days allowed for dispatching an invoice. If the value is
    nil, the system will use the operator setting to measure SLA.
    """
    invoiceDispatchDaysThreshold: Int

    """True if seller is billable"""
    isBillable: Boolean!

    """True if the seller is a private store"""
    isPrivate: Boolean!

    """True if the seller is a retailer"""
    isRetailer: Boolean!

    """Last stored payment method used by the seller"""
    lastStoredPaymentMethod: StoredPaymentMethod

    """The id used to identify the seller."""
    legacyId: Int!

    """only accessible to the seller"""
    legalBusinessName: String!

    """The company logo for the seller."""
    logo: Image

    """The company logo url for the seller."""
    logoUrl: String @deprecated(reason: "Deprecated as of March 2023. Use logo instead")

    """Url for the seller contact page"""
    mailToUrl: String!
    managedMultiStore: MultiStore

    """Collection of all Marketplacer API keys belonging to the seller"""
    marketplacerApiKeys: [MarketplacerAPIKey!]!
    marketplaceShippingRulesEnabled: Boolean!

    """Metadata key/values"""
    metadata: [Metadatum!]!

    """Pending remittance process as missing Hyperwallet details"""
    missingHyperwalletDetails: Boolean!

    """Pending remittance process because of missing remittance details"""
    missingRemittanceDetails: Boolean!

    """Pending remittance process due to missing Xero account"""
    missingXeroAccount: Boolean!

    """only accessible to the seller"""
    mobile: String

    """True if customisable storefront is enabled for the seller"""
    mStoreEnabled: Boolean!

    """True if the seller is the parent of multiple stores"""
    multiStoreParent: Boolean!

    """The phone number of the seller, obscured"""
    obscuredPhone: String

    """Shows if seller is online"""
    online: Boolean!

    """True if the seller is online only"""
    onlineOnly: Boolean!
    openingHours: String

    """Payment method for the seller"""
    paymentMethod: String

    """Pending remittance process because of Hyperwallet verification status"""
    pendingHyperwalletVerification: Boolean!

    """The phone number of the seller"""
    phone: String!
    policies: SellerPolicies!

    """only accessible to the seller"""
    posType: String

    """only accessible to the seller"""
    primaryUser: User

    """True if product limits are enabled for the seller"""
    productLimitsEnabled: Boolean
    rating: SellerRating

    """True if allow order cancellations is enabled for this seller"""
    refundRequestAllowed: Boolean

    """only accessible to the seller"""
    registeredForTax: Boolean!

    """The bank's account name for remittance."""
    remittanceAccountName: String

    """The bank's account number for remittance."""
    remittanceAccountNumber: String

    """Bank State Branch for remittance."""
    remittanceBsb: String

    """This field identifies sellers that require payment details for billing"""
    requiresPaymentDetailsForBilling: Boolean!

    """Retailer Access Config details for Sellers"""
    retailerAccessConfig: RetailerAccessConfig

    """Store Policies - Exchange Policy"""
    returnPolicy: String

    """True if the seller is contactable"""
    sellerIsContactable: Boolean!

    """Rating associated to the seller by admin"""
    sellerRating: String

    """Store Policies - Customer Service Policy"""
    servicePolicy: String

    """
    Addresses for invoices to be shipped from. Only accessible to the seller
    """
    shipmentAddresses: [Address!]

    """
    Path to a retailer-specific advert search results page that only shows adverts from the given seller.
    """
    shopAdvertSearchPath: String

    """True if we can display the image gallery"""
    showImageGallery: Boolean!

    """True if we can show the phone number of the seller"""
    showPhoneNumber: Boolean!

    """Seller SLA rating value based on recent performance"""
    slaRating: Float

    """Only applies to professional retailer accounts."""
    storeCategory: String
    storeDescription: String

    """The store description html for the seller."""
    storeDescriptionHtml: String!
    storeImages: [Image!]!

    """SEO content html for the seller"""
    storeSeoContentHtml: String!

    """only accessible to the seller"""
    tags: [String!]

    """True if seller is required to add a tracking number on a line item."""
    trackingInformationRequiredForBulkDispatch: Boolean

    """The category with which the Seller is associated"""
    trade: String

    """Text below will appear on all ads"""
    underAdDescription: String

    """Your store details to include with all ads"""
    underAdImpressum: String
    updatedAt: ISO8601DateTime!

    """only accessible to the seller"""
    users(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): UserConnection!

    """Store Video (retailer page)"""
    youtubeVideoUrl: String

    """
    Pending remittance process because of zero or negative total remittance amount
    """
    zeroOrNegativeTotalRemittanceAmount: Boolean!
}

"""Seller account type"""
enum SellerAccountTypeEnum {
    """Prospective retailer account requiring admin review"""
    PROSPECTIVE

    """Retailer account"""
    RETAILER
}

"""
Autogenerated input type of SellerAdyenBillingPaymentMethodUpdateMutation
"""
input SellerAdyenBillingPaymentMethodUpdateMutationInput {
    """Data used to persist a payment method for Adyen."""
    attributes: JSON!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    sellerId: ID = null
}

"""
Autogenerated return type of SellerAdyenBillingPaymentMethodUpdateMutation.
"""
type SellerAdyenBillingPaymentMethodUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    response: AdyenResponse
    seller: Seller
    status: Int!
}

"""
Autogenerated input type of SellerBraintreeBillingPaymentMethodUpdateMutation
"""
input SellerBraintreeBillingPaymentMethodUpdateMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    paymentMethodNonce: String!
    sellerId: ID = null
}

"""
Autogenerated return type of SellerBraintreeBillingPaymentMethodUpdateMutation.
"""
type SellerBraintreeBillingPaymentMethodUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    seller: Seller
    status: Int!
}

"""
Category label and category slug for building seller category search links
"""
type SellerCategoryLink {
    categoryLabel: String!
    categorySlug: String!
}

"""The connection type for Seller."""
type SellerConnection {
    """A list of edges."""
    edges: [SellerEdge]

    """A list of nodes."""
    nodes: [Seller]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""Autogenerated input type of SellerCreateMutation"""
input SellerCreateMutationInput {
    """Attributes for creating a seller."""
    attributes: SellerInput!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
}

"""Autogenerated return type of SellerCreateMutation."""
type SellerCreateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    seller: Seller
    status: Int!
    user: User
}

"""An edge in a connection."""
type SellerEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: Seller
}

"""
Minimal subset of Seller type which can be used to build a
seller filter for advert search
"""
type SellerFilterOption {
    businessName: String!

    """The number of adverts associated with each seller filter option"""
    count: Int!
    id: ID!
}

"""Coordinates of a Seller"""
type SellerGeolocation {
    address: AddressGeolocation!
    id: ID!

    """The category slug with which the Seller is associated"""
    sellerCategorySlug: String
}

"""Attributes for creating a seller."""
input SellerInput {
    """Seller account type"""
    accountType: SellerAccountTypeEnum!

    """Seller business address"""
    address: AddressInput!

    """Business name for account"""
    businessName: String!

    """Business registration code (eg: ABN)"""
    businessRegistrationCode: String

    """Attributes to assign to the CustomField."""
    customFields: [CustomFieldValueInput!]

    """Business email address"""
    emailAddress: String

    """Notification cc email address"""
    emailCc: String

    """To enable advert auto mapping feature"""
    enableAdvertAutoMapping: Boolean

    """
    Maximum number of days allowed for dispatching an invoice. If the value is
    nil, the system will use the operator setting to measure SLA.
    """
    invoiceDispatchDaysThreshold: Int

    """Registered legal business name"""
    legalBusinessName: String!
    logo: ImageInput

    """Metadata (key/value)."""
    metadata: [KeyValueInput!]

    """Business mobile contact number"""
    mobile: String

    """Business phone contact number"""
    phone: String!

    """POS type used by seller"""
    posType: String
    storeDescription: String

    """List of seller tags"""
    tags: [String!]

    """Attributes to assign to the user account."""
    user: UserCreateInput!
}

"""Seller policies regarding products and/or services."""
type SellerPolicies {
    returnPolicy: String!
    servicePolicy: String!
    shippingPolicy: String!
    storePickupPolicy: String!
}

"""Rating data for Seller"""
type SellerRating {
    """The number of ratings that have been submitted"""
    count: Int!

    """ID that belongs to this seller from the third party rating provider"""
    externalId: String

    """Averaged star-rating of all submitted reviews (1-5)"""
    stars: Float!
}

"""The connection type for Seller."""
type SellersConnection {
    """A list of edges."""
    edges: [SellerEdge]

    """A list of nodes."""
    nodes: [Seller]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""Seller search arguments for building an ElasticSearch query."""
input SellerSearchInput {
    """
    Search by name of the company or store. Includes partial text matches in results.
    """
    businessName: String

    """
    Official name of a city or suburb. Takes precedence over postcode if both are provided.
    """
    city: String

    """
    Include sellers within this distance of the location searched.
    NOTE: As of June 2020, this currently defaults to 10 kms or miles
    (depending on country), but this will be deprecated in favour
    of defaulting to no limit on distance from the queried location.
    """
    distance: Int = 10

    """
    Flag to filter sellers to only those that have valid geocode data. Defaults to false.
    """
    geocoded: Boolean

    """Filter by ID of the seller."""
    id: ID

    """
    Whether to ignore the distance argument
    in favour of not limiting seller results by distance from the queried location.
    NOTE: As of June 2020, this is a temporary field that will be deprecated
    once the default for distance is changed from 10 to nil.
    """
    ignoreDistance: Boolean = false

    """Filter by the metadata (exact match only)."""
    metadata: [KeyValueInput!]

    """Flag to filter sellers to online only stores. Defaults to nil."""
    onlineOnly: Boolean

    """Postcode/Zip code. Postcode will be ignored if city is also provided."""
    postcode: String

    """Filter by store category."""
    sellerCategory: String

    """Filter by the URL slug of the store category."""
    sellerCategorySlug: String

    """
    Full, official name of a state, region, or territory.
    State will be ignored if city or postcode is provided and is in a different state.
    """
    state: String

    """Only return sellers which have been updated since this date"""
    updatedSince: ISO8601DateTime = null
}

"""Pagination info returned by ElasticSearch with query results."""
type SellerSearchPagination {
    """
    Current page of the search results as determined by the associated query parameter.
    """
    currentPage: Int! @deprecated(reason: "Use the relay style pagination on sellers directly")

    """
    Number of results per page as determined by the associated query parameter.
    """
    resultsPerPage: Int! @deprecated(reason: "Use the relay style pagination on sellers directly")

    """Total number of results divided by results per page."""
    totalPages: Int! @deprecated(reason: "Use the relay style pagination on sellers directly")

    """Total number of results."""
    totalResults: Int! @deprecated(reason: "Use the relay style pagination on sellers directly")
}

"""
Advert search arguments for controlling pagination. NOTE: As of the 3rd of Sept.
2019, These arguments are deprecated in favour of using cursor-based pagination
per the Relay spec and will be removed at the end of Sept. 2019.
"""
input SellerSearchPaginationInput {
    """Which page of the results you want to display."""
    currentPage: Int

    """How many results you want per page."""
    resultsPerPage: Int
}

"""Seller search response payload."""
type SellerSearchResponse {
    pagination: SellerSearchPagination! @deprecated(reason: "Use the relay style pagination on sellers directly")
    sellers(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """Returns the first _n_ elements from the list."""
        first: Int
    ): SellersConnection!
    seoContent: SeoContent
}

"""Autogenerated input type of SellerSendInvoiceToCustomerMutation"""
input SellerSendInvoiceToCustomerMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    invoiceId: ID = null
}

"""Autogenerated return type of SellerSendInvoiceToCustomerMutation."""
type SellerSendInvoiceToCustomerMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

"""The connection type for Seller."""
type SellersForChatsConnection {
    """A list of edges."""
    edges: [SellersForChatsEdge]

    """A list of nodes."""
    nodes: [Seller]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type SellersForChatsEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: Seller
}

"""Autogenerated input type of SellerSlaExportMetricMutation"""
input SellerSlaExportMetricMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    rollingDateWindow: Int = null
}

"""Autogenerated return type of SellerSlaExportMetricMutation."""
type SellerSlaExportMetricMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    export: ImportExport
    status: Int!
}

"""Specify desired SLA rating ranges."""
input SellerSlaRatingRangeInput {
    """Rating greater than or equal to the given value"""
    gte: Float

    """Rating less than or equal to the given value"""
    lte: Float
}

"""Insights and Statistics for a Seller."""
type SellerStats implements Node {
    advertStatisticsSummary(
        numMonths: Int

        """Defaults to current year """
        year: Int
    ): [AdvertStatisticsSummary!]!

    """ID of the object."""
    id: ID!
    remittanceSummary(
        groupBy: RemittanceSummaryGroupBy = BY_YEAR

        """Only required for BY_DAY"""
        month: Int

        """Only required for BY_MONTH and BY_DAY"""
        year: Int
    ): RemittanceSummary!
    salesSummaryV2(
        groupBy: SalesSummaryGroupBy = BY_YEAR

        """Only required for BY_DAY"""
        month: Int

        """Only required for BY_MONTH and BY_DAY"""
        year: Int
    ): SalesSummary!
    seller: Seller!
}

"""Attributes for sorting sellers"""
input SellersWhereSort {
    """Fields to sort sellers"""
    fields: [SellersWhereSortFieldEnum!]! = [CREATED_AT]

    """Ordering to sort the results"""
    ordering: SortOrderingEnum = ASCENDING
}

"""The field that is used to sort sellers"""
enum SellersWhereSortFieldEnum {
    CREATED_AT
    BUSINESS_NAME
    SLA_RATING
}

"""Attributes for updating a seller."""
input SellerUpdateInput {
    """The bank's account name for direct debit."""
    accountName: String

    """The bank's account number for direct debit."""
    accountNumber: String

    """Seller business address"""
    address: AddressInput

    """Domestic shipping cost applied at the Seller level"""
    baseDomesticShippingCost: Decimal

    """International shipping cost applied at the Seller level"""
    baseInternationalShippingCost: Decimal

    """Bank State Branch for direct debit."""
    bsb: String

    """Business name for account"""
    businessName: String

    """National business identification number (e.g. ABN in Australia)."""
    businessNumber: String

    """Store Policies - Click and Collect Policy"""
    clickAndCollectPolicy: String

    """Attributes to assign to the CustomField."""
    customFields: [CustomFieldValueInput!]

    """Store Policies - Shipping and Delivery Policy"""
    deliveryDetails: String

    """Orders over this threshold value will qualify for free shipping"""
    domesticShippingFreeThreshold: Decimal

    """Business email address"""
    emailAddress: String

    """Notification cc email address"""
    emailCc: String

    """To enable advert auto mapping feature"""
    enableAdvertAutoMapping: Boolean

    """True if seller enabled international shipping"""
    internationalShippingEnabled: Boolean

    """
    Orders over this threshold value will qualify for free international shipping
    """
    internationalShippingFreeThreshold: Decimal

    """
    Maximum number of days allowed for dispatching an invoice. If the value is
    nil, the system will use the operator setting to measure SLA.
    """
    invoiceDispatchDaysThreshold: Int

    """Registered legal business name"""
    legalBusinessName: String
    logo: ImageInput
    marketplaceShippingRulesEnabled: Boolean

    """Metadata (key/value). Will upsert values."""
    metadata: [KeyValueInput!]

    """Business mobile contact number"""
    mobile: String
    openingHours: String

    """Business phone contact number"""
    phone: String

    """POS type used by seller"""
    posType: String

    """only accessible to the seller"""
    registeredForTax: Boolean

    """The bank's account name for remittance."""
    remittanceAccountName: String

    """The bank's account number for remittance."""
    remittanceAccountNumber: String

    """Bank State Branch for remittance."""
    remittanceBsb: String

    """Store Policies - Exchange Policy"""
    returnPolicy: String

    """Store Policies - Customer Service Policy"""
    servicePolicy: String

    """True if we can display the image gallery"""
    showImageGallery: Boolean
    storeDescription: String
    storeImages: [ImageInput!]

    """List of seller tags"""
    tags: [String!]

    """Text below will appear on all ads"""
    underAdDescription: String

    """Your store details to include with all ads"""
    underAdImpressum: String

    """Store Video (retailer page)"""
    youtubeVideoUrl: String
}

"""Autogenerated input type of SellerUpdateMutation"""
input SellerUpdateMutationInput {
    """Attributes to assign to the seller."""
    attributes: SellerUpdateInput = null

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    sellerId: ID = null
}

"""Autogenerated return type of SellerUpdateMutation."""
type SellerUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    seller: Seller
    status: Int!
}

"""Sendgrid settings"""
type SendgridSettings {
    apiKey: String
    category: CategoryTypeEnum!
    description: String!
    edmEnabled: Boolean!
    logoUrl: String!
    providerHandle: String!
    providerName: String!
    status: StatusTypeEnum!
    useLegacyCampaigns: Boolean
}

"""Autogenerated input type of SendgridSettingsCreateOrUpdateMutation"""
input SendgridSettingsCreateOrUpdateMutationInput {
    """SendGrid API key."""
    apiKey: String!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Use SendGrid legacy Marketing Campaigns API?"""
    useLegacyCampaigns: Boolean!
}

"""Autogenerated return type of SendgridSettingsCreateOrUpdateMutation."""
type SendgridSettingsCreateOrUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    sendgridSettings: SendgridSettings
    status: Int!
}

"""Autogenerated input type of SendgridSettingsDeleteMutation"""
input SendgridSettingsDeleteMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
}

"""Autogenerated return type of SendgridSettingsDeleteMutation."""
type SendgridSettingsDeleteMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    sendgridSettings: SendgridSettings
    status: Int!
}

"""SEO specific content for a particular page. Eg. advert search page"""
type SeoContent implements Node {
    """Content to use above the main content of the page"""
    contentAboveHtml: String!

    """Content to use below the main content of the page"""
    contentBelowHtml: String!

    """Text for use as the page description"""
    description: String!

    """Text for use as the content of the main heading on the page"""
    heading: String!
    id: ID!

    """Text for use as the page title"""
    title: String!
}

"""Properties of the current session"""
type SessionData {
    """True if an admin is logged in"""
    adminLoggedIn: Boolean!
}

"""Autogenerated input type of SessionLocationInformationUpdateMutation"""
input SessionLocationInformationUpdateMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Location slug for filtering search results"""
    locationSlug: String

    """Postcode for filtering search results"""
    postcode: String

    """Region name for filtering search results"""
    regionName: String

    """True if we want to show the location modal"""
    showLocationModal: Boolean!
}

"""Autogenerated return type of SessionLocationInformationUpdateMutation."""
type SessionLocationInformationUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    locationSlug: String
    postcode: String
    regionName: String
    showLocationModal: String
    status: Int!
}

"""Autogenerated input type of SessionTokenLogOutMutation"""
input SessionTokenLogOutMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
}

"""Autogenerated return type of SessionTokenLogOutMutation."""
type SessionTokenLogOutMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    loggedOut: Boolean
    status: Int!
}

"""Shipment tracking information."""
type Shipment implements Node {
    """Carrier"""
    carrier: String!
    createdAt: ISO8601DateTime!

    """The date the shipment was dispatched."""
    dispatchedAt: ISO8601DateTime!
    externalIds: [ExternalID!]!

    """Homepage Link URL"""
    homepageLink: String
    id: ID!
    invoice: Invoice!
    legacyId: Int!

    """Metadata key/values"""
    metadata: [Metadatum!]!

    """Note on the shipment"""
    note: String

    """Where the item was shipped from (Seller only)"""
    shippedFrom: Address
    shippedItems: [ShippedItem!]
    statusLog(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): ShipmentStatusConnection

    """Tracking Link URL"""
    trackingLink: String

    """Tracking #"""
    trackingNumber: String!
    updatedAt: ISO8601DateTime!
}

"""Autogenerated input type of ShipmentAddressCreateMutation"""
input ShipmentAddressCreateMutationInput {
    address: AddressInput!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """
    ID of the seller. May be omitted if using a seller api key, but is required otherwise
    """
    sellerId: ID
}

"""Autogenerated return type of ShipmentAddressCreateMutation."""
type ShipmentAddressCreateMutationPayload {
    address: Address

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

"""Autogenerated input type of ShipmentAddressSortMutation"""
input ShipmentAddressSortMutationInput {
    addressIds: [ID!]!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """
    ID of the seller. May be omitted if using a seller api key, but is required otherwise
    """
    sellerId: ID
}

"""Autogenerated return type of ShipmentAddressSortMutation."""
type ShipmentAddressSortMutationPayload {
    addresses: [Address!]

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

"""Shipment carriers available to assign to a shipment."""
type ShipmentCarrier implements Node {
    """The url for the homepage of the shipment carrier website"""
    homepageUrl: String
    id: ID!

    """The name of the Shipment Carrier"""
    name: String!

    """
    The base tracking url for the carrier, used in combination with a tracking number.
    """
    trackingUrl: String
}

"""The connection type for ShipmentCarrier."""
type ShipmentCarrierConnection {
    """A list of edges."""
    edges: [ShipmentCarrierEdge]

    """A list of nodes."""
    nodes: [ShipmentCarrier]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type ShipmentCarrierEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: ShipmentCarrier
}

"""Autogenerated input type of ShipmentCreateMutation"""
input ShipmentCreateMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    dispatchedAt: ISO8601Date!

    """ID of the invoice."""
    invoiceId: ID!
    note: String
    postageCarrierId: ID!

    """See Seller.shipmentAddresses for available address ids."""
    shippedFromId: ID
    shippedItems: [ShippedItemInput!]!
    trackingNumber: String!
}

"""Autogenerated return type of ShipmentCreateMutation."""
type ShipmentCreateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    shipment: Shipment
    status: Int!
}

"""Shipment status log."""
type ShipmentStatus implements Node {
    createdAt: ISO8601DateTime!
    id: ID!
    shipment: ShipmentUnion!
    status: ShipmentStatusEnum!
}

"""The connection type for ShipmentStatus."""
type ShipmentStatusConnection {
    """A list of edges."""
    edges: [ShipmentStatusEdge]

    """A list of nodes."""
    nodes: [ShipmentStatus]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""Autogenerated input type of ShipmentStatusCreateMutation"""
input ShipmentStatusCreateMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    shipmentId: ID!
    status: ShipmentStatusEnum!
}

"""Autogenerated return type of ShipmentStatusCreateMutation."""
type ShipmentStatusCreateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    shipmentStatus: ShipmentStatus
    status: Int!
}

"""An edge in a connection."""
type ShipmentStatusEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: ShipmentStatus
}

enum ShipmentStatusEnum {
    """
    Carrier has received request from shipper and is about to pick up the shipment.
    """
    InfoReceived

    """
    Carrier has accepted or picked up shipment from shipper. The shipment is on the way.
    """
    InTransit

    """Carrier is about to deliver the shipment , or it is ready to pickup."""
    OutForDelivery

    """
    Carrier attempted to deliver but failed, and usually leaves a notice and will try to deliver again.
    """
    AttemptFail

    """The shipment was delivered successfully."""
    Delivered

    """
    The package arrived at a pickup point near you and is available for pickup.
    """
    AvailableForPickup

    """
    Custom hold, undelivered, returned shipment to sender or any shipping exceptions.
    """
    Exception

    """Shipment has no tracking information for 30 days since added."""
    Expired

    """
    New shipments added that are pending to track, or new shipments without tracking information available yet.
    """
    Pending
}

union ShipmentUnion = ReturnShipment | Shipment

"""Autogenerated input type of ShipmentUpdateMutation"""
input ShipmentUpdateMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    dispatchedAt: ISO8601DateTime
    note: String
    postageCarrierId: ID

    """ID of the shipment."""
    shipmentId: ID!

    """See Seller.shipmentAddresses for available address ids."""
    shippedFromId: ID
    trackingNumber: String
}

"""Autogenerated return type of ShipmentUpdateMutation."""
type ShipmentUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    shipment: Shipment
    status: Int!
}

"""
Quantity and LineItem which has been shipped as part of a parent Shipment.
"""
type ShippedItem implements Node {
    id: ID!

    """LineItem which has had the quantity of items shipped"""
    lineItem: LineItem!
    quantity: Int!
}

input ShippedItemInput {
    """LineItem which has had the quantity of items shipped"""
    lineItemId: ID!
    quantity: Int!
}

"""A shipping rule that might apply to a certain variant"""
type ShippingOption implements Node {
    """Description for the shipping rule"""
    description: String
    id: ID!

    """The name used to identify the shipping rule"""
    name: String!

    """
    The seller who created the shipping rule. If null then it was created by the marketplace owner
    """
    seller: Seller
    shippingProfiles(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): ShippingProfileConnection
    shippingRates(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): ShippingRateConnection
    shippingZones(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): ShippingZoneConnection

    """The type of shipping rule. Returns either 'marketplace' or 'seller'"""
    type: String!
    updatedAt: ISO8601DateTime!
}

"""The connection type for ShippingOption."""
type ShippingOptionConnection {
    """A list of edges."""
    edges: [ShippingOptionEdge]

    """A list of nodes."""
    nodes: [ShippingOption]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""Autogenerated input type of ShippingOptionDeleteMutation"""
input ShippingOptionDeleteMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID of the advert to mark as deleted"""
    id: ID!
}

"""Autogenerated return type of ShippingOptionDeleteMutation."""
type ShippingOptionDeleteMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    shippingOption: ShippingOption
    status: Int!
}

"""An edge in a connection."""
type ShippingOptionEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: ShippingOption
}

"""Attributes for filtering shipping options"""
input ShippingOptionFilters {
    """ShippingOptions updated since this time"""
    updatedSince: ISO8601DateTime = null

    """ShippingOptions updated until this time"""
    updatedUntil: ISO8601DateTime = null
}

input ShippingOptionUpsertInput {
    description: String
    name: String!
    shippingProfileIds: [ID!]!
    shippingRateIds: [ID!]!
    shippingZoneIds: [ID!]!
}

"""Autogenerated input type of ShippingOptionUpsertMutation"""
input ShippingOptionUpsertMutationInput {
    """Attributes to assign to the shipping rule."""
    attributes: ShippingOptionUpsertInput!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    sellerId: ID = null
    shippingOptionId: ID
}

"""Autogenerated return type of ShippingOptionUpsertMutation."""
type ShippingOptionUpsertMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    shippingOption: ShippingOption
    status: Int!
}

"""Shipping Parcel dimensions and weight."""
type ShippingParcel implements Node {
    depth: Float

    """Depth converted from 'distance_unit' to 'cm'"""
    depthInCm: Float
    distanceUnit: String!
    id: ID!
    length: Float

    """Length converted from 'distance_unit' to 'cm'"""
    lengthInCm: Float
    massUnit: String!
    weight: Float

    """Weight converted from 'mass_unit' to 'kg'"""
    weightInKg: Float
    width: Float

    """Width converted from 'distance_unit' to 'cm'"""
    widthInCm: Float
}

"""The distance type as permitted by a Shipping Parcel"""
enum ShippingParcelDistanceEnum {
    """Distance as Centimeters."""
    cm

    """Distance as Millimeters."""
    mm

    """Distance as Meters."""
    m

    """Distance as Inches."""
    in

    """Distance as Feet."""
    ft

    """Distance as Yards."""
    yd
}

input ShippingParcelInput {
    depth: Float

    """Measurement unit for distances. Null values are not accepted."""
    distanceUnit: ShippingParcelDistanceEnum
    length: Float

    """Measurement unit for weight. Null values are not accepted."""
    massUnit: ShippingParcelMassEnum
    weight: Float
    width: Float
}

"""The mass type as permitted by a Shipping Parcel."""
enum ShippingParcelMassEnum {
    """Mass as Kilograms."""
    kg

    """Mass as Grams."""
    g

    """Mass as Ounces."""
    oz

    """Mass as Pounds."""
    lb
}

"""A shipping rule that might apply to a certain variant"""
type ShippingProfile implements Node {
    """The description used to describe the shipping profile"""
    description: String!
    id: ID!

    """This is the Legacy ID field for Shipping Profiles"""
    legacyId: ID!

    """The name used to identify the shipping profile"""
    name: String!
}

"""The connection type for ShippingProfile."""
type ShippingProfileConnection {
    """A list of edges."""
    edges: [ShippingProfileEdge]

    """A list of nodes."""
    nodes: [ShippingProfile]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type ShippingProfileEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: ShippingProfile
}

"""A shipping rate defined in the marketplace"""
type ShippingRate implements Node {
    id: ID!

    """The name used to identify the shipping rate"""
    name: String!

    """ Denominated in cents."""
    rateCents: Int!

    """ In string with currency symbol."""
    rateFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String!

    """
    The seller who created the shipping rate. If null then it was created by the marketplace owner
    """
    seller: Seller
}

"""The connection type for ShippingRate."""
type ShippingRateConnection {
    """A list of edges."""
    edges: [ShippingRateEdge]

    """A list of nodes."""
    nodes: [ShippingRate]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""Autogenerated input type of ShippingRateCreateOrUpdateMutation"""
input ShippingRateCreateOrUpdateMutationInput {
    """Attributes to assign to the shipping rate."""
    attributes: ShippingRateInput!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    sellerId: ID = null
    shippingRateId: ID
}

"""Autogenerated return type of ShippingRateCreateOrUpdateMutation."""
type ShippingRateCreateOrUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    shippingRate: ShippingRate
    status: Int!
}

"""Autogenerated input type of ShippingRateDeleteMutation"""
input ShippingRateDeleteMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID of the shipping rate to delete"""
    id: ID!
}

"""Autogenerated return type of ShippingRateDeleteMutation."""
type ShippingRateDeleteMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    shippingRate: ShippingRate
    status: Int!
}

"""An edge in a connection."""
type ShippingRateEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: ShippingRate
}

input ShippingRateInput {
    name: String!
    rate: Decimal!
}

"""
A shipping area defined in the marketplace which consists of multiple postcodes
"""
type ShippingZone implements Node {
    """Description for the shipping zone"""
    description: String
    id: ID!

    """The name used to identify the shipping zone"""
    name: String!
    postcodes: [String!]

    """
    The seller who created the shipping zone. If null then it was created by the marketplace owner
    """
    seller: Seller
}

"""The connection type for ShippingZone."""
type ShippingZoneConnection {
    """A list of edges."""
    edges: [ShippingZoneEdge]

    """A list of nodes."""
    nodes: [ShippingZone]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""Autogenerated input type of ShippingZoneCreateOrUpdateMutation"""
input ShippingZoneCreateOrUpdateMutationInput {
    """Attributes to assign to the shipping zone."""
    attributes: ShippingZoneInput!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    sellerId: ID = null
    shippingZoneId: ID
}

"""Autogenerated return type of ShippingZoneCreateOrUpdateMutation."""
type ShippingZoneCreateOrUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    shippingZone: ShippingZone
    status: Int!
}

"""Autogenerated input type of ShippingZoneDeleteMutation"""
input ShippingZoneDeleteMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID of the shipping zone to delete"""
    id: ID!
}

"""Autogenerated return type of ShippingZoneDeleteMutation."""
type ShippingZoneDeleteMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    shippingZone: ShippingZone
    status: Int!
}

"""An edge in a connection."""
type ShippingZoneEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: ShippingZone
}

input ShippingZoneInput {
    description: String
    name: String!
    spreadsheet: FileInput
}

"""Autogenerated input type of ShippingZoneSpreadsheetDownloadMutation"""
input ShippingZoneSpreadsheetDownloadMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    format: SpreadsheetEnum = XLSX

    """
    ID of the shipping zone to export. Returns blank template file if not provided.
    """
    shippingZoneId: ID
}

"""Autogenerated return type of ShippingZoneSpreadsheetDownloadMutation."""
type ShippingZoneSpreadsheetDownloadMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    export: ImportExport
    shippingZone: ShippingZone
    status: Int!
}

"""Shippit Credentials"""
type ShippitCredentials {
    apiKey: String!
    enabled: Boolean!
    useCalculatedShipping: Boolean!
}

input ShippitCredentialsUpsertInput {
    apiKey: String!
    enabled: Boolean
    useCalculatedShipping: Boolean
}

"""Autogenerated input type of ShippitCredentialsUpsertMutation"""
input ShippitCredentialsUpsertMutationInput {
    """Attributes to assign to Shippit Credentials."""
    attributes: ShippitCredentialsUpsertInput!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    sellerId: ID = null
}

"""Autogenerated return type of ShippitCredentialsUpsertMutation."""
type ShippitCredentialsUpsertMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    shippitCredentials: ShippitCredentials
    status: Int!
}

"""
Site configuration properties, particularly for properties that affect more than just one page
"""
type SiteConfig {
    accountSettings: AccountSettings!

    """True if advanced remittances is enabled."""
    advancedRemittancesEnabled: Boolean!

    """True if advert automap is enabled."""
    advertAutomapEnabled: Boolean!

    """True if brand logo should be visible on an advert"""
    advertBrandLogoVisible: Boolean!
    advertSettings: AdvertSettings!
    advertTileImageFormat: AdvertTileImageFormatEnum!
    advertTileImageRatio: AdvertTileImageRatioEnum!

    """
    List of available columns that can be included in the advert spreadsheet download
    """
    availableAdvertSpreadsheetColumns: [String!]!

    """True if beta remittances is enabled."""
    betaRemittancesEnabled: Boolean! @deprecated(reason: "Value is now accessible via the advancedRemittancesEnabled field. This will be removed no earlier than 2024-01-10.")

    """True if checkout is enabled for this site"""
    checkoutEnabled: Boolean!

    """Contact details"""
    contactDetails: ContactDetails!

    """Contact us link"""
    contactUsLink: TextLink

    """Site's country info"""
    country: SiteCountry!
    customisationSettings: CustomisationSettings!

    """True if favourite store is enabled for the marketplace"""
    displayFavouriteStore: Boolean!
    externalAccountSettings: ExternalAccountSettings!

    """Id of the favourite store of the current user"""
    favouriteStore: Int
    financeSettings: FinanceSettings!

    """
    Google Analytics (Universal Analytics) account IDs relevant to the current Vertical (and MStore, when in use)
    """
    googleAnalyticsAccountIds: [GoogleAnalyticsTracker!]

    """Google Maps credentials"""
    googleMaps: GoogleMapsCredentials

    """Google reCAPTCHA credentials"""
    googleRecaptcha: GoogleRecaptchaCredentials

    """Google Tag Manager account ID"""
    googleTagManagerAccountId: String

    """GTag Debug Mode"""
    gtagDebugMode: Boolean! @deprecated(reason: "We do not collect analytics data anymore. This field will be removed no earlier than 2024-04-01.")

    """GTag Stream Measurement ID"""
    gtagStreamMeasurementId: String @deprecated(reason: "We do not collect analytics data anymore. This field will be removed no earlier than 2024-04-01.")

    """True if seller name should not be visible on adverts"""
    hideAdvertTileSellerName: Boolean!
    id: ID!

    """Other countries with this marketplace (if exist)"""
    liveSiblingCountries: [SiteCountry!]

    """Current vertical's locale"""
    locale: String!
    marketfacerPagesEnabled: MarketfacerPagesEnabled
    memberSettings: MemberSettings!

    """The current site's official business name"""
    officialName: String!

    """True if on production environment"""
    productionEnvironment: Boolean!
    searchSettings: SearchSettings!

    """Always false"""
    showBazaarVoice: Boolean! @deprecated(reason: "Bazaar Voice integration has been removed. This field will be removed no earlier than 2024-01-01.")

    """True if retailer address can be shown"""
    showRetailerAddress: Boolean!

    """The current site's presentational email"""
    siteEmail: String!

    """The current site's presentational name"""
    siteName: String!

    """The current site's presentational phone"""
    sitePhone: String!

    """A promotion suitable for use across all pages"""
    siteWidePromotion: Promotion

    """Promotions suitable for use across all pages"""
    siteWidePromotions: [Promotion!]!

    """True if sending emails to consumers is skipped"""
    skipConsumerEmails: Boolean!

    """Social links (Facebook, Twitter, etc.)"""
    socialLinks: [SocialLink!]

    """True if the current site is a storefront"""
    storeFront: Boolean!

    """Store newsletter link"""
    storeNewsletterRecipientLink: TextLink

    """True if marketplace has enabled twilio verification"""
    verifyViaTwilio: Boolean!

    """Internal site name"""
    verticalCode: String!
    verticalLogo: VerticalLogo!

    """True if wishlist is enabled for this site"""
    wishlistEnabled: Boolean!
    yotpoSettings: YotpoSettingsSiteConfig!
}

"""Site country information"""
type SiteCountry {
    """
    Two-letter UPPERCASE country code, e.g. "DE"
    """
    code: String!

    """
    Currency code, e.g. "AUD"
    """
    currencyCode: String!
    id: ID!

    """
    Country name, e.g. "Germany"
    """
    name: String!

    """
    Country name in its native locale (if exists), e.g. "Deutschland"
    """
    nameInLocale: String

    """URL of the current vertical's site in this country (if exists)"""
    siteUrl: String

    """Returns if marketplace is tax inclusive or not"""
    taxInclusive: Boolean!
    taxRate: Float!
}

type SizeMatrix implements Node {
    brand: Brand
    data: JSON
    id: ID!
    taxon: Taxon
}

"""
Object with fields for constructing URL slugs based on its parent object.
"""
type Slug {
    """Field name for ID of parent object."""
    foreignKeyLabel: String!

    """ID for the foreign table"""
    foreignKeyLegacyId: Int!

    """A link to the node"""
    node: BrandOrTaxon
    slug: String!
}

"""Social link"""
type SocialLink {
    """
    "rel" value of the link, e.g. "publisher"
    """
    rel: String

    """Name of the social network."""
    socialNetwork: SocialNetworkEnum!
    url: String!
}

"""Social network names."""
enum SocialNetworkEnum {
    FACEBOOK
    TWITTER
    PINTEREST
    INSTAGRAM
    LINKEDIN
    YOUTUBE
}

"""Base ordering to sort the results"""
enum SortOrderingEnum {
    """Sort in ascending order"""
    ASCENDING

    """Sort in descending order"""
    DESCENDING
}

"""Spreadsheet type"""
enum SpreadsheetEnum {
    XLSX
    CSV
}

"""Geographic state"""
type State implements Node {
    country: Country!
    id: ID!
    name: String!

    """Abbreviation of state name."""
    short: String!

    """Normalized version of state name appropriate for inclusion in URLs"""
    slug: String!
}

"""
Input for associating a state with an address. One argument
is required for creation. If more than one argument is given, the first
valid argument will define the state (the order is "id", "short", then "name").
"""
input StateInput {
    """Database ID for the given state."""
    id: ID

    """Full name of the state."""
    name: String

    """Abbreviation of the state name."""
    short: String
}

"""The connection type for State."""
type StatesConnection {
    """A list of edges."""
    edges: [StatesEdge]

    """A list of nodes."""
    nodes: [State]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type StatesEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: State
}

"""Data for individual health checks"""
type StatusInfo {
    """message about the health check"""
    message: String!

    """name of health check"""
    name: String!

    """True if pass health check, false if fail"""
    success: Boolean!

    """Time it took to perform the health check"""
    time: Float!
}

"""All statuses for partner integrations."""
enum StatusTypeEnum {
    AVAILABLE
    UNAVAILABLE
    CONNECTED
    ERROR
}

"""Autogenerated input type of StockLevelsSpreadsheetDownloadMutation"""
input StockLevelsSpreadsheetDownloadMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    format: SpreadsheetEnum = XLSX
    sellerId: ID = null
}

"""Autogenerated return type of StockLevelsSpreadsheetDownloadMutation."""
type StockLevelsSpreadsheetDownloadMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    export: ImportExport
    status: Int!
}

"""Autogenerated input type of StockLevelsSpreadsheetUploadMutation"""
input StockLevelsSpreadsheetUploadMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """
    ID of the seller. May be omitted if using a seller api key, but is required otherwise
    """
    sellerId: ID
    spreadsheet: FileInput!
}

"""Autogenerated return type of StockLevelsSpreadsheetUploadMutation."""
type StockLevelsSpreadsheetUploadMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    import: ImportExport
    status: Int!
}

"""Sellers stored payment method settings"""
type StoredPaymentMethod {
    creditCardExpiryDate: String
    creditCardLast4: String
    creditCardType: String
    imageUrl: String
    paymentMethodType: String
    paypalEmail: String
    providerHandle: String
    status: String
}

"""Email marketing subscription info"""
type Subscription {
    """Email"""
    email: String!

    """First name"""
    firstName: String

    """Last name"""
    lastName: String

    """Postcode"""
    postcode: String

    """Source type - eg. Checkout Subscribe, Email Seller and Account"""
    sourceType: String

    """Subscribed At"""
    subscribedAt: ISO8601DateTime!
}

"""The connection type for Subscription."""
type SubscriptionsConnection {
    """A list of edges."""
    edges: [SubscriptionsEdge]

    """A list of nodes."""
    nodes: [Subscription]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type SubscriptionsEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: Subscription
}

union SuggestionsUnion = Brand | OptionValue | Taxon

"""Tax code"""
type TaxCode {
    code: String!
    id: ID!
    name: String!
}

"""Autogenerated input type of TaxCodeCreateOrUpdateMutation"""
input TaxCodeCreateOrUpdateMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Tax code."""
    code: String!

    """Tax code name."""
    name: String!
}

"""Autogenerated return type of TaxCodeCreateOrUpdateMutation."""
type TaxCodeCreateOrUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
    taxCode: TaxCode
}

"""
Category or Sub-category for organising adverts.
Has a tree-like structure with parents and children.
"""
type Taxon implements Node {
    """The online adverts that belong to this taxon."""
    adverts(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): AdvertsConnection!
    children(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int

        """Request only taxons that have online adverts associated with them."""
        showOnlineOnly: Boolean = false
    ): TaxonsConnection!
    description: String
    displayName: String!
    externalIds: [ExternalID!]!

    """
    Google category associated to the taxon - supplied to the Google Content API
    """
    googleCategory: String

    """A boolean for whether a taxon has brands or not"""
    hasBrands: Boolean!
    id: ID!

    """The display image for each taxon."""
    image: Image
    legacyId: Int!

    """Maximum purchase quantity allowed for successful checkout"""
    maxPurchaseQuantity: Int

    """Minimum purchase quantity required for successful checkout"""
    minPurchaseQuantity: Int
    parent: Taxon
    prototype: Prototype!

    """The tax code the category falls under"""
    taxCode: String
    taxonType: TaxonTypeEnum!

    """The tax rate applied to this category"""
    taxRate: Float

    """Taxon title. Mostly for internal organisation."""
    title: String!

    """Taxon tree formatted to string"""
    treeName(
        """Separator for taxon hierarchy tree"""
        separator: String = " - "
    ): String!

    """
    The URL subpath associated with the given taxon.
    Mostly used for building URLs for advert search results.
    """
    urlSlug: String!
}

"""The connection type for Taxon."""
type TaxonConnection {
    """A list of edges."""
    edges: [TaxonEdge]

    """A list of nodes."""
    nodes: [Taxon]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""Autogenerated input type of TaxonCreateOrUpdateMutation"""
input TaxonCreateOrUpdateMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Taxon name. eg. 'Shoes'"""
    displayName: String

    """IDs used by external systems to fetch Taxons"""
    externalIds: [KeyValueInput!]

    """ID of the Taxon to update"""
    id: ID

    """ID of the parent Taxon"""
    parentId: ID

    """ID of the associated Prototype"""
    prototypeId: ID

    """Taxon title. Mostly for internal organisation"""
    title: String
}

"""Autogenerated return type of TaxonCreateOrUpdateMutation."""
type TaxonCreateOrUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
    taxon: Taxon
}

"""An edge in a connection."""
type TaxonEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: Taxon
}

"""
Minimal subset of Taxon type which can be used to build a
taxonomy filter for advert search
"""
type TaxonFilterOption {
    """The number of adverts associated with each taxon filter option"""
    count: Int!
    displayName: String!

    """True if the taxon filter option has child taxon filter options"""
    hasChildren: Boolean!
    id: ID!
    parentId: ID

    """
    The URL subpath associated with the given taxon.
    Mostly used for building URLs for advert search results.
    """
    urlSlug: String!
}

"""The connection type for Taxon."""
type TaxonsConnection {
    """A list of edges."""
    edges: [TaxonsEdge]

    """A list of nodes."""
    nodes: [Taxon]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type TaxonsEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: Taxon
}

"""Category label for the taxon. Represents different types of adverts."""
enum TaxonTypeEnum {
    PRODUCT
    EVENT
    SERVICE
}

"""Text link"""
type TextLink {
    """If true, open link in a new window"""
    newWindow: Boolean

    """Link text"""
    text: String!
    url: String!
}

"""
Object with taxon or brand info returned by autocomplete functionality when a user is typing into a search field.
"""
type TextQuerySuggestion {
    name: String!

    """Name of the suggested object's parent."""
    parentName: String
    slugs: [Slug!]!
}

"""Site-wide attributes used for theming, such as colours and fonts."""
type Theme {
    """Font family for body/paragraph text."""
    bodyFontFamily: String!

    """Primary brand color for your site."""
    brandColor: String!

    """Text color to use when the brand color is the background color"""
    brandTextColor: String!

    """Color used for ecommerce action buttons (e.g. add item to cart)."""
    ecommerceActionColor: String!

    """Text color used for ecommerce action buttons (e.g. add item to cart)."""
    ecommerceActionTextColor: String!

    """URL for loading the relevant fonts."""
    fontUrl: String!

    """Background color for the main footer."""
    footerBackgroundColor: String!

    """Color for links in the main footer."""
    footerLinkColor: String!

    """Color for text in the main footer."""
    footerTextColor: String!

    """Background color for the main header."""
    headerBackgroundColor: String!

    """Border color used to separate elements within the main header."""
    headerBorderColor: String!

    """Color for text in the main header."""
    headerTextColor: String!

    """Font family for header/title text."""
    headingFontFamily: String!

    """
    Color used for lead generation action buttons (e.g. contact seller, show address).
    """
    leadActionColor: String!

    """
    Text color used for lead generation action buttons (e.g. contact seller, show address).
    """
    leadActionTextColor: String!

    """
    Color used for primary action buttons (e.g. submit a form, or proceed to checkout).
    """
    primaryActionColor: String!

    """
    Text color used for primary action buttons (e.g. submit a form, or proceed to checkout).
    """
    primaryActionTextColor: String!

    """Color used for promotions and featured banners."""
    promotionBannerColor: String!

    """Text color used for promotions and featured banners."""
    promotionBannerTextColor: String!
}

"""Third party login link"""
type ThirdPartyLoginLink {
    """URL to GET in order to initiate a login with this provider"""
    link: String!

    """Name of the provider"""
    name: String!

    """What kind of accounts can log in with this provider"""
    scope: ThirdPartyLoginLinkScopeEnum!
}

"""The connection type for ThirdPartyLoginLink."""
type ThirdPartyLoginLinkConnection {
    """A list of edges."""
    edges: [ThirdPartyLoginLinkEdge]

    """A list of nodes."""
    nodes: [ThirdPartyLoginLink]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type ThirdPartyLoginLinkEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: ThirdPartyLoginLink
}

"""Third party login scope"""
enum ThirdPartyLoginLinkScopeEnum {
    OPERATOR
    SELLER
}

"""Object with translation key path and value."""
type Translation {
    translation: String!
    translationKeyPath: String!
}

"""The YAML path and param values for a given translation."""
input TranslationInput {
    """
    Full path to the requested translation
    (e.g. "root_key.branch_1.branch_t.translation"
    """
    translationKeyPath: String!

    """
    Key-Value pairs to pass named parameters to translations when relevant.
    """
    translationParams: [KeyValueInput!]
}

"""An unpublished advert"""
type UnpublishedAdvert implements Node {
    """Details for this advert. This is generally not necessary"""
    details: Advert!
    externalIds: [ExternalID!]!
    id: ID!
    legacyId: Int!
    updatedAt: ISO8601DateTime!
    variants(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): AllAdvertVariantConnection!
}

"""The connection type for Cart."""
type UpdatedCartsConnection {
    """A list of edges."""
    edges: [UpdatedCartsEdge]

    """A list of nodes."""
    nodes: [Cart]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type UpdatedCartsEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: Cart
}

"""The connection type for Order."""
type UpdatedOrdersConnection {
    """A list of edges."""
    edges: [UpdatedOrdersEdge]

    """A list of nodes."""
    nodes: [Order]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type UpdatedOrdersEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: Order
}

"""The connection type for RefundRequest."""
type UpdatedRefundRequestsConnection {
    """A list of edges."""
    edges: [UpdatedRefundRequestsEdge]

    """A list of nodes."""
    nodes: [RefundRequest]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type UpdatedRefundRequestsEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: RefundRequest
}

"""Properties of the currently logged in User"""
type User {
    """Cart session id for the current user"""
    cartSessionId: ID

    """A users email address"""
    emailAddress: String

    """A users first name"""
    firstName: String
    id: ID!

    """The id used to identify the user"""
    legacyId: Int

    """Location session data on user"""
    locationData: UserLocation!

    """Whether the current user is logged in"""
    loggedIn: Boolean!
    selectedCurrency: Currency!
    seller: Seller

    """A users surname"""
    surname: String

    """The date user accepted terms and conditions for marketplacer"""
    termsAndConditionsAcceptedAt: ISO8601DateTime

    """Username displayed on navbar for current user"""
    userAccountName: String

    """A users username"""
    username: String
}

"""The connection type for User."""
type UserConnection {
    """A list of edges."""
    edges: [UserEdge]

    """A list of nodes."""
    nodes: [User]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""Attributes for creating a user."""
input UserCreateInput {
    """A users email address, also used as login username"""
    emailAddress: String!

    """A users first name"""
    firstName: String!

    """A users surname"""
    surname: String!
}

"""Autogenerated input type of UserCreateMutation"""
input UserCreateMutationInput {
    """Attributes to assign to the new user."""
    attributes: UserCreateSecondaryInput!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    sellerId: ID = null
}

"""Autogenerated return type of UserCreateMutation."""
type UserCreateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
    user: User
}

"""Attributes for creating a user. (secondary for seller)."""
input UserCreateSecondaryInput {
    """A users email address, also used as login username"""
    emailAddress: String!

    """A users first name"""
    firstName: String!

    """A users surname"""
    surname: String!

    """A users username"""
    username: String
}

"""Autogenerated input type of UserCurrencySelectMutation"""
input UserCurrencySelectMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """User selected currency code"""
    currencyCode: String!
}

"""Autogenerated return type of UserCurrencySelectMutation."""
type UserCurrencySelectMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    currencyChangedNotice: String
    errors: [ValidationError!]
    selectedCurrency: Currency
    status: Int!
}

"""Autogenerated input type of UserDeleteMutation"""
input UserDeleteMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    userId: ID!
}

"""Autogenerated return type of UserDeleteMutation."""
type UserDeleteMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
}

"""An edge in a connection."""
type UserEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: User
}

"""Attributes for updating a user."""
input UserInput {
    """A users email address"""
    emailAddress: String

    """A users first name"""
    firstName: String

    """A users surname"""
    surname: String

    """A users username"""
    username: String
}

"""Location data saved on the user session"""
type UserLocation {
    """Location slug for filtering search results"""
    locationSlug: String

    """Postcode for filtering search results"""
    postcode: String

    """Region name for filtering search results"""
    regionName: String

    """True if we want to show the location modal"""
    showLocationModal: Boolean!
}

"""Autogenerated input type of UserLoginTokenMutation"""
input UserLoginTokenMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """The SSO token"""
    token: String!
}

"""Autogenerated return type of UserLoginTokenMutation."""
type UserLoginTokenMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    sessionToken: String
    status: Int!
}

"""Autogenerated input type of UserLoginUsernameMutation"""
input UserLoginUsernameMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """The user's password"""
    password: String!

    """The user's username"""
    username: String!
}

"""Autogenerated return type of UserLoginUsernameMutation."""
type UserLoginUsernameMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    sessionToken: String
    status: Int!
}

"""Autogenerated input type of UserLogOutMutation"""
input UserLogOutMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
}

"""Autogenerated return type of UserLogOutMutation."""
type UserLogOutMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    loggedOut: Boolean
    status: Int!
}

"""Autogenerated input type of UserUpdateFavouriteStoreMutation"""
input UserUpdateFavouriteStoreMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """
    Id of the seller. The seller id will be used to update the user's favourite
    store. When the seller id matches the user's favourite store, the favourite
    store will be removed.
    """
    sellerId: String!
}

"""Autogenerated return type of UserUpdateFavouriteStoreMutation."""
type UserUpdateFavouriteStoreMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    favouriteStoreAssigned: Boolean
    status: Int!
}

"""Autogenerated input type of UserUpdateMutation"""
input UserUpdateMutationInput {
    """Attributes to assign to the user updated."""
    attributes: UserInput = null

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    userId: ID = null
}

"""Autogenerated return type of UserUpdateMutation."""
type UserUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
    user: User
}

"""
Field-specific model validation error messages for when params are invalid.
"""
type ValidationError {
    field: String!
    messages: [String!]!
}

"""
A unique option type/option value combination that represents a variation of a purchasable item.
"""
type Variant implements Node {
    """
    A message from the organisation responsible for therapeutic goods labelling.
    """
    administrativeBodyWarning: String

    """Associated advert"""
    advert: AllAdvert!

    """The ingredients always in this item that cause allergic reactions."""
    allergenContains: String

    """The ingredients possibly in this item that cause allergic reactions."""
    allergenMayContain: String
    barcode: String

    """
    Whether an item associated with the given variant can be added to cart.
    """
    buyable: Boolean!
    catalogRulesErrors: [CatalogRulesError!]

    """The commission rate for the variant."""
    commissionPackageRate: Decimal

    """The comparable size of the item. Used for comparable unit pricing."""
    comparableSize: Float

    """
    The comparable unit used to measure the item. Used for comparable unit pricing.
    """
    comparableUnit: String

    """Number of items available with a given variant."""
    countOnHand: Int!

    """The date the variant was created"""
    createdAt: ISO8601DateTime!

    """Usage instructions for the item."""
    directions: String

    """Whether to display the given variant in the associated advert."""
    displayable: Boolean!

    """Links to adverts with the same barcode as this variant."""
    duplicateBarcodeAdverts: [Advert!]!

    """Links to variants with the same barcode as this variant."""
    duplicateBarcodeVariants: [Variant!]!

    """Price used for editing by sellers"""
    editablePrice: Decimal

    """Price used for editing by sellers Denominated in cents."""
    editablePriceCents: Int

    """Price used for editing by sellers In string with currency symbol."""
    editablePriceFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """Price used for editing by sellers"""
    editableSalePrice: Decimal

    """Price used for editing by sellers Denominated in cents."""
    editableSalePriceCents: Int

    """Price used for editing by sellers In string with currency symbol."""
    editableSalePriceFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """An ID that is managed the retailer."""
    externalId: String
    externalIds: [ExternalID!]!

    """Golden Product Variant associated to this variant"""
    goldenProductVariant: GoldenProductVariant

    """The health warnings of the item."""
    healthWarnings: String
    id: ID!
    images(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): ImagesConnection!

    """Whether the quantity for the given variant is unlimited."""
    infiniteQuantity: Boolean!

    """The ingredients in the item."""
    ingredients: String

    """The intended purpose of the item."""
    intendedPurpose: String

    """support multi-store location inventory"""
    inventories(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): InventorysConnection

    """The size of the item. Used for comparable unit pricing."""
    itemSize: Float

    """The individual item tax rate on variant."""
    itemTaxRate: Decimal

    """The unit used to measure the item. Used for comparable unit pricing."""
    itemUnit: String

    """
    The displayable label for the variant. Includes variant type and value (e.g.
    "size / M"). Falls back to SKU if no option values set, ID if no SKU is set.
    """
    label: String!
    legacyId: Int!

    """Lowest non-sale price available for the item."""
    lowestOriginalPrice: String

    """Lowest non-sale price available for the item. Denominated in cents."""
    lowestOriginalPriceCents: Int

    """
    Absolute lowest price (sale price or original price) available for the item.
    """
    lowestPrice: String

    """
    Absolute lowest price (sale price or original price) available for the item. Denominated in cents.
    """
    lowestPriceCents: Int

    """Maximum purchase quantity allowed for successful checkout"""
    maxPurchaseQuantity: Int

    """Comparable Unit as a Configurable Unit of Measure"""
    measurementComparableUnit: MeasurementUnit

    """Item Unit as a Configurable Unit of Measure"""
    measurementItemUnit: MeasurementUnit

    """Measure type of how is the item supplied."""
    measureType: String

    """Metadata key/values"""
    metadata: [Metadatum!]!

    """Minimum purchase quantity required for successful checkout"""
    minPurchaseQuantity: Int
    notes: String

    """The nutritional profile of the item."""
    nutritionInformation: String

    """
    This field returns option values from single-select and multi-select option types.
    """
    optionValues(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): OptionValueConnection! @deprecated(reason: "This field is deprecated in favour of VariantOptionValues.")

    """
    Option value labels before being mapped to canonical option values. (Includes
    the original values for both unmapped and mapped option values)
    """
    optionValuesBeforeMapping: [String!]!

    """
    Boolean for whether a variant is valid, where a variant is valid if it has a
    barcode, has a sku which is not longer than 255 characters, has a
    count_on_hand which is an integer greater than zero, has a price and a
    sale_price which is greater than zero unless free adverts are enabled, has a
    description which is not longer than 140 characters, where the sale_price is
    less than the price, the options values are unique, and the option values
    match the expected values for this prototype.
    """
    optionValuesInclusiveValid: Boolean!

    """Pricing model of the variant"""
    pricingModel: PricingModelEnum!

    """The product warnings of the item."""
    productWarnings: String

    """Whether seller published a variant."""
    published: Boolean!

    """The recommended retail price (RRP) for the item."""
    recommendedRetailPrice: String

    """The recommended retail price (RRP) for the item. Denominated in cents."""
    recommendedRetailPriceCents: Int

    """
    The recommended retail price (RRP) for the item. In string with currency symbol.
    """
    recommendedRetailPriceFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """End of the period in which the sale price is valid (or null)"""
    salePriceEndAt: ISO8601DateTime

    """Start of the period in which the sale price is valid (or null)"""
    salePriceStartAt: ISO8601DateTime

    """Shipping options available for the variant"""
    shippingOptions(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): ShippingOptionConnection

    """The direct shipping parcel information for the variant."""
    shippingParcel: ShippingParcel

    """Either a direct parcel information or inferred from taxon"""
    shippingParcelToUse: ShippingParcel
    shippingProfile: ShippingProfile

    """The shipping profile ID for the variant."""
    shippingProfileId: ID
    sku: String

    """
    "Internal" or "External"
    """
    sourceName: String

    """How to store the item."""
    storageInstructions: String

    """The suitability of the item for various ailments."""
    suitableFor: String
    taxCode: String

    """The date the variant was last updated"""
    updatedAt: ISO8601DateTime!
    url: String

    """This field returns option type values set to the variant."""
    variantOptionValues(
        """Returns the elements in the list that come after the specified cursor."""
        after: String

        """
        Returns the elements in the list that come before the specified cursor.
        """
        before: String

        """Returns the first _n_ elements from the list."""
        first: Int

        """Returns the last _n_ elements from the list."""
        last: Int
    ): VariantOptionValueConnection!

    """The wholesale price for the item."""
    wholesalePrice: String

    """The wholesale price for the item. Denominated in cents."""
    wholesalePriceCents: Int

    """The wholesale price for the item. In string with currency symbol."""
    wholesalePriceFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """Wholesale promo price of the variant"""
    wholesalePromoPrice: Decimal

    """Wholesale promo price of the variant Denominated in cents."""
    wholesalePromoPriceCents: Int

    """
    End of the period in which the wholesale promo price is valid (or null)
    """
    wholesalePromoPriceEndAt: ISO8601DateTime

    """Wholesale promo price of the variant In string with currency symbol."""
    wholesalePromoPriceFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String

    """
    Start of the period in which the wholesale promo price is valid (or null)
    """
    wholesalePromoPriceStartAt: ISO8601DateTime
}

"""The connection type for Variant."""
type VariantConnection {
    """A list of edges."""
    edges: [VariantEdge]

    """A list of nodes."""
    nodes: [Variant]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""Autogenerated input type of VariantDeleteMutation"""
input VariantDeleteMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """ID of the existing variant."""
    id: ID!
}

"""Autogenerated return type of VariantDeleteMutation."""
type VariantDeleteMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
    variant: Variant
}

"""An edge in a connection."""
type VariantEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: Variant
}

input VariantFilterInput {
    """
    Select adverts that have associated variants with one of the given barcodes.
    """
    barcodes: [String!] = []

    """Select variants with a particular External ID"""
    externalId: ExternalIDInput = null
    infiniteQuantity: Boolean = null
    quantityFrom: Int = null
    quantityTo: Int = null

    """
    Select adverts that have associated variants with one of the given skus.
    """
    skus: [String!] = []
    stocked: Boolean = null
}

input VariantInput {
    administrativeBodyWarning: String
    allergenContains: String
    allergenMayContain: String
    barcode: String

    """The comparable size of the item. Used for comparable unit pricing."""
    comparableSize: Float

    """
    The comparable unit used to measure the item. Used for comparable unit pricing.
    """
    comparableUnit: ComparableUnitEnum
    countOnHand: Int
    description: String
    directions: String

    """Optional external id to identify the product"""
    externalId: String

    """External IDs key/value pairs."""
    externalIds: [KeyValueInput!]
    healthWarnings: String
    id: ID
    images: [ImageInput!]
    infiniteQuantity: Boolean
    ingredients: String
    intendedPurpose: String

    """The size of the item. Used for comparable unit pricing."""
    itemSize: Float
    itemTaxRate: Decimal

    """The unit used to measure the item. Used for comparable unit pricing."""
    itemUnit: ComparableUnitEnum

    """Maximum purchase quantity allowed for successful checkout"""
    maxPurchaseQuantity: Int

    """Metadata key/value pairs."""
    metadata: [KeyValueInput!]

    """Minimum purchase quantity allowed for successful checkout"""
    minPurchaseQuantity: Int
    notes: String
    nutritionInformation: String

    """
    DEPRECATED: This argument is deprecated in favour of VariantOptionValues.
    Option value ids for single-select and multi-select option types
    """
    optionValueIds: [ID!]
    price: Decimal
    productWarnings: String

    """Whether seller published a variant."""
    published: Boolean
    recommendedRetailPrice: String
    salePrice: Decimal
    salePriceEndAt: ISO8601DateTime
    salePriceStartAt: ISO8601DateTime
    shippingParcelAttributes: ShippingParcelInput
    shippingProfileId: ID
    sku: String
    storageInstructions: String
    suitableFor: String
    taxCode: String

    """
    Variant option values of the variant. If this argument is given, variant
    option values will be updated to match the input and delete the missing ones.
    """
    variantOptionValues: [VariantOptionValueInput!]
    variantPricingModel: VariantPricingModelInput
    wholesalePrice: String
    wholesalePromoPrice: String
    wholesalePromoPriceEndAt: ISO8601DateTime
    wholesalePromoPriceStartAt: ISO8601DateTime
}

"""
Variant option value for a variant's option type supporting all field types.
"""
type VariantOptionValue implements Node {
    """
    ID for the value. This value is less likely to change when the field values are unchanged but cannot guaranty.
    """
    id: ID!

    """Option Type the value belongs to"""
    optionType: OptionType!

    """Option value for single-select or multi-select Option Type"""
    optionValue: OptionValue

    """Value for free-text Option Type"""
    textValue: String
}

"""The connection type for VariantOptionValue."""
type VariantOptionValueConnection {
    """A list of edges."""
    edges: [VariantOptionValueEdge]

    """A list of nodes."""
    nodes: [VariantOptionValue]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type VariantOptionValueEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: VariantOptionValue
}

"""
Input for updating a variant option value. Set only optionValueId for
single-select and multi-select option types, and set only optionTypeId and
textValue for a free-text option type.
"""
input VariantOptionValueInput {
    """Option Type ID required for a free-text option type"""
    optionTypeId: ID

    """Option Value ID used for single-select and multi-select option types"""
    optionValueId: ID

    """Free-text value used for a free-text option type"""
    textValue: String
}

input VariantPricingModelInput {
    pricingModel: PricingModelEnum
}

"""The connection type for Variant."""
type VariantsConnection {
    """A list of edges."""
    edges: [VariantsEdge]

    """A list of nodes."""
    nodes: [Variant]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type VariantsEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: Variant
}

"""Autogenerated input type of VariantUpdateMutation"""
input VariantUpdateMutationInput {
    attributes: VariantInput!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    variantId: ID = null
}

"""Autogenerated return type of VariantUpdateMutation."""
type VariantUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
    variant: Variant
}

"""Logo for the Marketplace"""
type VerticalLogo {
    defaultOpengraph: Image @deprecated(reason: "experimental")
    email: Image @deprecated(reason: "experimental")
    header: Image @deprecated(reason: "experimental")
    logo: Image @deprecated(reason: "experimental")

    """Marketplace logo url"""
    verticalLogoUrl: String
}

"""Video data stored on seller"""
type Video {
    """Embedded src"""
    embedSrc: String
    id: ID!

    """Preview src"""
    previewSrc: String

    """Thumb src"""
    thumbSrc: String
}

"""Returns the webhooks linked to marketplacer events."""
type Webhook implements Node {
    """Allow Skip? (With this enabled, identical payloads will be skipped)"""
    allowSkip: Boolean

    """
    Maximum number of events we will attempt to deliver for this webhook at a time.
    """
    concurrentSendLimit: Int!

    """Activate webhook? (true/false)"""
    enabled: Boolean

    """
    Additional event filter that allows you to specify the type of event traffic
    generated, e.g. Create, Update and Destroy. If not specified all events will be sent
    """
    eventName: WebhookEventEnum

    """Webhook events"""
    events: [WebhookEvent!]

    """
    Optional headers supplied as JSON that can be used to access further configure
    webhook HTTP POST requests (e.g. { Authorization: "Basic x123" })
    """
    headers: JSON
    id: ID!

    """
    Set to false to enable the use of additional error reporting in webhook
    payloads, or false if you want to retain the legacy format for payloads with
    no error reporting.
    """
    legacyFormat: Boolean

    """
    Maximum number of times we will retry sending each event.Note that we will
    stop after 30 days regardless of the number of retry attempts.
    """
    maxRetries: Int!

    """
    Optional GraphQL query that can be used to determine the result will be sent
    when the Webhook is triggered. If left blank, the Webhook will return a
    default query (e.g. "query($id: ID!){ node(id: $id) { __typename } }")
    """
    queryString: String
    seller: Seller

    """
    The name of the Marketplacer object that webhook events are being generated for
    """
    type: WebhookKlassEnum!

    """External URL listening for incoming HTTP POST"""
    url: String!
}

"""Attributes for creating a webhook."""
input WebhookCreateInput {
    """Allow Skip? (With this enabled, identical payloads will be skipped)"""
    allowSkip: Boolean

    """
    Maximum number of events we will attempt to deliver for this webhook at a
    time.Value >=1 and <= 200. Default is 100 if this value is not supplied.
    """
    concurrentSendLimit: Int

    """Active webhook? (true/false)"""
    enabled: Boolean

    """
    Additional event filter that allows you to specify the type of event traffic
    generated, e.g. Create, Update and Destroy. If not specified all events will be sent
    """
    eventName: WebhookEventEnum

    """
    Optional headers supplied as JSON that can be used to access further configure
    webhook HTTP POST requests (e.g. { Authorization: "Basic x123" })
    """
    headers: JSON

    """This will be used to validate the authenticity of webhooks."""
    hmacKey: String

    """
    Maximum number of times we will retry sending each event.Value >=0 and <= 50.
    Default is 25 if this value is not supplied. Note that we will stop after 30
    days regardless of the number of retry attempts.
    """
    maxRetries: Int

    """
    Optional GraphQL query that can be used to determine the result will be sent
    when the Webhook is triggered. If left blank, the Webhook will return a
    default query (e.g. "query($id: ID!){ node(id: $id) { __typename } }")
    """
    queryString: String

    """Seller ID to assign the webhook to a specific Seller."""
    sellerId: ID

    """
    The name of the Marketplacer object that webhook events are being generated for
    """
    type: WebhookKlassEnum!

    """External URL listening for incoming HTTP POST"""
    url: String!
}

"""Autogenerated input type of WebhookCreateMutation"""
input WebhookCreateMutationInput {
    """Attributes for creating a webhook."""
    attributes: WebhookCreateInput!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
}

"""Autogenerated return type of WebhookCreateMutation."""
type WebhookCreateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
    webhook: Webhook
}

"""Returns the webhooks event linked to a webhook."""
type WebhookEvent implements Node {
    createdAt: ISO8601DateTime!

    """The name of the event executed"""
    eventName: String
    id: ID!

    """Invoice"""
    invoice: Invoice

    """
    Payload supplied as JSON that can be used to access further information of the event
    """
    payload: JSON

    """Processed At"""
    processedAt: ISO8601DateTime

    """Refund Request"""
    refundRequest: RefundRequest

    """Webhook event responses"""
    responses: [WebhookEventResponse!]

    """Retry After"""
    retryAfter: ISO8601DateTime

    """Sent At"""
    sentAt: ISO8601DateTime @deprecated(reason: "This field is deprecated, use \"processedAt\" and \"status\" instead. This field will be removed no later than 2024-04-01.")

    """Shipment"""
    shipment: Shipment

    """
    Whether this event was skipped (only relevant if webhook has "allowSkip" set true)
    """
    skipped: Boolean

    """Status"""
    status: String!
}

"""The field that is used to select/filter webhooks by event"""
enum WebhookEventEnum {
    CREATE
    UPDATE
    DESTROY
}

"""Returns the webhooks event response linked to marketplacer events."""
type WebhookEventResponse implements Node {
    """Body of the response received from the webhook URL"""
    body: JSON

    """Timestamp for when the response was created"""
    createdAt: ISO8601DateTime!

    """
    Headers supplied as JSON that can be used to access further information of the event
    """
    headers: JSON
    id: ID!
    status: Int!
}

"""The connection type for WebhookEvent."""
type WebhookEventsConnection {
    """A list of edges."""
    edges: [WebhookEventsEdge]

    """A list of nodes."""
    nodes: [WebhookEvent]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type WebhookEventsEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: WebhookEvent
}

"""Webhook Attributes."""
input WebhookInput {
    """Allow Skip? (With this enabled, identical payloads will be skipped)"""
    allowSkip: Boolean

    """
    Maximum number of events we will attempt to deliver for this webhook at a
    time.Value >=1 and <= 200. Default is 100 if this value is not supplied.
    """
    concurrentSendLimit: Int

    """Active webhook? (true/false)"""
    enabled: Boolean

    """
    Additional event filter that allows you to specify the type of event traffic
    generated, e.g. Create, Update and Destroy. If not specified all events will be sent
    """
    eventName: WebhookEventEnum

    """
    Optional headers supplied as JSON that can be used to access further configure
    webhook HTTP POST requests (e.g. { Authorization: "Basic x123" })
    """
    headers: JSON

    """This will be used to validate the authenticity of webhooks."""
    hmacKey: String

    """
    Maximum number of times we will retry sending each event.Value >=0 and <= 50.
    Default is 25 if this value is not supplied. Note that we will stop after 30
    days regardless of the number of retry attempts.
    """
    maxRetries: Int

    """
    Optional GraphQL query that can be used to determine the result will be sent
    when the Webhook is triggered. If left blank, the Webhook will return a
    default query (e.g. "query($id: ID!){ node(id: $id) { __typename } }")
    """
    queryString: String

    """Seller ID to assign the webhook to a specific Seller."""
    sellerId: ID

    """
    The name of the Marketplacer object that webhook events are being generated for
    """
    type: WebhookKlassEnum

    """External URL listening for incoming HTTP POST"""
    url: String
}

"""
Specifies the Marketplacer object type that webhook events are generated for.
"""
enum WebhookKlassEnum {
    REFUND_REQUEST
    REFUND_REQUEST_LINE_ITEM
    REMITTANCE_ADVICE
    VARIANT
    INVOICE
    INVOICE_ANNOTATION
    COMMISSION_PACKAGE
    ADVERT
    SHIPMENT
    RETURN_SHIPMENT
    SELLER
    SHIPPING_OPTION
    OPTION_TYPE
    OPTION_VALUE
    PROMOTION
    TAXON
}

"""The connection type for Webhook."""
type WebhooksConnection {
    """A list of edges."""
    edges: [WebhooksEdge]

    """A list of nodes."""
    nodes: [Webhook]

    """Information to aid in pagination."""
    pageInfo: PageInfo!
    totalCount: Int!
}

"""An edge in a connection."""
type WebhooksEdge {
    """A cursor for use in pagination."""
    cursor: String!

    """The item at the end of the edge."""
    node: Webhook
}

"""Autogenerated input type of WebhookUpdateMutation"""
input WebhookUpdateMutationInput {
    """Attributes for updating the webhook."""
    attributes: WebhookInput

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Webhook ID to be updated."""
    webhookId: ID!
}

"""Autogenerated return type of WebhookUpdateMutation."""
type WebhookUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
    webhook: Webhook
}

"""Yotpo settings"""
type YotpoSettings {
    category: CategoryTypeEnum!
    description: String!
    displayWidgetAdvertPageEnabled: Boolean!
    displayWidgetSearchPageEnabled: Boolean!
    displayWidgetShopPageEnabled: Boolean!
    id: ID!
    logoUrl: String!
    orderCreateForProductsOnCheckoutEnabled: Boolean!
    orderCreateForSellersOnCheckoutEnabled: Boolean!
    productSyncEnabled: Boolean!
    providerHandle: String!
    providerName: String!
    secretKey: String
    sellerSyncEnabled: Boolean!
    status: StatusTypeEnum!
    storeId: String
}

"""Autogenerated input type of YotpoSettingsCreateOrUpdateMutation"""
input YotpoSettingsCreateOrUpdateMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Enable to display widget on advert page."""
    displayWidgetAdvertPageEnabled: Boolean!

    """Enable to display widget on search page."""
    displayWidgetSearchPageEnabled: Boolean!

    """Enable to display widget on shop page."""
    displayWidgetShopPageEnabled: Boolean!

    """Enable to create order for products on checkout."""
    orderCreateForProductsOnCheckoutEnabled: Boolean!

    """Enable to create order for sellers on checkout."""
    orderCreateForSellersOnCheckoutEnabled: Boolean!

    """Enable syncing products."""
    productSyncEnabled: Boolean!

    """Yotpo App Secret."""
    secretKey: String!

    """Enable syncing seller."""
    sellerSyncEnabled: Boolean!

    """Yotpo App Key."""
    storeId: String!
}

"""Autogenerated return type of YotpoSettingsCreateOrUpdateMutation."""
type YotpoSettingsCreateOrUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
    yotpoSettings: YotpoSettings
}

"""Autogenerated input type of YotpoSettingsDeleteMutation"""
input YotpoSettingsDeleteMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
}

"""Autogenerated return type of YotpoSettingsDeleteMutation."""
type YotpoSettingsDeleteMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
    yotpoSettings: YotpoSettings
}

"""Yotpo Site Configuration settings"""
type YotpoSettingsSiteConfig {
    displayWidgetSearchPageEnabled: Boolean
    displayWidgetShopPageEnabled: Boolean
    id: ID!
    storeId: String
}

"""Zip settings."""
type ZipSettings {
    category: CategoryTypeEnum!

    """ Denominated in cents."""
    customMerchantBaseFeeCents: Int

    """ In string with currency symbol."""
    customMerchantBaseFeeFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String
    customMerchantFee: Float
    description: String!
    logoUrl: String!
    merchantApiKey: String
    merchantPublicKey: String
    overrideCustomMerchantFee: Boolean!
    providerHandle: String!
    providerName: String!
    status: StatusTypeEnum!
    zipEnabled: Boolean
}

"""Autogenerated input type of ZipSettingsCreateOrUpdateMutation"""
input ZipSettingsCreateOrUpdateMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Merchant base fee."""
    customMerchantBaseFee: String

    """Percentage of the order total to be charged for the merchant fee."""
    customMerchantFee: String

    """Zip merchant API key."""
    merchantApiKey: String!

    """Zip public key"""
    merchantPublicKey: String!

    """Override the custom merchant fee."""
    overrideCustomMerchantFee: Boolean
}

"""Autogenerated return type of ZipSettingsCreateOrUpdateMutation."""
type ZipSettingsCreateOrUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
    zipSettings: ZipSettings
}

"""Autogenerated input type of ZipSettingsDeleteMutation"""
input ZipSettingsDeleteMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
}

"""Autogenerated return type of ZipSettingsDeleteMutation."""
type ZipSettingsDeleteMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
    zipSettings: ZipSettings
}

"""Zooz settings type"""
type ZoozSettings {
    appId: String
    balotoPaymentMethod: ID
    bankReferencedPaymentMethod: ID
    bankTransferPaymentMethod: ID
    category: CategoryTypeEnum!
    creditCardPaymentMethod: ID

    """ Denominated in cents."""
    customMerchantBaseFeeCents: Int

    """ In string with currency symbol."""
    customMerchantBaseFeeFormatted(
        """
        Currency in which to display money fields. Defaults to the currency of the marketplace's home country.
        """
        currency: String
    ): String
    customMerchantFee: Float
    description: String!
    efectyPaymentMethod: ID
    logoUrl: String!
    overrideCustomMerchantFee: Boolean!
    payUApiKey: String
    payUApiLogin: String
    pendingPaymentConfirmationPageUrl: String
    privateKey: String
    providerHandle: String!
    providerName: String!
    publicKey: String
    status: StatusTypeEnum!
    suRedPaymentMethod: ID
}

"""Autogenerated input type of ZoozSettingsCreateOrUpdateMutation"""
input ZoozSettingsCreateOrUpdateMutationInput {
    """Zooz App ID."""
    appId: String!

    """A unique identifier for the client performing the mutation."""
    clientMutationId: String

    """Merchant base fee."""
    customMerchantBaseFee: String

    """Percentage of the order total to be charged for the merchant fee."""
    customMerchantFee: String

    """Override the custom merchant fee."""
    overrideCustomMerchantFee: Boolean

    """PayU API key used to fetch a list of banks for PSE payments."""
    payUApiKey: String!

    """PayU API login used to fetch a list of banks for PSE payments."""
    payUApiLogin: String!

    """URL to redirect the customer to for pending transactions."""
    pendingPaymentConfirmationPageUrl: String

    """Zooz private key"""
    privateKey: String!

    """Zooz public key"""
    publicKey: String!
}

"""Autogenerated return type of ZoozSettingsCreateOrUpdateMutation."""
type ZoozSettingsCreateOrUpdateMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
    zoozSettings: ZoozSettings
}

"""Autogenerated input type of ZoozSettingsDeleteMutation"""
input ZoozSettingsDeleteMutationInput {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
}

"""Autogenerated return type of ZoozSettingsDeleteMutation."""
type ZoozSettingsDeleteMutationPayload {
    """A unique identifier for the client performing the mutation."""
    clientMutationId: String
    errors: [ValidationError!]
    status: Int!
    zoozSettings: ZoozSettings
}
